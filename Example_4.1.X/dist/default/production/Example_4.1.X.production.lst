

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Jul 17 16:32:34 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataCOMRAM
    61  002A48                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _config_1
    65  002A48  DF                 	db	223
    66                           
    67                           ;initializer for _config_2
    68  002A49  1C                 	db	28
    69                           
    70                           ;initializer for _portconfig
    71  002A4A  FE                 	db	254
    72                           
    73                           	psect	idataBANK0
    74  002A34                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _str1
    78  002A34  56                 	db	86
    79  002A35  4F                 	db	79
    80  002A36  4C                 	db	76
    81  002A37  54                 	db	84
    82  002A38  41                 	db	65
    83  002A39  47                 	db	71
    84  002A3A  45                 	db	69
    85  002A3B  20                 	db	32
    86  002A3C  00                 	db	0
    87                           
    88                           	psect	smallconst
    89  000800                     __psmallconst:
    90                           	opt stack 0
    91  000800                     _dpowers:
    92                           	opt stack 0
    93  000800  0001               	dw	1
    94  000802  0000               	dw	0
    95  000804  000A               	dw	10
    96  000806  0000               	dw	0
    97  000808  0064               	dw	100
    98  00080A  0000               	dw	0
    99  00080C  03E8               	dw	1000
   100  00080E  0000               	dw	0
   101  000810  2710               	dw	10000
   102  000812  0000               	dw	0
   103  000814  86A0               	dw	34464
   104  000816  0001               	dw	1
   105  000818  4240               	dw	16960
   106  00081A  000F               	dw	15
   107  00081C  9680               	dw	38528
   108  00081E  0098               	dw	152
   109  000820  E100               	dw	57600
   110  000822  05F5               	dw	1525
   111  000824  CA00               	dw	51712
   112  000826  3B9A               	dw	15258
   113  000828                     __end_of_dpowers:
   114                           	opt stack 0
   115  000828                     __npowers_:
   116                           	opt stack 0
   117  000828  00                 	db	0
   118  000829  80                 	db	128
   119  00082A  3F                 	db	63
   120  00082B  CD                 	db	205
   121  00082C  CC                 	db	204
   122  00082D  3D                 	db	61
   123  00082E  D7                 	db	215
   124  00082F  23                 	db	35
   125  000830  3C                 	db	60
   126  000831  12                 	db	18
   127  000832  83                 	db	131
   128  000833  3A                 	db	58
   129  000834  B7                 	db	183
   130  000835  D1                 	db	209
   131  000836  38                 	db	56
   132  000837  C6                 	db	198
   133  000838  27                 	db	39
   134  000839  37                 	db	55
   135  00083A  38                 	db	56
   136  00083B  86                 	db	134
   137  00083C  35                 	db	53
   138  00083D  C0                 	db	192
   139  00083E  D6                 	db	214
   140  00083F  33                 	db	51
   141  000840  CC                 	db	204
   142  000841  2B                 	db	43
   143  000842  32                 	db	50
   144  000843  70                 	db	112
   145  000844  89                 	db	137
   146  000845  30                 	db	48
   147  000846  E7                 	db	231
   148  000847  DB                 	db	219
   149  000848  2E                 	db	46
   150  000849  E5                 	db	229
   151  00084A  3C                 	db	60
   152  00084B  1E                 	db	30
   153  00084C  42                 	db	66
   154  00084D  A2                 	db	162
   155  00084E  0D                 	db	13
   156  00084F                     __end_of__npowers_:
   157                           	opt stack 0
   158  00084F                     __powers_:
   159                           	opt stack 0
   160  00084F  00                 	db	0
   161  000850  80                 	db	128
   162  000851  3F                 	db	63
   163  000852  00                 	db	0
   164  000853  20                 	db	32
   165  000854  41                 	db	65
   166  000855  00                 	db	0
   167  000856  C8                 	db	200
   168  000857  42                 	db	66
   169  000858  00                 	db	0
   170  000859  7A                 	db	122
   171  00085A  44                 	db	68
   172  00085B  40                 	db	64
   173  00085C  1C                 	db	28
   174  00085D  46                 	db	70
   175  00085E  50                 	db	80
   176  00085F  C3                 	db	195
   177  000860  47                 	db	71
   178  000861  24                 	db	36
   179  000862  74                 	db	116
   180  000863  49                 	db	73
   181  000864  97                 	db	151
   182  000865  18                 	db	24
   183  000866  4B                 	db	75
   184  000867  BC                 	db	188
   185  000868  BE                 	db	190
   186  000869  4C                 	db	76
   187  00086A  6B                 	db	107
   188  00086B  6E                 	db	110
   189  00086C  4E                 	db	78
   190  00086D  03                 	db	3
   191  00086E  15                 	db	21
   192  00086F  50                 	db	80
   193  000870  79                 	db	121
   194  000871  AD                 	db	173
   195  000872  60                 	db	96
   196  000873  F3                 	db	243
   197  000874  49                 	db	73
   198  000875  71                 	db	113
   199  000876                     __end_of__powers_:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _INTCONbits	set	4082
   208  0000                     _LATAbits	set	3977
   209  0000                     _LATBbits	set	3978
   210  0000                     _PIE1bits	set	3997
   211  0000                     _PIR1bits	set	3998
   212  0000                     _PORTB	set	3969
   213  0000                     _PORTD	set	3971
   214  0000                     _TRISAbits	set	3986
   215  0000                     _TRISB	set	3987
   216  0000                     _TRISD	set	3989
   217  000876                     __stringdata:
   218                           	opt stack 0
   219  000876                     STR_1:
   220  000876  25                 	db	37
   221  000877  31                 	db	49	;'1'
   222  000878  2E                 	db	46
   223  000879  32                 	db	50	;'2'
   224  00087A  66                 	db	102	;'f'
   225  00087B  56                 	db	86	;'V'
   226  00087C  00                 	db	0
   227  00087D                     __end_of__stringdata:
   228                           	opt stack 0
   229                           
   230                           ; #config settings
   231  00087D  00                 	db	0	; dummy byte at the end
   232  0000                     
   233                           	psect	cinit
   234  002696                     __pcinit:
   235                           	opt stack 0
   236  002696                     start_initialization:
   237                           	opt stack 0
   238  002696                     __initialization:
   239                           	opt stack 0
   240                           
   241                           ; Clear objects allocated to BANK0 (9 bytes)
   242  002696  EE00  F087         	lfsr	0,__pbssBANK0
   243  00269A  0E09               	movlw	9
   244  00269C                     clear_0:
   245  00269C  6AEE               	clrf	postinc0,c
   246  00269E  06E8               	decf	wreg,f,c
   247  0026A0  E1FD               	bnz	clear_0
   248                           
   249                           ; Initialize objects allocated to BANK0 (9 bytes)
   250                           ; load TBLPTR registers with __pidataBANK0
   251  0026A2  0E34               	movlw	low __pidataBANK0
   252  0026A4  6EF6               	movwf	tblptrl,c
   253  0026A6  0E2A               	movlw	high __pidataBANK0
   254  0026A8  6EF7               	movwf	tblptrh,c
   255  0026AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   256  0026AC  6EF8               	movwf	tblptru,c
   257  0026AE  EE00  F090         	lfsr	0,__pdataBANK0
   258  0026B2  EE10 F009          	lfsr	1,9
   259  0026B6                     copy_data0:
   260  0026B6  0009               	tblrd		*+
   261  0026B8  CFF5 FFEE          	movff	tablat,postinc0
   262  0026BC  50E5               	movf	postdec1,w,c
   263  0026BE  50E1               	movf	fsr1l,w,c
   264  0026C0  E1FA               	bnz	copy_data0
   265                           
   266                           ; Initialize objects allocated to COMRAM (3 bytes)
   267                           ; load TBLPTR registers with __pidataCOMRAM
   268  0026C2  0E48               	movlw	low __pidataCOMRAM
   269  0026C4  6EF6               	movwf	tblptrl,c
   270  0026C6  0E2A               	movlw	high __pidataCOMRAM
   271  0026C8  6EF7               	movwf	tblptrh,c
   272  0026CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   273  0026CC  6EF8               	movwf	tblptru,c
   274  0026CE  0009               	tblrd		*+	;fetch initializer
   275  0026D0  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   276  0026D4  0009               	tblrd		*+	;fetch initializer
   277  0026D6  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   278  0026DA  0009               	tblrd		*+	;fetch initializer
   279  0026DC  CFF5 F05F          	movff	tablat,__pdataCOMRAM+2
   280  0026E0                     end_of_initialization:
   281                           	opt stack 0
   282  0026E0                     __end_of__initialization:
   283                           	opt stack 0
   284  0026E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   285  0026E2  6EF8               	movwf	tblptru,c
   286  0026E4  0100               	movlb	0
   287  0026E6  EF50  F012         	goto	_main	;jump to C main() function
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	dataCOMRAM
   298  00005D                     __pdataCOMRAM:
   299                           	opt stack 0
   300  00005D                     _config_1:
   301                           	opt stack 0
   302  00005D                     	ds	1
   303  00005E                     _config_2:
   304                           	opt stack 0
   305  00005E                     	ds	1
   306  00005F                     _portconfig:
   307                           	opt stack 0
   308  00005F                     	ds	1
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	bssBANK0
   319  000087                     __pbssBANK0:
   320                           	opt stack 0
   321  000087                     Display@F4520:
   322                           	opt stack 0
   323  000087                     	ds	6
   324  00008D                     _value:
   325                           	opt stack 0
   326  00008D                     	ds	3
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1l	equ	0xFE1
   335                           
   336                           	psect	dataBANK0
   337  000090                     __pdataBANK0:
   338                           	opt stack 0
   339  000090                     _str1:
   340                           	opt stack 0
   341  000090                     	ds	9
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351                           	psect	cstackBANK0
   352  000060                     __pcstackBANK0:
   353                           	opt stack 0
   354  000060                     _sprintf$1409:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x0
   358  000060                     	ds	3
   359  000063                     _sprintf$318:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0x3
   363  000063                     	ds	4
   364  000067                     sprintf@ap:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368  000067                     	ds	2
   369  000069                     sprintf@vd:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x9
   373  000069                     	ds	2
   374  00006B                     sprintf@vd_320:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0xB
   378  00006B                     	ds	2
   379  00006D                     sprintf@_val:
   380                           	opt stack 0
   381                           
   382                           ; 5 bytes @ 0xD
   383  00006D                     	ds	5
   384  000072                     sprintf@integ:
   385                           	opt stack 0
   386                           
   387                           ; 3 bytes @ 0x12
   388  000072                     	ds	3
   389  000075                     sprintf@flag:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x15
   393  000075                     	ds	2
   394  000077                     sprintf@width:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x17
   398  000077                     	ds	2
   399  000079                     sprintf@exp:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x19
   403  000079                     	ds	2
   404  00007B                     sprintf@fval:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x1B
   408  00007B                     	ds	3
   409  00007E                     sprintf@prec:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1E
   413  00007E                     	ds	2
   414  000080                     sprintf@c:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x20
   418  000080                     	ds	1
   419  000081                     Display@voltage:
   420                           	opt stack 0
   421                           
   422                           ; 6 bytes @ 0x21
   423  000081                     	ds	6
   424                           tblptru	equ	0xFF8
   425                           tblptrh	equ	0xFF7
   426                           tblptrl	equ	0xFF6
   427                           tablat	equ	0xFF5
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           postdec1	equ	0xFE5
   431                           fsr1l	equ	0xFE1
   432                           
   433                           	psect	cstackCOMRAM
   434  000001                     __pcstackCOMRAM:
   435                           	opt stack 0
   436  000001                     ?_Delay1KTCYx:
   437                           	opt stack 0
   438  000001                     ?_Delay10TCYx:
   439                           	opt stack 0
   440  000001                     ?_Delay10KTCYx:
   441                           	opt stack 0
   442  000001                     ?_OpenADC:
   443                           	opt stack 0
   444  000001                     ?_isdigit:
   445                           	opt stack 0
   446  000001                     ?___ftge:
   447                           	opt stack 0
   448  000001                     ?_ReadADC:
   449                           	opt stack 0
   450  000001                     ?___awmod:
   451                           	opt stack 0
   452  000001                     ?___lwmod:
   453                           	opt stack 0
   454  000001                     ?___ftpack:
   455                           	opt stack 0
   456  000001                     ?___ftneg:
   457                           	opt stack 0
   458  000001                     ?__tdiv_to_l_:
   459                           	opt stack 0
   460  000001                     ?__div_to_l_:
   461                           	opt stack 0
   462  000001                     ?___lldiv:
   463                           	opt stack 0
   464  000001                     ?___llmod:
   465                           	opt stack 0
   466  000001                     OpenADC@config:
   467                           	opt stack 0
   468  000001                     Delay10KTCYx@unit:
   469                           	opt stack 0
   470  000001                     Delay10TCYx@unit:
   471                           	opt stack 0
   472  000001                     Delay1KTCYx@unit:
   473                           	opt stack 0
   474  000001                     isdigit@c:
   475                           	opt stack 0
   476  000001                     ___awmod@dividend:
   477                           	opt stack 0
   478  000001                     ___lwmod@dividend:
   479                           	opt stack 0
   480  000001                     __div_to_l_@f1:
   481                           	opt stack 0
   482  000001                     ___ftpack@arg:
   483                           	opt stack 0
   484  000001                     __tdiv_to_l_@f1:
   485                           	opt stack 0
   486  000001                     ___ftge@ff1:
   487                           	opt stack 0
   488  000001                     ___ftneg@f1:
   489                           	opt stack 0
   490  000001                     ___lldiv@dividend:
   491                           	opt stack 0
   492  000001                     ___llmod@dividend:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x0
   496  000001                     	ds	1
   497  000002                     ??_Delay10KTCYx:
   498  000002                     ??_isdigit:
   499  000002                     ??_DelayFor18TCY:
   500  000002                     ??_DelayPORXLCD:
   501  000002                     OpenADC@config2:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1
   505  000002                     	ds	1
   506  000003                     DelayFor18TCY@i:
   507                           	opt stack 0
   508  000003                     OpenADC@portconfig:
   509                           	opt stack 0
   510  000003                     _isdigit$1071:
   511                           	opt stack 0
   512  000003                     ___awmod@divisor:
   513                           	opt stack 0
   514  000003                     ___lwmod@divisor:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x2
   518  000003                     	ds	1
   519  000004                     ?_WriteCmdXLCD:
   520                           	opt stack 0
   521  000004                     ?_SetDDRamAddr:
   522                           	opt stack 0
   523  000004                     ??_OpenADC:
   524  000004                     ?_WriteDataXLCD:
   525                           	opt stack 0
   526  000004                     WriteCmdXLCD@cmd:
   527                           	opt stack 0
   528  000004                     WriteDataXLCD@data:
   529                           	opt stack 0
   530  000004                     SetDDRamAddr@DDaddr:
   531                           	opt stack 0
   532  000004                     ___ftpack@exp:
   533                           	opt stack 0
   534  000004                     __div_to_l_@f2:
   535                           	opt stack 0
   536  000004                     __tdiv_to_l_@f2:
   537                           	opt stack 0
   538  000004                     ___ftge@ff2:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x3
   542  000004                     	ds	1
   543  000005                     ?_putsXLCD:
   544                           	opt stack 0
   545  000005                     ??_SetDDRamAddr:
   546  000005                     ??___awmod:
   547  000005                     ??___lwmod:
   548  000005                     ___ftpack@sign:
   549                           	opt stack 0
   550  000005                     putsXLCD@buffer:
   551                           	opt stack 0
   552  000005                     ___lldiv@divisor:
   553                           	opt stack 0
   554  000005                     ___llmod@divisor:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x4
   558  000005                     	ds	1
   559  000006                     ??___ftpack:
   560  000006                     ___awmod@counter:
   561                           	opt stack 0
   562  000006                     ___lwmod@counter:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x5
   566  000006                     	ds	1
   567  000007                     ??__tdiv_to_l_:
   568  000007                     ??__div_to_l_:
   569  000007                     ??___ftge:
   570  000007                     ___awmod@sign:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x6
   574  000007                     	ds	1
   575  000008                     ?_OpenXLCD:
   576                           	opt stack 0
   577  000008                     ?___awdiv:
   578                           	opt stack 0
   579  000008                     OpenXLCD@lcdtype:
   580                           	opt stack 0
   581  000008                     ___awdiv@dividend:
   582                           	opt stack 0
   583  000008                     __div_to_l_@quot:
   584                           	opt stack 0
   585                           
   586                           ; 4 bytes @ 0x7
   587  000008                     	ds	1
   588  000009                     ??_OpenXLCD:
   589  000009                     ??___lldiv:
   590  000009                     ??___llmod:
   591  000009                     ?___ftadd:
   592                           	opt stack 0
   593  000009                     ?___awtoft:
   594                           	opt stack 0
   595  000009                     ?___lltoft:
   596                           	opt stack 0
   597  000009                     ___awtoft@c:
   598                           	opt stack 0
   599  000009                     ___ftadd@f1:
   600                           	opt stack 0
   601  000009                     ___lltoft@c:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x8
   605  000009                     	ds	1
   606  00000A                     ___llmod@counter:
   607                           	opt stack 0
   608  00000A                     ___awdiv@divisor:
   609                           	opt stack 0
   610  00000A                     ___lldiv@quotient:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x9
   614  00000A                     	ds	2
   615  00000C                     ??___awdiv:
   616  00000C                     ??___awtoft:
   617  00000C                     __div_to_l_@cntr:
   618                           	opt stack 0
   619  00000C                     ___ftadd@f2:
   620                           	opt stack 0
   621  00000C                     __tdiv_to_l_@quot:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0xB
   625  00000C                     	ds	1
   626  00000D                     ??___lltoft:
   627  00000D                     ___awdiv@counter:
   628                           	opt stack 0
   629  00000D                     ___awtoft@sign:
   630                           	opt stack 0
   631  00000D                     __div_to_l_@exp1:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0xC
   635  00000D                     	ds	1
   636  00000E                     ___awdiv@sign:
   637                           	opt stack 0
   638  00000E                     ___lldiv@counter:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0xD
   642  00000E                     	ds	1
   643  00000F                     ??___ftadd:
   644  00000F                     ___awdiv@quotient:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0xE
   648  00000F                     	ds	1
   649  000010                     __tdiv_to_l_@cntr:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0xF
   653  000010                     	ds	1
   654  000011                     ?___wmul:
   655                           	opt stack 0
   656  000011                     __tdiv_to_l_@exp1:
   657                           	opt stack 0
   658  000011                     ___lltoft@exp:
   659                           	opt stack 0
   660  000011                     ___wmul@multiplier:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x10
   664  000011                     	ds	2
   665  000013                     ___wmul@multiplicand:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x12
   669  000013                     	ds	1
   670  000014                     ___ftadd@sign:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x13
   674  000014                     	ds	1
   675  000015                     ___ftadd@exp2:
   676                           	opt stack 0
   677  000015                     ___wmul@product:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x14
   681  000015                     	ds	1
   682  000016                     ___ftadd@exp1:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x15
   686  000016                     	ds	1
   687  000017                     ?___ftsub:
   688                           	opt stack 0
   689  000017                     ?___fttol:
   690                           	opt stack 0
   691  000017                     ___ftsub@f1:
   692                           	opt stack 0
   693  000017                     ___fttol@f1:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x16
   697  000017                     	ds	3
   698  00001A                     ___ftsub@f2:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x19
   702  00001A                     	ds	1
   703  00001B                     ??___fttol:
   704                           
   705                           ; 0 bytes @ 0x1A
   706  00001B                     	ds	2
   707  00001D                     ?___asftsub:
   708                           	opt stack 0
   709  00001D                     ___asftsub@f1p:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x1C
   713  00001D                     	ds	2
   714  00001F                     ___asftsub@f2:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x1E
   718  00001F                     	ds	1
   719  000020                     ___fttol@sign1:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x1F
   723  000020                     	ds	1
   724  000021                     ___fttol@lval:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x20
   728  000021                     	ds	1
   729  000022                     
   730                           ; 0 bytes @ 0x21
   731  000022                     	ds	3
   732  000025                     ___fttol@exp1:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x24
   736  000025                     	ds	1
   737  000026                     ?___ftmul:
   738                           	opt stack 0
   739  000026                     ___ftmul@f1:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x25
   743  000026                     	ds	3
   744  000029                     ___ftmul@f2:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x28
   748  000029                     	ds	3
   749  00002C                     ??___ftmul:
   750                           
   751                           ; 0 bytes @ 0x2B
   752  00002C                     	ds	5
   753  000031                     ___ftmul@exp:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x30
   757  000031                     	ds	1
   758  000032                     ___ftmul@f3_as_product:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x31
   762  000032                     	ds	3
   763  000035                     ___ftmul@cntr:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x34
   767  000035                     	ds	1
   768  000036                     ___ftmul@sign:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x35
   772  000036                     	ds	1
   773  000037                     ?___ftdiv:
   774                           	opt stack 0
   775  000037                     ?_fround:
   776                           	opt stack 0
   777  000037                     ?_scale:
   778                           	opt stack 0
   779  000037                     ?___asftmul:
   780                           	opt stack 0
   781  000037                     fround@prec:
   782                           	opt stack 0
   783  000037                     scale@scl:
   784                           	opt stack 0
   785  000037                     ___asftmul@f1p:
   786                           	opt stack 0
   787  000037                     ___ftdiv@f1:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x36
   791  000037                     	ds	2
   792  000039                     ___asftmul@f2:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x38
   796  000039                     	ds	1
   797  00003A                     ??_fround:
   798  00003A                     ??_scale:
   799  00003A                     ___ftdiv@f2:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x39
   803  00003A                     	ds	2
   804  00003C                     
   805                           ; 0 bytes @ 0x3B
   806  00003C                     	ds	1
   807  00003D                     ??___ftdiv:
   808                           
   809                           ; 0 bytes @ 0x3C
   810  00003D                     	ds	3
   811  000040                     _fround$1407:
   812                           	opt stack 0
   813  000040                     _scale$1408:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x3F
   817  000040                     	ds	2
   818  000042                     ___ftdiv@cntr:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x41
   822  000042                     	ds	1
   823  000043                     ___ftdiv@f3:
   824                           	opt stack 0
   825  000043                     _fround$1406:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x42
   829  000043                     	ds	3
   830  000046                     ?___asftadd:
   831                           	opt stack 0
   832  000046                     ___ftdiv@exp:
   833                           	opt stack 0
   834  000046                     ___asftadd@f1p:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x45
   838  000046                     	ds	1
   839  000047                     ___ftdiv@sign:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x46
   843  000047                     	ds	1
   844  000048                     ?_ADC_Value:
   845                           	opt stack 0
   846  000048                     ___asftadd@f2:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x47
   850  000048                     	ds	3
   851  00004B                     ?_sprintf:
   852                           	opt stack 0
   853  00004B                     sprintf@sp:
   854                           	opt stack 0
   855  00004B                     ADC_Value@value:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x4A
   859  00004B                     	ds	2
   860  00004D                     sprintf@f:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x4C
   864  00004D                     	ds	5
   865  000052                     ??_sprintf:
   866                           
   867                           ; 0 bytes @ 0x51
   868  000052                     	ds	6
   869  000058                     ?_Display:
   870                           	opt stack 0
   871  000058                     Display@val:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x57
   875  000058                     	ds	3
   876  00005B                     ??_Display:
   877                           
   878                           ; 0 bytes @ 0x5A
   879  00005B                     	ds	1
   880  00005C                     ??_main:
   881                           
   882                           ; 0 bytes @ 0x5B
   883  00005C                     	ds	1
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           postdec1	equ	0xFE5
   891                           fsr1l	equ	0xFE1
   892                           
   893 ;;
   894 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   895 ;;
   896 ;; *************** function _main *****************
   897 ;; Defined at:
   898 ;;		line 47 in file "main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;		None
   903 ;; Return value:  Size  Location     Type
   904 ;;		None               void
   905 ;; Registers used:
   906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   912 ;;      Params:         0       0       0       0       0       0       0       0       0
   913 ;;      Locals:         0       0       0       0       0       0       0       0       0
   914 ;;      Temps:          1       0       0       0       0       0       0       0       0
   915 ;;      Totals:         1       0       0       0       0       0       0       0       0
   916 ;;Total ram usage:        1 bytes
   917 ;; Hardware stack levels required when called:    6
   918 ;; This function calls:
   919 ;;		_Display
   920 ;;		_WriteCmdXLCD
   921 ;;		_putsXLCD
   922 ;;		_OpenXLCD
   923 ;;		_SetDDRamAddr
   924 ;;		_OpenADC
   925 ;;		_ADC_Value
   926 ;; This function is called by:
   927 ;;		Startup code after reset
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text0
   932  0024A0                     __ptext0:
   933                           	opt stack 0
   934  0024A0                     _main:
   935                           	opt stack 25
   936                           
   937                           ;main.c: 48: ADCON1 = 0X0F;
   938                           
   939                           ;incstack = 0
   940                           ;incstack = 0
   941  0024A0  0E0F               	movlw	15
   942  0024A2  6EC1               	movwf	4033,c	;volatile
   943                           
   944                           ;main.c: 49: OpenXLCD(0b00111100 & 0b00111000);
   945  0024A4  6E5C               	movwf	??_main& (0+255),c
   946  0024A6  0E38               	movlw	56
   947  0024A8  6E08               	movwf	?_OpenXLCD,c
   948  0024AA  505C               	movf	??_main& (0+255),w,c
   949  0024AC  EC40  F010         	call	_OpenXLCD	;wreg free
   950                           
   951                           ;main.c: 50: WriteCmdXLCD(0x0C);
   952  0024B0  6E5C               	movwf	??_main& (0+255),c
   953  0024B2  0E0C               	movlw	12
   954  0024B4  6E04               	movwf	?_WriteCmdXLCD,c
   955  0024B6  505C               	movf	??_main& (0+255),w,c
   956  0024B8  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
   957                           
   958                           ;main.c: 51: WriteCmdXLCD(0x01);
   959  0024BC  6E5C               	movwf	??_main& (0+255),c
   960  0024BE  0E01               	movlw	1
   961  0024C0  6E04               	movwf	?_WriteCmdXLCD,c
   962  0024C2  505C               	movf	??_main& (0+255),w,c
   963  0024C4  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
   964                           
   965                           ;main.c: 52: SetDDRamAddr(0x80);
   966  0024C8  6E5C               	movwf	??_main& (0+255),c
   967  0024CA  0E80               	movlw	128
   968  0024CC  6E04               	movwf	?_SetDDRamAddr,c
   969  0024CE  505C               	movf	??_main& (0+255),w,c
   970  0024D0  EC20  F013         	call	_SetDDRamAddr	;wreg free
   971                           
   972                           ;main.c: 54: putsXLCD((char*)str1);
   973  0024D4  0100               	movlb	0	; () banked
   974  0024D6  0E00               	movlw	high _str1
   975  0024D8  6E06               	movwf	?_putsXLCD+1,c
   976  0024DA  0100               	movlb	0	; () banked
   977  0024DC  0E90               	movlw	low _str1
   978  0024DE  6E05               	movwf	?_putsXLCD,c
   979  0024E0  EC76  F014         	call	_putsXLCD	;wreg free
   980                           
   981                           ;main.c: 55: OpenADC(config_1, config_2, portconfig);
   982  0024E4  C05D  F001         	movff	_config_1,?_OpenADC
   983  0024E8  C05E  F002         	movff	_config_2,?_OpenADC+1
   984  0024EC  C05F  F003         	movff	_portconfig,?_OpenADC+2
   985  0024F0  ECF2  F012         	call	_OpenADC	;wreg free
   986  0024F4                     l4572:
   987                           
   988                           ;main.c: 57: {
   989                           ;main.c: 58: value = ADC_Value();
   990  0024F4  ECD4  F011         	call	_ADC_Value	;wreg free
   991  0024F8  C04A  F08F         	movff	?_ADC_Value+2,_value+2
   992  0024FC  C049  F08E         	movff	?_ADC_Value+1,_value+1
   993  002500  C048  F08D         	movff	?_ADC_Value,_value
   994                           
   995                           ;main.c: 59: Display(value);
   996  002504  C08D  F058         	movff	_value,?_Display
   997  002508  C08E  F059         	movff	_value+1,?_Display+1
   998  00250C  C08F  F05A         	movff	_value+2,?_Display+2
   999  002510  EC75  F013         	call	_Display	;wreg free
  1000  002514  D7EF               	goto	l4572
  1001  002516                     __end_of_main:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1l	equ	0xFE1
  1011                           
  1012 ;; *************** function _ADC_Value *****************
  1013 ;; Defined at:
  1014 ;;		line 19 in file "adc_.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  value           3   74[COMRAM] float 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  3   71[COMRAM] float 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1028 ;;      Params:         3       0       0       0       0       0       0       0       0
  1029 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1031 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1032 ;;Total ram usage:        6 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    2
  1035 ;; This function calls:
  1036 ;;		_ConvertADC
  1037 ;;		_BusyADC
  1038 ;;		_ReadADC
  1039 ;;		___ftdiv
  1040 ;;		___ftmul
  1041 ;;		___awtoft
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text1
  1048  0023A8                     __ptext1:
  1049                           	opt stack 0
  1050  0023A8                     _ADC_Value:
  1051                           	opt stack 28
  1052                           
  1053                           ;adc_.c: 20: float value = 0.0;
  1054                           
  1055                           ;incstack = 0
  1056                           ;incstack = 0
  1057  0023A8  0E00               	movlw	0
  1058  0023AA  6E4B               	movwf	ADC_Value@value,c
  1059  0023AC  0E00               	movlw	0
  1060  0023AE  6E4C               	movwf	ADC_Value@value+1,c
  1061  0023B0  0E00               	movlw	0
  1062  0023B2  6E4D               	movwf	ADC_Value@value+2,c
  1063                           
  1064                           ;adc_.c: 21: ConvertADC();
  1065  0023B4  EC22  F015         	call	_ConvertADC	;wreg free
  1066  0023B8                     l4084:
  1067  0023B8  EC1F  F015         	call	_BusyADC	;wreg free
  1068  0023BC  0900               	iorlw	0
  1069  0023BE  A4D8               	btfss	status,2,c
  1070  0023C0  D7FB               	goto	l4084
  1071                           
  1072                           ;adc_.c: 23: value = ReadADC();
  1073  0023C2  EC15  F015         	call	_ReadADC	;wreg free
  1074  0023C6  C001  F009         	movff	?_ReadADC,?___awtoft
  1075  0023CA  C002  F00A         	movff	?_ReadADC+1,?___awtoft+1
  1076  0023CE  ECC2  F013         	call	___awtoft	;wreg free
  1077  0023D2  C00B  F04D         	movff	?___awtoft+2,ADC_Value@value+2
  1078  0023D6  C00A  F04C         	movff	?___awtoft+1,ADC_Value@value+1
  1079  0023DA  C009  F04B         	movff	?___awtoft,ADC_Value@value
  1080                           
  1081                           ;adc_.c: 24: return((value * 5)/1024);
  1082  0023DE  0E00               	movlw	0
  1083  0023E0  6E29               	movwf	?___ftmul+3,c
  1084  0023E2  0EA0               	movlw	160
  1085  0023E4  6E2A               	movwf	?___ftmul+4,c
  1086  0023E6  0E40               	movlw	64
  1087  0023E8  6E2B               	movwf	?___ftmul+5,c
  1088  0023EA  C04B  F026         	movff	ADC_Value@value,?___ftmul
  1089  0023EE  C04C  F027         	movff	ADC_Value@value+1,?___ftmul+1
  1090  0023F2  C04D  F028         	movff	ADC_Value@value+2,?___ftmul+2
  1091  0023F6  EC4F  F00E         	call	___ftmul	;wreg free
  1092  0023FA  C028  F039         	movff	?___ftmul+2,?___ftdiv+2
  1093  0023FE  C027  F038         	movff	?___ftmul+1,?___ftdiv+1
  1094  002402  C026  F037         	movff	?___ftmul,?___ftdiv
  1095  002406  0E00               	movlw	0
  1096  002408  6E3A               	movwf	?___ftdiv+3,c
  1097  00240A  0E80               	movlw	128
  1098  00240C  6E3B               	movwf	?___ftdiv+4,c
  1099  00240E  0E44               	movlw	68
  1100  002410  6E3C               	movwf	?___ftdiv+5,c
  1101  002412  ECD7  F00E         	call	___ftdiv	;wreg free
  1102  002416  C039  F04A         	movff	?___ftdiv+2,?_ADC_Value+2
  1103  00241A  C038  F049         	movff	?___ftdiv+1,?_ADC_Value+1
  1104  00241E  C037  F048         	movff	?___ftdiv,?_ADC_Value
  1105  002422  0012               	return	
  1106  002424                     __end_of_ADC_Value:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function ___awtoft *****************
  1119 ;; Defined at:
  1120 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtoft.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  c               2    8[COMRAM] int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  sign            1   12[COMRAM] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  3    8[COMRAM] float 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1134 ;;      Params:         3       0       0       0       0       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1136 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1137 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1138 ;;Total ram usage:        5 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    1
  1141 ;; This function calls:
  1142 ;;		___ftpack
  1143 ;; This function is called by:
  1144 ;;		_ADC_Value
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text2
  1149  002784                     __ptext2:
  1150                           	opt stack 0
  1151  002784                     ___awtoft:
  1152                           	opt stack 28
  1153                           
  1154                           ;incstack = 0
  1155                           ;incstack = 0
  1156  002784  6E0C               	movwf	??___awtoft& (0+255),c
  1157  002786  0E00               	movlw	0
  1158  002788  6E0D               	movwf	___awtoft@sign,c
  1159  00278A  500C               	movf	??___awtoft& (0+255),w,c
  1160  00278C  AE0A               	btfss	___awtoft@c+1,7,c
  1161  00278E  D008               	goto	l3940
  1162  002790  6C09               	negf	___awtoft@c,c
  1163  002792  1E0A               	comf	___awtoft@c+1,f,c
  1164  002794  B0D8               	btfsc	status,0,c
  1165  002796  2A0A               	incf	___awtoft@c+1,f,c
  1166  002798  6E0C               	movwf	??___awtoft& (0+255),c
  1167  00279A  0E01               	movlw	1
  1168  00279C  6E0D               	movwf	___awtoft@sign,c
  1169  00279E  500C               	movf	??___awtoft& (0+255),w,c
  1170  0027A0                     l3940:
  1171  0027A0  C009  F001         	movff	___awtoft@c,?___ftpack
  1172  0027A4  C00A  F002         	movff	___awtoft@c+1,?___ftpack+1
  1173  0027A8  6A03               	clrf	?___ftpack+2,c
  1174  0027AA  6E0C               	movwf	??___awtoft& (0+255),c
  1175  0027AC  0E8E               	movlw	142
  1176  0027AE  6E04               	movwf	?___ftpack+3,c
  1177  0027B0  500C               	movf	??___awtoft& (0+255),w,c
  1178  0027B2  C00D  F005         	movff	___awtoft@sign,?___ftpack+4
  1179  0027B6  ECA5  F010         	call	___ftpack	;wreg free
  1180  0027BA  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  1181  0027BE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  1182  0027C2  C001  F009         	movff	?___ftpack,?___awtoft
  1183  0027C6  0012               	return	
  1184  0027C8                     __end_of___awtoft:
  1185                           	opt stack 0
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postdec1	equ	0xFE5
  1193                           fsr1l	equ	0xFE1
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function ___ftdiv *****************
  1197 ;; Defined at:
  1198 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdiv.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  f1              3   54[COMRAM] float 
  1201 ;;  f2              3   57[COMRAM] float 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  f3              3   66[COMRAM] float 
  1204 ;;  sign            1   70[COMRAM] unsigned char 
  1205 ;;  exp             1   69[COMRAM] unsigned char 
  1206 ;;  cntr            1   65[COMRAM] unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  3   54[COMRAM] float 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1216 ;;      Params:         6       0       0       0       0       0       0       0       0
  1217 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1218 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1219 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1220 ;;Total ram usage:       17 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    1
  1223 ;; This function calls:
  1224 ;;		___ftpack
  1225 ;; This function is called by:
  1226 ;;		_ADC_Value
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text3
  1231  001DAE                     __ptext3:
  1232                           	opt stack 0
  1233  001DAE                     ___ftdiv:
  1234                           	opt stack 28
  1235                           
  1236                           ;incstack = 0
  1237                           ;incstack = 0
  1238  001DAE  0E0F               	movlw	15
  1239  001DB0  6E3D               	movwf	??___ftdiv& (0+255),c
  1240  001DB2  C037  F03E         	movff	___ftdiv@f1,??___ftdiv+1
  1241  001DB6  C038  F03F         	movff	___ftdiv@f1+1,??___ftdiv+2
  1242  001DBA  C039  F040         	movff	___ftdiv@f1+2,??___ftdiv+3
  1243  001DBE  283D               	incf	??___ftdiv,w,c
  1244  001DC0  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  1245  001DC2  D004               	goto	u2580
  1246  001DC4                     u2585:
  1247  001DC4  90D8               	bcf	status,0,c
  1248  001DC6  3240               	rrcf	??___ftdiv+3,f,c
  1249  001DC8  323F               	rrcf	??___ftdiv+2,f,c
  1250  001DCA  323E               	rrcf	??___ftdiv+1,f,c
  1251  001DCC                     u2580:
  1252  001DCC  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  1253  001DCE  D7FA               	goto	u2585
  1254  001DD0  503E               	movf	??___ftdiv+1,w,c
  1255  001DD2  6E46               	movwf	___ftdiv@exp,c
  1256  001DD4  6646               	tstfsz	___ftdiv@exp& (0+255),c
  1257  001DD6  D001               	goto	l3980
  1258  001DD8  D015               	goto	u2610
  1259  001DDA                     l3980:
  1260  001DDA  0E0F               	movlw	15
  1261  001DDC  6E3D               	movwf	??___ftdiv& (0+255),c
  1262  001DDE  C03A  F03E         	movff	___ftdiv@f2,??___ftdiv+1
  1263  001DE2  C03B  F03F         	movff	___ftdiv@f2+1,??___ftdiv+2
  1264  001DE6  C03C  F040         	movff	___ftdiv@f2+2,??___ftdiv+3
  1265  001DEA  283D               	incf	??___ftdiv,w,c
  1266  001DEC  6E41               	movwf	(??___ftdiv+4)& (0+255),c
  1267  001DEE  D004               	goto	u2600
  1268  001DF0                     u2605:
  1269  001DF0  90D8               	bcf	status,0,c
  1270  001DF2  3240               	rrcf	??___ftdiv+3,f,c
  1271  001DF4  323F               	rrcf	??___ftdiv+2,f,c
  1272  001DF6  323E               	rrcf	??___ftdiv+1,f,c
  1273  001DF8                     u2600:
  1274  001DF8  2E41               	decfsz	(??___ftdiv+4)& (0+255),f,c
  1275  001DFA  D7FA               	goto	u2605
  1276  001DFC  503E               	movf	??___ftdiv+1,w,c
  1277  001DFE  6E47               	movwf	___ftdiv@sign,c
  1278  001E00  6647               	tstfsz	___ftdiv@sign& (0+255),c
  1279  001E02  D007               	goto	l3986
  1280  001E04                     u2610:
  1281  001E04  0E00               	movlw	0
  1282  001E06  6E37               	movwf	?___ftdiv,c
  1283  001E08  0E00               	movlw	0
  1284  001E0A  6E38               	movwf	?___ftdiv+1,c
  1285  001E0C  0E00               	movlw	0
  1286  001E0E  6E39               	movwf	?___ftdiv+2,c
  1287  001E10  D04C               	goto	l715
  1288  001E12                     l3986:
  1289  001E12  0E00               	movlw	0
  1290  001E14  6E43               	movwf	___ftdiv@f3,c
  1291  001E16  0E00               	movlw	0
  1292  001E18  6E44               	movwf	___ftdiv@f3+1,c
  1293  001E1A  0E00               	movlw	0
  1294  001E1C  6E45               	movwf	___ftdiv@f3+2,c
  1295  001E1E  5047               	movf	___ftdiv@sign,w,c
  1296  001E20  0F89               	addlw	137
  1297  001E22  5E46               	subwf	___ftdiv@exp,f,c
  1298  001E24  C039  F047         	movff	___ftdiv@f1+2,___ftdiv@sign
  1299  001E28  503C               	movf	(___ftdiv@f2+2)& (0+255),w,c
  1300  001E2A  1A47               	xorwf	___ftdiv@sign,f,c
  1301  001E2C  0E80               	movlw	128
  1302  001E2E  1647               	andwf	___ftdiv@sign,f,c
  1303  001E30  8E38               	bsf	___ftdiv@f1+1,7,c
  1304  001E32  0EFF               	movlw	255
  1305  001E34  1637               	andwf	___ftdiv@f1,f,c
  1306  001E36  0EFF               	movlw	255
  1307  001E38  1638               	andwf	___ftdiv@f1+1,f,c
  1308  001E3A  0E00               	movlw	0
  1309  001E3C  1639               	andwf	___ftdiv@f1+2,f,c
  1310  001E3E  8E3B               	bsf	___ftdiv@f2+1,7,c
  1311  001E40  0EFF               	movlw	255
  1312  001E42  163A               	andwf	___ftdiv@f2,f,c
  1313  001E44  0EFF               	movlw	255
  1314  001E46  163B               	andwf	___ftdiv@f2+1,f,c
  1315  001E48  0E00               	movlw	0
  1316  001E4A  163C               	andwf	___ftdiv@f2+2,f,c
  1317  001E4C  6E3D               	movwf	??___ftdiv& (0+255),c
  1318  001E4E  0E18               	movlw	24
  1319  001E50  6E42               	movwf	___ftdiv@cntr,c
  1320  001E52  503D               	movf	??___ftdiv& (0+255),w,c
  1321  001E54                     l717:
  1322  001E54  90D8               	bcf	status,0,c
  1323  001E56  3643               	rlcf	___ftdiv@f3,f,c
  1324  001E58  3644               	rlcf	___ftdiv@f3+1,f,c
  1325  001E5A  3645               	rlcf	___ftdiv@f3+2,f,c
  1326  001E5C  503A               	movf	___ftdiv@f2,w,c
  1327  001E5E  5C37               	subwf	___ftdiv@f1,w,c
  1328  001E60  503B               	movf	___ftdiv@f2+1,w,c
  1329  001E62  5838               	subwfb	___ftdiv@f1+1,w,c
  1330  001E64  503C               	movf	___ftdiv@f2+2,w,c
  1331  001E66  5839               	subwfb	___ftdiv@f1+2,w,c
  1332  001E68  A0D8               	btfss	status,0,c
  1333  001E6A  D007               	goto	l718
  1334  001E6C  503A               	movf	___ftdiv@f2,w,c
  1335  001E6E  5E37               	subwf	___ftdiv@f1,f,c
  1336  001E70  503B               	movf	___ftdiv@f2+1,w,c
  1337  001E72  5A38               	subwfb	___ftdiv@f1+1,f,c
  1338  001E74  503C               	movf	___ftdiv@f2+2,w,c
  1339  001E76  5A39               	subwfb	___ftdiv@f1+2,f,c
  1340  001E78  8043               	bsf	___ftdiv@f3,0,c
  1341  001E7A                     l718:
  1342  001E7A  90D8               	bcf	status,0,c
  1343  001E7C  3637               	rlcf	___ftdiv@f1,f,c
  1344  001E7E  3638               	rlcf	___ftdiv@f1+1,f,c
  1345  001E80  3639               	rlcf	___ftdiv@f1+2,f,c
  1346  001E82  2E42               	decfsz	___ftdiv@cntr,f,c
  1347  001E84  D7E7               	goto	l717
  1348  001E86  C043  F001         	movff	___ftdiv@f3,?___ftpack
  1349  001E8A  C044  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  1350  001E8E  C045  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  1351  001E92  C046  F004         	movff	___ftdiv@exp,?___ftpack+3
  1352  001E96  C047  F005         	movff	___ftdiv@sign,?___ftpack+4
  1353  001E9A  ECA5  F010         	call	___ftpack	;wreg free
  1354  001E9E  C003  F039         	movff	?___ftpack+2,?___ftdiv+2
  1355  001EA2  C002  F038         	movff	?___ftpack+1,?___ftdiv+1
  1356  001EA6  C001  F037         	movff	?___ftpack,?___ftdiv
  1357  001EAA                     l715:
  1358  001EAA  0012               	return	
  1359  001EAC                     __end_of___ftdiv:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1l	equ	0xFE1
  1369                           status	equ	0xFD8
  1370                           
  1371 ;; *************** function _ReadADC *****************
  1372 ;; Defined at:
  1373 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcread.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  2    0[COMRAM] int 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1387 ;;      Params:         2       0       0       0       0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1390 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1391 ;;Total ram usage:        2 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_ADC_Value
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text4
  1401  002A2A                     __ptext4:
  1402                           	opt stack 0
  1403  002A2A                     _ReadADC:
  1404                           	opt stack 29
  1405                           
  1406                           ;incstack = 0
  1407                           ;incstack = 0
  1408  002A2A  50C4               	movf	4036,w,c	;volatile
  1409  002A2C  6E02               	movwf	?_ReadADC+1,c
  1410  002A2E  50C3               	movf	4035,w,c	;volatile
  1411  002A30  6E01               	movwf	?_ReadADC,c
  1412  002A32  0012               	return	
  1413  002A34                     __end_of_ReadADC:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           status	equ	0xFD8
  1424                           
  1425 ;; *************** function _BusyADC *****************
  1426 ;; Defined at:
  1427 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcbusy.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;		None
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;		None
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      unsigned char 
  1434 ;; Registers used:
  1435 ;;		wreg, status,2, status,0
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1441 ;;      Params:         0       0       0       0       0       0       0       0       0
  1442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1444 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1445 ;;Total ram usage:        0 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_ADC_Value
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text5
  1455  002A3E                     __ptext5:
  1456                           	opt stack 0
  1457  002A3E                     _BusyADC:
  1458                           	opt stack 29
  1459                           
  1460                           ;incstack = 0
  1461                           ;incstack = 0
  1462  002A3E  30C2               	rrcf	4034,w,c	;volatile
  1463  002A40  0B01               	andlw	1
  1464  002A42  0012               	return	
  1465  002A44                     __end_of_BusyADC:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _ConvertADC *****************
  1478 ;; Defined at:
  1479 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;		None               void
  1486 ;; Registers used:
  1487 ;;		None
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1493 ;;      Params:         0       0       0       0       0       0       0       0       0
  1494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_ADC_Value
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text6
  1507  002A44                     __ptext6:
  1508                           	opt stack 0
  1509  002A44                     _ConvertADC:
  1510                           	opt stack 29
  1511                           
  1512                           ;incstack = 0
  1513                           ;incstack = 0
  1514  002A44  82C2               	bsf	4034,1,c	;volatile
  1515  002A46  0012               	return	
  1516  002A48                     __end_of_ConvertADC:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _OpenADC *****************
  1529 ;; Defined at:
  1530 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  config          1    0[COMRAM] unsigned char 
  1533 ;;  config2         1    1[COMRAM] unsigned char 
  1534 ;;  portconfig      1    2[COMRAM] unsigned char 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;		None               void
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1546 ;;      Params:         3       0       0       0       0       0       0       0       0
  1547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1548 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1549 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1550 ;;Total ram usage:        5 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text7
  1560  0025E4                     __ptext7:
  1561                           	opt stack 0
  1562  0025E4                     _OpenADC:
  1563                           	opt stack 30
  1564                           
  1565                           ;incstack = 0
  1566                           ;incstack = 0
  1567  0025E4  0E00               	movlw	0
  1568  0025E6  6EC2               	movwf	4034,c	;volatile
  1569  0025E8  0E00               	movlw	0
  1570  0025EA  6EC0               	movwf	4032,c	;volatile
  1571  0025EC  90D8               	bcf	status,0,c
  1572  0025EE  3002               	rrcf	OpenADC@config2,w,c
  1573  0025F0  0B3C               	andlw	60
  1574  0025F2  6EC2               	movwf	4034,c	;volatile
  1575  0025F4  C002  F004         	movff	OpenADC@config2,??_OpenADC
  1576  0025F8  3A04               	swapf	??_OpenADC,f,c
  1577  0025FA  0EF0               	movlw	240
  1578  0025FC  1604               	andwf	??_OpenADC,f,c
  1579  0025FE  0E30               	movlw	48
  1580  002600  1604               	andwf	??_OpenADC,f,c
  1581  002602  5003               	movf	OpenADC@portconfig,w,c
  1582  002604  0B0F               	andlw	15
  1583  002606  1004               	iorwf	??_OpenADC,w,c
  1584  002608  6EC1               	movwf	4033,c	;volatile
  1585  00260A  C001  F004         	movff	OpenADC@config,??_OpenADC
  1586  00260E  90D8               	bcf	status,0,c
  1587  002610  3604               	rlcf	??_OpenADC,f,c
  1588  002612  90D8               	bcf	status,0,c
  1589  002614  3604               	rlcf	??_OpenADC,f,c
  1590  002616  0E38               	movlw	56
  1591  002618  1604               	andwf	??_OpenADC,f,c
  1592  00261A  C001  F005         	movff	OpenADC@config,??_OpenADC+1
  1593  00261E  3A05               	swapf	??_OpenADC+1,f,c
  1594  002620  0E0F               	movlw	15
  1595  002622  1605               	andwf	??_OpenADC+1,f,c
  1596  002624  0E07               	movlw	7
  1597  002626  1605               	andwf	??_OpenADC+1,f,c
  1598  002628  5001               	movf	OpenADC@config,w,c
  1599  00262A  0B80               	andlw	128
  1600  00262C  1005               	iorwf	??_OpenADC+1,w,c
  1601  00262E  1004               	iorwf	??_OpenADC,w,c
  1602  002630  6EC0               	movwf	4032,c	;volatile
  1603  002632  AE02               	btfss	OpenADC@config2,7,c
  1604  002634  D003               	goto	l282
  1605  002636  9C9E               	bcf	3998,6,c	;volatile
  1606  002638  8C9D               	bsf	3997,6,c	;volatile
  1607  00263A  8CF2               	bsf	intcon,6,c	;volatile
  1608  00263C                     l282:
  1609  00263C  80C2               	bsf	4034,0,c	;volatile
  1610  00263E  0012               	return	
  1611  002640                     __end_of_OpenADC:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           intcon	equ	0xFF2
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           postdec1	equ	0xFE5
  1621                           fsr1l	equ	0xFE1
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _OpenXLCD *****************
  1625 ;; Defined at:
  1626 ;;		line 83 in file "xlcd.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  lcdtype         1    7[COMRAM] unsigned char 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;		None               void
  1633 ;; Registers used:
  1634 ;;		wreg, status,2, status,0, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1640 ;;      Params:         1       0       0       0       0       0       0       0       0
  1641 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1642 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1643 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1644 ;;Total ram usage:        2 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:    3
  1647 ;; This function calls:
  1648 ;;		_DelayPORXLCD
  1649 ;;		_Delay10KTCYx
  1650 ;;		_WriteCmdXLCD
  1651 ;;		_SetDDRamAddr
  1652 ;;		_BusyXLCD
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text8
  1659  002080                     __ptext8:
  1660                           	opt stack 0
  1661  002080                     _OpenXLCD:
  1662                           	opt stack 27
  1663                           
  1664                           ;xlcd.c: 85: PORTD = 0;
  1665                           
  1666                           ;incstack = 0
  1667                           ;incstack = 0
  1668  002080  0E00               	movlw	0
  1669  002082  6E83               	movwf	3971,c	;volatile
  1670                           
  1671                           ;xlcd.c: 86: TRISD = 0x00;
  1672  002084  0E00               	movlw	0
  1673  002086  6E95               	movwf	3989,c	;volatile
  1674                           
  1675                           ;xlcd.c: 88: TRISAbits.TRISA1 = 0;
  1676  002088  9292               	bcf	3986,1,c	;volatile
  1677                           
  1678                           ;xlcd.c: 89: TRISAbits.TRISA2 = 0;
  1679  00208A  9492               	bcf	3986,2,c	;volatile
  1680                           
  1681                           ;xlcd.c: 90: TRISAbits.TRISA0 = 0;
  1682  00208C  9092               	bcf	3986,0,c	;volatile
  1683                           
  1684                           ;xlcd.c: 91: LATAbits.LATA1 = 0;
  1685  00208E  9289               	bcf	3977,1,c	;volatile
  1686                           
  1687                           ;xlcd.c: 92: LATAbits.LATA2 = 0;
  1688  002090  9489               	bcf	3977,2,c	;volatile
  1689                           
  1690                           ;xlcd.c: 93: LATAbits.LATA0 = 0;
  1691  002092  9089               	bcf	3977,0,c	;volatile
  1692                           
  1693                           ;xlcd.c: 96: DelayPORXLCD();
  1694  002094  EC00  F015         	call	_DelayPORXLCD	;wreg free
  1695                           
  1696                           ;xlcd.c: 98: WriteCmdXLCD(0x30);
  1697  002098  6E09               	movwf	??_OpenXLCD& (0+255),c
  1698  00209A  0E30               	movlw	48
  1699  00209C  6E04               	movwf	?_WriteCmdXLCD,c
  1700  00209E  5009               	movf	??_OpenXLCD& (0+255),w,c
  1701  0020A0  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1702                           
  1703                           ;xlcd.c: 99: Delay10KTCYx(0x05);
  1704  0020A4  6E09               	movwf	??_OpenXLCD& (0+255),c
  1705  0020A6  0E05               	movlw	5
  1706  0020A8  6E01               	movwf	?_Delay10KTCYx,c
  1707  0020AA  5009               	movf	??_OpenXLCD& (0+255),w,c
  1708  0020AC  ECF5  F014         	call	_Delay10KTCYx	;wreg free
  1709                           
  1710                           ;xlcd.c: 100: WriteCmdXLCD(0x30);
  1711  0020B0  6E09               	movwf	??_OpenXLCD& (0+255),c
  1712  0020B2  0E30               	movlw	48
  1713  0020B4  6E04               	movwf	?_WriteCmdXLCD,c
  1714  0020B6  5009               	movf	??_OpenXLCD& (0+255),w,c
  1715  0020B8  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1716                           
  1717                           ;xlcd.c: 101: Delay10KTCYx(0x01);
  1718  0020BC  6E09               	movwf	??_OpenXLCD& (0+255),c
  1719  0020BE  0E01               	movlw	1
  1720  0020C0  6E01               	movwf	?_Delay10KTCYx,c
  1721  0020C2  5009               	movf	??_OpenXLCD& (0+255),w,c
  1722  0020C4  ECF5  F014         	call	_Delay10KTCYx	;wreg free
  1723                           
  1724                           ;xlcd.c: 102: WriteCmdXLCD(0x32);
  1725  0020C8  6E09               	movwf	??_OpenXLCD& (0+255),c
  1726  0020CA  0E32               	movlw	50
  1727  0020CC  6E04               	movwf	?_WriteCmdXLCD,c
  1728  0020CE  5009               	movf	??_OpenXLCD& (0+255),w,c
  1729  0020D0  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1730  0020D4                     l4526:
  1731  0020D4  ECC4  F014         	call	_BusyXLCD	;wreg free
  1732  0020D8  0900               	iorlw	0
  1733  0020DA  A4D8               	btfss	status,2,c
  1734  0020DC  D7FB               	goto	l4526
  1735  0020DE                     l4528:
  1736  0020DE  ECC4  F014         	call	_BusyXLCD	;wreg free
  1737  0020E2  0900               	iorlw	0
  1738  0020E4  A4D8               	btfss	status,2,c
  1739  0020E6  D7FB               	goto	l4528
  1740                           
  1741                           ;xlcd.c: 108: WriteCmdXLCD(lcdtype);
  1742  0020E8  C008  F004         	movff	OpenXLCD@lcdtype,?_WriteCmdXLCD
  1743  0020EC  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1744  0020F0                     l4532:
  1745  0020F0  ECC4  F014         	call	_BusyXLCD	;wreg free
  1746  0020F4  0900               	iorlw	0
  1747  0020F6  A4D8               	btfss	status,2,c
  1748  0020F8  D7FB               	goto	l4532
  1749                           
  1750                           ;xlcd.c: 112: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  1751  0020FA  6E09               	movwf	??_OpenXLCD& (0+255),c
  1752  0020FC  0E08               	movlw	8
  1753  0020FE  6E04               	movwf	?_WriteCmdXLCD,c
  1754  002100  5009               	movf	??_OpenXLCD& (0+255),w,c
  1755  002102  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1756  002106                     l4536:
  1757  002106  ECC4  F014         	call	_BusyXLCD	;wreg free
  1758  00210A  0900               	iorlw	0
  1759  00210C  A4D8               	btfss	status,2,c
  1760  00210E  D7FB               	goto	l4536
  1761                           
  1762                           ;xlcd.c: 114: WriteCmdXLCD(0b00001111);
  1763  002110  6E09               	movwf	??_OpenXLCD& (0+255),c
  1764  002112  0E0F               	movlw	15
  1765  002114  6E04               	movwf	?_WriteCmdXLCD,c
  1766  002116  5009               	movf	??_OpenXLCD& (0+255),w,c
  1767  002118  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1768  00211C                     l4540:
  1769  00211C  ECC4  F014         	call	_BusyXLCD	;wreg free
  1770  002120  0900               	iorlw	0
  1771  002122  A4D8               	btfss	status,2,c
  1772  002124  D7FB               	goto	l4540
  1773                           
  1774                           ;xlcd.c: 118: WriteCmdXLCD(0x01);
  1775  002126  6E09               	movwf	??_OpenXLCD& (0+255),c
  1776  002128  0E01               	movlw	1
  1777  00212A  6E04               	movwf	?_WriteCmdXLCD,c
  1778  00212C  5009               	movf	??_OpenXLCD& (0+255),w,c
  1779  00212E  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  1780  002132                     l4544:
  1781  002132  ECC4  F014         	call	_BusyXLCD	;wreg free
  1782  002136  0900               	iorlw	0
  1783  002138  A4D8               	btfss	status,2,c
  1784  00213A  D7FB               	goto	l4544
  1785                           
  1786                           ;xlcd.c: 121: SetDDRamAddr(0x80);
  1787  00213C  6E09               	movwf	??_OpenXLCD& (0+255),c
  1788  00213E  0E80               	movlw	128
  1789  002140  6E04               	movwf	?_SetDDRamAddr,c
  1790  002142  5009               	movf	??_OpenXLCD& (0+255),w,c
  1791  002144  EC20  F013         	call	_SetDDRamAddr	;wreg free
  1792                           
  1793                           ;xlcd.c: 122: return;
  1794  002148  0012               	return	
  1795  00214A                     __end_of_OpenXLCD:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           intcon	equ	0xFF2
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _SetDDRamAddr *****************
  1809 ;; Defined at:
  1810 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\XLCD\setddram.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  DDaddr          1    3[COMRAM] unsigned char 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;		None               void
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1824 ;;      Params:         1       0       0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1826 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1827 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1828 ;;Total ram usage:        4 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    2
  1831 ;; This function calls:
  1832 ;;		_DelayFor18TCY
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;;		_OpenXLCD
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text9
  1840  002640                     __ptext9:
  1841                           	opt stack 0
  1842  002640                     _SetDDRamAddr:
  1843                           	opt stack 28
  1844                           
  1845                           ;incstack = 0
  1846                           ;incstack = 0
  1847  002640  0EF0               	movlw	240
  1848  002642  1693               	andwf	3987,f,c	;volatile
  1849  002644  0EF0               	movlw	240
  1850  002646  1681               	andwf	3969,f,c	;volatile
  1851  002648  5004               	movf	SetDDRamAddr@DDaddr,w,c
  1852  00264A  6E05               	movwf	??_SetDDRamAddr& (0+255),c
  1853  00264C  6A06               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  1854  00264E  0E80               	movlw	128
  1855  002650  1205               	iorwf	??_SetDDRamAddr,f,c
  1856  002652  0E00               	movlw	0
  1857  002654  1206               	iorwf	??_SetDDRamAddr+1,f,c
  1858  002656  0E04               	movlw	4
  1859  002658  6E07               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  1860  00265A                     u2635:
  1861  00265A  3406               	rlcf	??_SetDDRamAddr+1,w,c
  1862  00265C  3206               	rrcf	??_SetDDRamAddr+1,f,c
  1863  00265E  3205               	rrcf	??_SetDDRamAddr,f,c
  1864  002660  2E07               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  1865  002662  D7FB               	goto	u2635
  1866  002664  5005               	movf	??_SetDDRamAddr,w,c
  1867  002666  0B0F               	andlw	15
  1868  002668  1281               	iorwf	3969,f,c	;volatile
  1869  00266A  9C8A               	bcf	3978,6,c	;volatile
  1870  00266C  9A8A               	bcf	3978,5,c	;volatile
  1871  00266E  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  1872  002672  888A               	bsf	3978,4,c	;volatile
  1873  002674  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  1874  002678  988A               	bcf	3978,4,c	;volatile
  1875  00267A  0EF0               	movlw	240
  1876  00267C  1681               	andwf	3969,f,c	;volatile
  1877  00267E  5004               	movf	SetDDRamAddr@DDaddr,w,c
  1878  002680  0B0F               	andlw	15
  1879  002682  1281               	iorwf	3969,f,c	;volatile
  1880  002684  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  1881  002688  888A               	bsf	3978,4,c	;volatile
  1882  00268A  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  1883  00268E  988A               	bcf	3978,4,c	;volatile
  1884  002690  0E0F               	movlw	15
  1885  002692  1293               	iorwf	3987,f,c	;volatile
  1886  002694  0012               	return	
  1887  002696                     __end_of_SetDDRamAddr:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           intcon	equ	0xFF2
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _Delay10KTCYx *****************
  1901 ;; Defined at:
  1902 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\d10ktcyx.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  unit            1    0[COMRAM] unsigned char 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;		None               void
  1909 ;; Registers used:
  1910 ;;		wreg
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1916 ;;      Params:         1       0       0       0       0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1918 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1919 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1920 ;;Total ram usage:        2 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_OpenXLCD
  1926 ;;		_Delay_s_
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text10
  1931  0029EA                     __ptext10:
  1932                           	opt stack 0
  1933  0029EA                     _Delay10KTCYx:
  1934                           	opt stack 29
  1935  0029EA                     l525:
  1936  0029EA  0E0D               	movlw	13
  1937  0029EC  6E02               	movwf	??_Delay10KTCYx& (0+255),c
  1938  0029EE  0EFB               	movlw	251
  1939  0029F0                     u3337:
  1940  0029F0  2EE8               	decfsz	wreg,f,c
  1941  0029F2  D7FE               	goto	u3337
  1942  0029F4  2E02               	decfsz	??_Delay10KTCYx& (0+255),f,c
  1943  0029F6  D7FC               	goto	u3337
  1944  0029F8  D000               	nop2	
  1945  0029FA  2E01               	decfsz	Delay10KTCYx@unit,f,c
  1946  0029FC  D7F6               	goto	l525
  1947  0029FE  0012               	return	
  1948  002A00                     __end_of_Delay10KTCYx:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1l	equ	0xFE1
  1959                           status	equ	0xFD8
  1960                           
  1961 ;; *************** function _DelayPORXLCD *****************
  1962 ;; Defined at:
  1963 ;;		line 54 in file "delay.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1977 ;;      Params:         0       0       0       0       0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1979 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1980 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1981 ;;Total ram usage:        1 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    1
  1984 ;; This function calls:
  1985 ;;		_Delay1KTCYx
  1986 ;; This function is called by:
  1987 ;;		_OpenXLCD
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text11
  1992  002A00                     __ptext11:
  1993                           	opt stack 0
  1994  002A00                     _DelayPORXLCD:
  1995                           	opt stack 28
  1996                           
  1997                           ;delay.c: 55: Delay1KTCYx(75);
  1998                           
  1999                           ;incstack = 0
  2000                           ;incstack = 0
  2001  002A00  6E02               	movwf	??_DelayPORXLCD& (0+255),c
  2002  002A02  0E4B               	movlw	75
  2003  002A04  6E01               	movwf	?_Delay1KTCYx,c
  2004  002A06  5002               	movf	??_DelayPORXLCD& (0+255),w,c
  2005  002A08  EC07  F015         	call	_Delay1KTCYx	;wreg free
  2006                           
  2007                           ;delay.c: 58: return;
  2008  002A0C  0012               	return	
  2009  002A0E                     __end_of_DelayPORXLCD:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           intcon	equ	0xFF2
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _Delay1KTCYx *****************
  2023 ;; Defined at:
  2024 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\d1ktcyx.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  unit            1    0[COMRAM] unsigned char 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;		None               void
  2031 ;; Registers used:
  2032 ;;		wreg
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2038 ;;      Params:         1       0       0       0       0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2041 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2042 ;;Total ram usage:        1 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_DelayPORXLCD
  2048 ;;		_delay_ms
  2049 ;;		_delay_us
  2050 ;;		_DelayXLCD
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text12
  2055  002A0E                     __ptext12:
  2056                           	opt stack 0
  2057  002A0E                     _Delay1KTCYx:
  2058                           	opt stack 28
  2059  002A0E                     l539:
  2060  002A0E  0EFA               	movlw	250
  2061  002A10                     u3347:
  2062  002A10  F000               	nop	
  2063  002A12  2EE8               	decfsz	wreg,f,c
  2064  002A14  D7FD               	goto	u3347
  2065  002A16  2E01               	decfsz	Delay1KTCYx@unit,f,c
  2066  002A18  D7FA               	goto	l539
  2067  002A1A  0012               	return	
  2068  002A1C                     __end_of_Delay1KTCYx:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           intcon	equ	0xFF2
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1l	equ	0xFE1
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _Display *****************
  2082 ;; Defined at:
  2083 ;;		line 48 in file "display.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  val             3   87[COMRAM] float 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  voltage         6   33[BANK0 ] unsigned char [6]
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         3       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2099 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2100 ;;      Totals:         4       6       0       0       0       0       0       0       0
  2101 ;;Total ram usage:       10 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    5
  2104 ;; This function calls:
  2105 ;;		_sprintf
  2106 ;;		_WriteCmdXLCD
  2107 ;;		_putsXLCD
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text13
  2114  0026EA                     __ptext13:
  2115                           	opt stack 0
  2116  0026EA                     _Display:
  2117                           	opt stack 25
  2118                           
  2119                           ;display.c: 49: unsigned char voltage[6] = "\0";
  2120                           
  2121                           ;incstack = 0
  2122                           ;incstack = 0
  2123  0026EA  EE20  F087         	lfsr	2,Display@F4520
  2124  0026EE  EE10  F081         	lfsr	1,Display@voltage
  2125  0026F2  0E06               	movlw	6
  2126  0026F4                     u3321:
  2127  0026F4  CFDE FFE6          	movff	postinc2,postinc1
  2128  0026F8  2EE8               	decfsz	wreg,f,c
  2129  0026FA  D7FC               	goto	u3321
  2130                           
  2131                           ;display.c: 50: sprintf( voltage, "%1.2fV", val);
  2132  0026FC  0100               	movlb	0	; () banked
  2133  0026FE  0E00               	movlw	high Display@voltage
  2134  002700  6E4C               	movwf	?_sprintf+1,c
  2135  002702  0100               	movlb	0	; () banked
  2136  002704  0E81               	movlw	low Display@voltage
  2137  002706  6E4B               	movwf	?_sprintf,c
  2138  002708  0E08               	movlw	high STR_1
  2139  00270A  6E4E               	movwf	?_sprintf+3,c
  2140  00270C  0E76               	movlw	low STR_1
  2141  00270E  6E4D               	movwf	?_sprintf+2,c
  2142  002710  C058  F04F         	movff	Display@val,?_sprintf+4
  2143  002714  C059  F050         	movff	Display@val+1,?_sprintf+5
  2144  002718  C05A  F051         	movff	Display@val+2,?_sprintf+6
  2145  00271C  EC3F  F004         	call	_sprintf	;wreg free
  2146                           
  2147                           ;display.c: 51: WriteCmdXLCD(0x88);
  2148  002720  6E5B               	movwf	??_Display& (0+255),c
  2149  002722  0E88               	movlw	136
  2150  002724  6E04               	movwf	?_WriteCmdXLCD,c
  2151  002726  505B               	movf	??_Display& (0+255),w,c
  2152  002728  ECD5  F014         	call	_WriteCmdXLCD	;wreg free
  2153                           
  2154                           ;display.c: 52: putsXLCD(voltage);
  2155  00272C  0100               	movlb	0	; () banked
  2156  00272E  0E00               	movlw	high Display@voltage
  2157  002730  6E06               	movwf	?_putsXLCD+1,c
  2158  002732  0100               	movlb	0	; () banked
  2159  002734  0E81               	movlw	low Display@voltage
  2160  002736  6E05               	movwf	?_putsXLCD,c
  2161  002738  EC76  F014         	call	_putsXLCD	;wreg free
  2162  00273C  0012               	return	
  2163  00273E                     __end_of_Display:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           intcon	equ	0xFF2
  2170                           postinc0	equ	0xFEE
  2171                           wreg	equ	0xFE8
  2172                           postinc1	equ	0xFE6
  2173                           postdec1	equ	0xFE5
  2174                           fsr1l	equ	0xFE1
  2175                           postinc2	equ	0xFDE
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _putsXLCD *****************
  2179 ;; Defined at:
  2180 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\XLCD\putsxlcd.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  2183 ;;		 -> str1(9), Display@voltage(6), 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;		None               void
  2188 ;; Registers used:
  2189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2195 ;;      Params:         2       0       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2198 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        2 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    3
  2202 ;; This function calls:
  2203 ;;		_BusyXLCD
  2204 ;;		_WriteDataXLCD
  2205 ;; This function is called by:
  2206 ;;		_Display
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text14
  2212  0028EC                     __ptext14:
  2213                           	opt stack 0
  2214  0028EC                     _putsXLCD:
  2215                           	opt stack 27
  2216                           
  2217                           ;incstack = 0
  2218                           ;incstack = 0
  2219  0028EC  D00F               	goto	l4498
  2220  0028EE                     l4492:
  2221  0028EE  ECC4  F014         	call	_BusyXLCD	;wreg free
  2222  0028F2  0900               	iorlw	0
  2223  0028F4  A4D8               	btfss	status,2,c
  2224  0028F6  D7FB               	goto	l4492
  2225  0028F8  C005  FFD9         	movff	putsXLCD@buffer,fsr2l
  2226  0028FC  C006  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  2227  002900  50DF               	movf	indf2,w,c
  2228  002902  6E04               	movwf	?_WriteDataXLCD,c
  2229  002904  ECB3  F014         	call	_WriteDataXLCD	;wreg free
  2230  002908  4A05               	infsnz	putsXLCD@buffer,f,c
  2231  00290A  2A06               	incf	putsXLCD@buffer+1,f,c
  2232  00290C                     l4498:
  2233  00290C  C005  FFD9         	movff	putsXLCD@buffer,fsr2l
  2234  002910  C006  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  2235  002914  50DF               	movf	indf2,w,c
  2236  002916  B4D8               	btfsc	status,2,c
  2237  002918  0012               	return	
  2238  00291A  D7E9               	goto	l4492
  2239  00291C                     __end_of_putsXLCD:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           tblptrh	equ	0xFF7
  2243                           tblptrl	equ	0xFF6
  2244                           tablat	equ	0xFF5
  2245                           intcon	equ	0xFF2
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           postinc1	equ	0xFE6
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _WriteDataXLCD *****************
  2258 ;; Defined at:
  2259 ;;		line 65 in file "xlcd.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  data            1    3[COMRAM] unsigned char 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;		None               void
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         1       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        1 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    2
  2280 ;; This function calls:
  2281 ;;		_DelayFor18TCY
  2282 ;; This function is called by:
  2283 ;;		_putsXLCD
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text15
  2288  002966                     __ptext15:
  2289                           	opt stack 0
  2290  002966                     _WriteDataXLCD:
  2291                           	opt stack 27
  2292                           
  2293                           ;xlcd.c: 67: TRISD = 0;
  2294                           
  2295                           ;incstack = 0
  2296                           ;incstack = 0
  2297  002966  0E00               	movlw	0
  2298  002968  6E95               	movwf	3989,c	;volatile
  2299                           
  2300                           ;xlcd.c: 68: PORTD = data;
  2301  00296A  C004  FF83         	movff	WriteDataXLCD@data,3971	;volatile
  2302                           
  2303                           ;xlcd.c: 69: LATAbits.LATA2 = 1;
  2304  00296E  8489               	bsf	3977,2,c	;volatile
  2305                           
  2306                           ;xlcd.c: 70: LATAbits.LATA1 = 0;
  2307  002970  9289               	bcf	3977,1,c	;volatile
  2308                           
  2309                           ;xlcd.c: 71: DelayFor18TCY();
  2310  002972  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2311                           
  2312                           ;xlcd.c: 72: LATAbits.LATA0 = 1;
  2313  002976  8089               	bsf	3977,0,c	;volatile
  2314                           
  2315                           ;xlcd.c: 73: DelayFor18TCY();
  2316  002978  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2317                           
  2318                           ;xlcd.c: 74: LATAbits.LATA0 = 0;
  2319  00297C  9089               	bcf	3977,0,c	;volatile
  2320                           
  2321                           ;xlcd.c: 75: DelayFor18TCY();
  2322  00297E  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2323                           
  2324                           ;xlcd.c: 76: LATAbits.LATA2 = 0;
  2325  002982  9489               	bcf	3977,2,c	;volatile
  2326                           
  2327                           ;xlcd.c: 77: TRISD = 0xff;
  2328  002984  6895               	setf	3989,c	;volatile
  2329                           
  2330                           ;xlcd.c: 79: return;
  2331  002986  0012               	return	
  2332  002988                     __end_of_WriteDataXLCD:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           intcon	equ	0xFF2
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postinc1	equ	0xFE6
  2342                           postdec1	equ	0xFE5
  2343                           fsr1l	equ	0xFE1
  2344                           indf2	equ	0xFDF
  2345                           postinc2	equ	0xFDE
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _BusyXLCD *****************
  2351 ;; Defined at:
  2352 ;;		line 25 in file "xlcd.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      unsigned char 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2366 ;;      Params:         0       0       0       0       0       0       0       0       0
  2367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2369 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2370 ;;Total ram usage:        0 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    2
  2373 ;; This function calls:
  2374 ;;		_DelayFor18TCY
  2375 ;; This function is called by:
  2376 ;;		_OpenXLCD
  2377 ;;		_putsXLCD
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text16
  2382  002988                     __ptext16:
  2383                           	opt stack 0
  2384  002988                     _BusyXLCD:
  2385                           	opt stack 27
  2386                           
  2387                           ;xlcd.c: 26: LATAbits.LATA1 = 1;
  2388                           
  2389                           ;incstack = 0
  2390                           ;incstack = 0
  2391  002988  8289               	bsf	3977,1,c	;volatile
  2392                           
  2393                           ;xlcd.c: 27: LATAbits.LATA2 = 0;
  2394  00298A  9489               	bcf	3977,2,c	;volatile
  2395                           
  2396                           ;xlcd.c: 28: DelayFor18TCY();
  2397  00298C  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2398                           
  2399                           ;xlcd.c: 29: LATAbits.LATA0 = 1;
  2400  002990  8089               	bsf	3977,0,c	;volatile
  2401                           
  2402                           ;xlcd.c: 30: DelayFor18TCY();
  2403  002992  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2404                           
  2405                           ;xlcd.c: 32: if(PORTD&0x80)
  2406  002996  AE83               	btfss	3971,7,c	;volatile
  2407  002998  D004               	goto	l104
  2408                           
  2409                           ;xlcd.c: 33: {
  2410                           ;xlcd.c: 34: LATAbits.LATA0 = 0;
  2411  00299A  9089               	bcf	3977,0,c	;volatile
  2412                           
  2413                           ;xlcd.c: 35: LATAbits.LATA1 = 0;
  2414  00299C  9289               	bcf	3977,1,c	;volatile
  2415                           
  2416                           ;xlcd.c: 36: return 1;
  2417  00299E  0E01               	movlw	1
  2418  0029A0  D003               	goto	l105
  2419  0029A2                     l104:
  2420                           
  2421                           ;xlcd.c: 38: else
  2422                           ;xlcd.c: 39: {
  2423                           ;xlcd.c: 40: LATAbits.LATA0 = 0;
  2424  0029A2  9089               	bcf	3977,0,c	;volatile
  2425                           
  2426                           ;xlcd.c: 41: LATAbits.LATA1 = 0;
  2427  0029A4  9289               	bcf	3977,1,c	;volatile
  2428                           
  2429                           ;xlcd.c: 42: return 0;
  2430  0029A6  0E00               	movlw	0
  2431  0029A8                     l105:
  2432  0029A8  0012               	return	
  2433  0029AA                     __end_of_BusyXLCD:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           intcon	equ	0xFF2
  2440                           postinc0	equ	0xFEE
  2441                           wreg	equ	0xFE8
  2442                           postinc1	equ	0xFE6
  2443                           postdec1	equ	0xFE5
  2444                           fsr1l	equ	0xFE1
  2445                           indf2	equ	0xFDF
  2446                           postinc2	equ	0xFDE
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _WriteCmdXLCD *****************
  2452 ;; Defined at:
  2453 ;;		line 47 in file "xlcd.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  cmd             1    3[COMRAM] unsigned char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;		None               void
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2467 ;;      Params:         1       0       0       0       0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2470 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2471 ;;Total ram usage:        1 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    2
  2474 ;; This function calls:
  2475 ;;		_DelayFor18TCY
  2476 ;; This function is called by:
  2477 ;;		_Display
  2478 ;;		_main
  2479 ;;		_OpenXLCD
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text17
  2484  0029AA                     __ptext17:
  2485                           	opt stack 0
  2486  0029AA                     _WriteCmdXLCD:
  2487                           	opt stack 27
  2488                           
  2489                           ;xlcd.c: 49: TRISD = 0;
  2490                           
  2491                           ;incstack = 0
  2492                           ;incstack = 0
  2493  0029AA  0E00               	movlw	0
  2494  0029AC  6E95               	movwf	3989,c	;volatile
  2495                           
  2496                           ;xlcd.c: 50: PORTD = cmd;
  2497  0029AE  C004  FF83         	movff	WriteCmdXLCD@cmd,3971	;volatile
  2498                           
  2499                           ;xlcd.c: 51: LATAbits.LATA1 = 0;
  2500  0029B2  9289               	bcf	3977,1,c	;volatile
  2501                           
  2502                           ;xlcd.c: 52: LATAbits.LATA2 = 0;
  2503  0029B4  9489               	bcf	3977,2,c	;volatile
  2504                           
  2505                           ;xlcd.c: 53: DelayFor18TCY();
  2506  0029B6  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2507                           
  2508                           ;xlcd.c: 54: LATAbits.LATA0 = 1;
  2509  0029BA  8089               	bsf	3977,0,c	;volatile
  2510                           
  2511                           ;xlcd.c: 55: DelayFor18TCY();
  2512  0029BC  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2513                           
  2514                           ;xlcd.c: 56: LATAbits.LATA0 = 0;
  2515  0029C0  9089               	bcf	3977,0,c	;volatile
  2516                           
  2517                           ;xlcd.c: 57: DelayFor18TCY();
  2518  0029C2  ECE5  F014         	call	_DelayFor18TCY	;wreg free
  2519                           
  2520                           ;xlcd.c: 58: TRISD = 0xff;
  2521  0029C6  6895               	setf	3989,c	;volatile
  2522                           
  2523                           ;xlcd.c: 61: return;
  2524  0029C8  0012               	return	
  2525  0029CA                     __end_of_WriteCmdXLCD:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           intcon	equ	0xFF2
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           postinc1	equ	0xFE6
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _DelayFor18TCY *****************
  2544 ;; Defined at:
  2545 ;;		line 46 in file "delay.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  i               1    2[COMRAM] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;		None               void
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0
  2560 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2561 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2562 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    1
  2566 ;; This function calls:
  2567 ;;		_Delay10TCYx
  2568 ;; This function is called by:
  2569 ;;		_BusyXLCD
  2570 ;;		_WriteCmdXLCD
  2571 ;;		_WriteDataXLCD
  2572 ;;		_SetDDRamAddr
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text18
  2577  0029CA                     __ptext18:
  2578                           	opt stack 0
  2579  0029CA                     _DelayFor18TCY:
  2580                           	opt stack 28
  2581                           
  2582                           ;delay.c: 47: unsigned char i;
  2583                           ;delay.c: 48: for(i=0;i<10;i++)
  2584                           
  2585                           ;incstack = 0
  2586                           ;incstack = 0
  2587  0029CA  6E02               	movwf	??_DelayFor18TCY& (0+255),c
  2588  0029CC  0E00               	movlw	0
  2589  0029CE  6E03               	movwf	DelayFor18TCY@i,c
  2590  0029D0  5002               	movf	??_DelayFor18TCY& (0+255),w,c
  2591  0029D2  D007               	goto	L1
  2592  0029D4                     l3960:
  2593                           
  2594                           ;delay.c: 49: {
  2595                           ;delay.c: 50: Delay10TCYx(50);
  2596  0029D4  6E02               	movwf	??_DelayFor18TCY& (0+255),c
  2597  0029D6  0E32               	movlw	50
  2598  0029D8  6E01               	movwf	?_Delay10TCYx,c
  2599  0029DA  5002               	movf	??_DelayFor18TCY& (0+255),w,c
  2600  0029DC  EC0E  F015         	call	_Delay10TCYx	;wreg free
  2601  0029E0  2A03               	incf	DelayFor18TCY@i,f,c
  2602  0029E2                     L1:
  2603  0029E2  0E09               	movlw	9
  2604  0029E4  6403               	cpfsgt	DelayFor18TCY@i,c
  2605  0029E6  D7F6               	goto	l3960
  2606  0029E8  0012               	return	
  2607  0029EA                     __end_of_DelayFor18TCY:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           intcon	equ	0xFF2
  2614                           postinc0	equ	0xFEE
  2615                           wreg	equ	0xFE8
  2616                           postinc1	equ	0xFE6
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           indf2	equ	0xFDF
  2620                           postinc2	equ	0xFDE
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625 ;; *************** function _Delay10TCYx *****************
  2626 ;; Defined at:
  2627 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\d10tcyx.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  unit            1    0[COMRAM] unsigned char 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;		None
  2632 ;; Return value:  Size  Location     Type
  2633 ;;		None               void
  2634 ;; Registers used:
  2635 ;;		wreg
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2641 ;;      Params:         1       0       0       0       0       0       0       0       0
  2642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2643 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2644 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2645 ;;Total ram usage:        1 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_DelayFor18TCY
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text19
  2655  002A1C                     __ptext19:
  2656                           	opt stack 0
  2657  002A1C                     _Delay10TCYx:
  2658                           	opt stack 28
  2659  002A1C                     l532:
  2660  002A1C  0E03               	movlw	3
  2661  002A1E                     u3357:
  2662  002A1E  2EE8               	decfsz	wreg,f,c
  2663  002A20  D7FE               	goto	u3357
  2664  002A22  F000               	nop	
  2665  002A24  2E01               	decfsz	Delay10TCYx@unit,f,c
  2666  002A26  D7FA               	goto	l532
  2667  002A28  0012               	return	
  2668  002A2A                     __end_of_Delay10TCYx:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           intcon	equ	0xFF2
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postinc1	equ	0xFE6
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _sprintf *****************
  2687 ;; Defined at:
  2688 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  sp              2   74[COMRAM] PTR unsigned char 
  2691 ;;		 -> Display@voltage(6), 
  2692 ;;  f               2   76[COMRAM] PTR const unsigned char 
  2693 ;;		 -> STR_1(7), 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  vd              2    9[BANK0 ] unsigned int 
  2696 ;;  vd              2   11[BANK0 ] unsigned int 
  2697 ;;  _val            5   13[BANK0 ] struct .
  2698 ;;  fval            3   27[BANK0 ] struct .
  2699 ;;  integ           3   18[BANK0 ] struct .
  2700 ;;  ival            3    0        struct .
  2701 ;;  prec            2   30[BANK0 ] int 
  2702 ;;  exp             2   25[BANK0 ] int 
  2703 ;;  width           2   23[BANK0 ] int 
  2704 ;;  flag            2   21[BANK0 ] unsigned short 
  2705 ;;  ap              2    7[BANK0 ] PTR void [1]
  2706 ;;		 -> ?_sprintf(2), 
  2707 ;;  c               1   32[BANK0 ] char 
  2708 ;;  d               1    0        unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  2   74[COMRAM] int 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2718 ;;      Params:         7       0       0       0       0       0       0       0       0
  2719 ;;      Locals:         0      33       0       0       0       0       0       0       0
  2720 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2721 ;;      Totals:        13      33       0       0       0       0       0       0       0
  2722 ;;Total ram usage:       46 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    4
  2725 ;; This function calls:
  2726 ;;		_fround
  2727 ;;		_scale
  2728 ;;		_isdigit
  2729 ;;		__tdiv_to_l_
  2730 ;;		__div_to_l_
  2731 ;;		___asftadd
  2732 ;;		___asftmul
  2733 ;;		___ftmul
  2734 ;;		___asftsub
  2735 ;;		___awdiv
  2736 ;;		___ftge
  2737 ;;		___ftneg
  2738 ;;		___fttol
  2739 ;;		___lldiv
  2740 ;;		___llmod
  2741 ;;		___lltoft
  2742 ;;		___lwmod
  2743 ;;		___wmul
  2744 ;; This function is called by:
  2745 ;;		_Display
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text20
  2750  00087E                     __ptext20:
  2751                           	opt stack 0
  2752  00087E                     _sprintf:
  2753                           	opt stack 25
  2754                           
  2755                           ;doprnt.c: 494: va_list ap;
  2756                           ;doprnt.c: 499: signed char c;
  2757                           ;doprnt.c: 501: int width;
  2758                           ;doprnt.c: 504: int prec;
  2759                           ;doprnt.c: 508: unsigned short flag;
  2760                           ;doprnt.c: 515: char d;
  2761                           ;doprnt.c: 516: double fval, integ;
  2762                           ;doprnt.c: 517: int exp;
  2763                           ;doprnt.c: 518: double ival;
  2764                           ;doprnt.c: 519: union {
  2765                           ;doprnt.c: 520: unsigned long _val;
  2766                           ;doprnt.c: 521: struct {
  2767                           ;doprnt.c: 522: const char * _cp;
  2768                           ;doprnt.c: 523: unsigned _len;
  2769                           ;doprnt.c: 524: } _str;
  2770                           ;doprnt.c: 525: } _val;
  2771                           ;doprnt.c: 542: *ap = __va_start();
  2772                           
  2773                           ;incstack = 0
  2774                           ;incstack = 0
  2775  00087E  0E00               	movlw	high (?_sprintf+4)
  2776  000880  0100               	movlb	0	; () banked
  2777  000882  0100               	movlb	0	; () banked
  2778  000884  6F68               	movwf	(sprintf@ap+1)& (0+255),b
  2779  000886  0E4F               	movlw	low (?_sprintf+4)
  2780  000888  0100               	movlb	0	; () banked
  2781  00088A  6F67               	movwf	sprintf@ap& (0+255),b
  2782                           
  2783                           ;doprnt.c: 545: while(c = *f++) {
  2784  00088C  EF5B  F009         	goto	l4484
  2785  000890                     l4226:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;doprnt.c: 547: if(c != '%')
  2789  000890  0100               	movlb	0	; () banked
  2790  000892  0100               	movlb	0	; () banked
  2791  000894  5180               	movf	sprintf@c& (0+255),w,b
  2792  000896  0A25               	xorlw	37
  2793  000898  B4D8               	btfsc	status,2,c
  2794  00089A  D009               	goto	l4232
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;doprnt.c: 549: {
  2798                           ;doprnt.c: 550: ((*sp++ = (c)));
  2799  00089C  C04B  FFD9         	movff	sprintf@sp,fsr2l
  2800  0008A0  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  2801  0008A4  0100               	movlb	0	; () banked
  2802  0008A6  C080  FFDF         	movff	sprintf@c,indf2
  2803  0008AA  EF59  F009         	goto	L2
  2804  0008AE                     l4232:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;doprnt.c: 552: }
  2808                           ;doprnt.c: 555: width = 0;
  2809  0008AE  0E00               	movlw	0
  2810  0008B0  0100               	movlb	0	; () banked
  2811  0008B2  0100               	movlb	0	; () banked
  2812  0008B4  6F78               	movwf	(sprintf@width+1)& (0+255),b
  2813  0008B6  0E00               	movlw	0
  2814  0008B8  0100               	movlb	0	; () banked
  2815  0008BA  6F77               	movwf	sprintf@width& (0+255),b
  2816                           
  2817                           ;doprnt.c: 557: flag = 0;
  2818  0008BC  0E00               	movlw	0
  2819  0008BE  0100               	movlb	0	; () banked
  2820  0008C0  0100               	movlb	0	; () banked
  2821  0008C2  6F76               	movwf	(sprintf@flag+1)& (0+255),b
  2822  0008C4  0E00               	movlw	0
  2823  0008C6  0100               	movlb	0	; () banked
  2824  0008C8  6F75               	movwf	sprintf@flag& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2828  0008CA  C04D  FFF6         	movff	sprintf@f,tblptrl
  2829  0008CE  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2830  0008D2  0008               	tblrd		*
  2831  0008D4  CFF5 F001          	movff	tablat,?_isdigit
  2832  0008D8  ECA1  F014         	call	_isdigit	;wreg free
  2833  0008DC  A0D8               	btfss	status,0,c
  2834  0008DE  D037               	goto	l4246
  2835                           
  2836                           ;doprnt.c: 607: width = 0;
  2837  0008E0  0E00               	movlw	0
  2838  0008E2  0100               	movlb	0	; () banked
  2839  0008E4  0100               	movlb	0	; () banked
  2840  0008E6  6F78               	movwf	(sprintf@width+1)& (0+255),b
  2841  0008E8  0E00               	movlw	0
  2842  0008EA  0100               	movlb	0	; () banked
  2843  0008EC  6F77               	movwf	sprintf@width& (0+255),b
  2844  0008EE                     l4238:
  2845                           
  2846                           ;doprnt.c: 609: width *= 10;
  2847  0008EE  C077  F011         	movff	sprintf@width,?___wmul
  2848  0008F2  C078  F012         	movff	sprintf@width+1,?___wmul+1
  2849  0008F6  0E00               	movlw	0
  2850  0008F8  6E14               	movwf	?___wmul+3,c
  2851  0008FA  0E0A               	movlw	10
  2852  0008FC  6E13               	movwf	?___wmul+2,c
  2853  0008FE  EC3E  F014         	call	___wmul	;wreg free
  2854  000902  C011  F077         	movff	?___wmul,sprintf@width
  2855  000906  C012  F078         	movff	?___wmul+1,sprintf@width+1
  2856                           
  2857                           ;doprnt.c: 610: width += *f++ - '0';
  2858  00090A  C04D  FFF6         	movff	sprintf@f,tblptrl
  2859  00090E  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2860  000912  0008               	tblrd		*
  2861  000914  CFF5 F052          	movff	tablat,??_sprintf
  2862  000918  0ED0               	movlw	208
  2863  00091A  2452               	addwf	??_sprintf,w,c
  2864  00091C  6E53               	movwf	(??_sprintf+1)& (0+255),c
  2865  00091E  6A54               	clrf	(??_sprintf+2)& (0+255),c
  2866  000920  0EFF               	movlw	255
  2867  000922  2254               	addwfc	(??_sprintf+2)& (0+255),f,c
  2868  000924  5053               	movf	??_sprintf+1,w,c
  2869  000926  0100               	movlb	0	; () banked
  2870  000928  0100               	movlb	0	; () banked
  2871  00092A  2777               	addwf	sprintf@width& (0+255),f,b
  2872  00092C  5054               	movf	??_sprintf+2,w,c
  2873  00092E  0100               	movlb	0	; () banked
  2874  000930  0100               	movlb	0	; () banked
  2875  000932  2378               	addwfc	(sprintf@width+1)& (0+255),f,b
  2876                           
  2877                           ; BSR set to: 0
  2878  000934  4A4D               	infsnz	sprintf@f,f,c
  2879  000936  2A4E               	incf	sprintf@f+1,f,c
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2883  000938  C04D  FFF6         	movff	sprintf@f,tblptrl
  2884  00093C  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2885  000940  0008               	tblrd		*
  2886  000942  CFF5 F001          	movff	tablat,?_isdigit
  2887  000946  ECA1  F014         	call	_isdigit	;wreg free
  2888  00094A  B0D8               	btfsc	status,0,c
  2889  00094C  D7D0               	goto	l4238
  2890  00094E                     l4246:
  2891                           
  2892                           ;doprnt.c: 617: }
  2893                           ;doprnt.c: 620: if(*f == '.') {
  2894  00094E  C04D  FFF6         	movff	sprintf@f,tblptrl
  2895  000952  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2896  000956  0008               	tblrd		*
  2897  000958  50F5               	movf	tablat,w,c
  2898  00095A  0A2E               	xorlw	46
  2899  00095C  A4D8               	btfss	status,2,c
  2900  00095E  D037               	goto	l4258
  2901                           
  2902                           ;doprnt.c: 621: flag |= 0x4000;
  2903  000960  0100               	movlb	0	; () banked
  2904  000962  0100               	movlb	0	; () banked
  2905  000964  8D76               	bsf	(sprintf@flag+1)& (0+255),6,b
  2906                           
  2907                           ;doprnt.c: 622: f++;
  2908  000966  4A4D               	infsnz	sprintf@f,f,c
  2909  000968  2A4E               	incf	sprintf@f+1,f,c
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;doprnt.c: 629: {
  2913                           ;doprnt.c: 630: prec = 0;
  2914  00096A  0E00               	movlw	0
  2915  00096C  0100               	movlb	0	; () banked
  2916  00096E  0100               	movlb	0	; () banked
  2917  000970  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  2918  000972  0E00               	movlw	0
  2919  000974  0100               	movlb	0	; () banked
  2920  000976  6F7E               	movwf	sprintf@prec& (0+255),b
  2921                           
  2922                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2923  000978  D01E               	goto	l4256
  2924  00097A                     l4252:
  2925                           
  2926                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2927  00097A  C07E  F011         	movff	sprintf@prec,?___wmul
  2928  00097E  C07F  F012         	movff	sprintf@prec+1,?___wmul+1
  2929  000982  0E00               	movlw	0
  2930  000984  6E14               	movwf	?___wmul+3,c
  2931  000986  0E0A               	movlw	10
  2932  000988  6E13               	movwf	?___wmul+2,c
  2933  00098A  EC3E  F014         	call	___wmul	;wreg free
  2934  00098E  C04D  FFF6         	movff	sprintf@f,tblptrl
  2935  000992  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2936  000996  0008               	tblrd		*
  2937  000998  50F5               	movf	tablat,w,c
  2938  00099A  2611               	addwf	?___wmul,f,c
  2939  00099C  0E00               	movlw	0
  2940  00099E  2212               	addwfc	?___wmul+1,f,c
  2941  0009A0  0ED0               	movlw	208
  2942  0009A2  2411               	addwf	?___wmul,w,c
  2943  0009A4  0100               	movlb	0	; () banked
  2944  0009A6  0100               	movlb	0	; () banked
  2945  0009A8  6F7E               	movwf	sprintf@prec& (0+255),b
  2946  0009AA  0EFF               	movlw	255
  2947  0009AC  2012               	addwfc	?___wmul+1,w,c
  2948  0009AE  0100               	movlb	0	; () banked
  2949  0009B0  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952  0009B2  4A4D               	infsnz	sprintf@f,f,c
  2953  0009B4  2A4E               	incf	sprintf@f+1,f,c
  2954  0009B6                     l4256:
  2955                           
  2956                           ; BSR set to: 0
  2957  0009B6  C04D  FFF6         	movff	sprintf@f,tblptrl
  2958  0009BA  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2959  0009BE  0008               	tblrd		*
  2960  0009C0  CFF5 F001          	movff	tablat,?_isdigit
  2961  0009C4  ECA1  F014         	call	_isdigit	;wreg free
  2962  0009C8  A0D8               	btfss	status,0,c
  2963  0009CA  D010               	goto	l4266
  2964  0009CC  D7D6               	goto	l4252
  2965  0009CE                     l4258:
  2966                           
  2967                           ;doprnt.c: 635: prec = 0;
  2968  0009CE  0E00               	movlw	0
  2969  0009D0  0100               	movlb	0	; () banked
  2970  0009D2  0100               	movlb	0	; () banked
  2971  0009D4  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  2972  0009D6  0E00               	movlw	0
  2973  0009D8  0100               	movlb	0	; () banked
  2974  0009DA  6F7E               	movwf	sprintf@prec& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;doprnt.c: 637: flag |= 0x1000;
  2978  0009DC  0100               	movlb	0	; () banked
  2979  0009DE  0100               	movlb	0	; () banked
  2980  0009E0  8976               	bsf	(sprintf@flag+1)& (0+255),4,b
  2981  0009E2  D004               	goto	l4266
  2982  0009E4                     l4262:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;doprnt.c: 672: flag |= 0x400;
  2986  0009E4  0100               	movlb	0	; () banked
  2987  0009E6  0100               	movlb	0	; () banked
  2988  0009E8  8576               	bsf	(sprintf@flag+1)& (0+255),2,b
  2989                           
  2990                           ;doprnt.c: 673: break;
  2991  0009EA  D015               	goto	l4268
  2992  0009EC                     l4266:
  2993  0009EC  C04D  FFF6         	movff	sprintf@f,tblptrl
  2994  0009F0  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  2995  0009F4  4A4D               	infsnz	sprintf@f,f,c
  2996  0009F6  2A4E               	incf	sprintf@f+1,f,c
  2997  0009F8  0008               	tblrd		*
  2998  0009FA  0100               	movlb	0	; () banked
  2999  0009FC  CFF5 F080          	movff	tablat,sprintf@c
  3000  000A00  0100               	movlb	0	; () banked
  3001  000A02  5180               	movf	sprintf@c& (0+255),w,b
  3002                           
  3003                           ; Switch size 1, requested type "space"
  3004                           ; Number of cases is 2, Range of values is 0 to 102
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte            7     4 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009  000A04  0A00               	xorlw	0	; case 0
  3010  000A06  B4D8               	btfsc	status,2,c
  3011  000A08  EF69  F009         	goto	l4486
  3012  000A0C  0A66               	xorlw	102	; case 102
  3013  000A0E  B4D8               	btfsc	status,2,c
  3014  000A10  D7E9               	goto	l4262
  3015  000A12  EF5B  F009         	goto	l4484
  3016  000A16                     l4268:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;doprnt.c: 834: if(flag & (0x700)) {
  3020  000A16  0E07               	movlw	7
  3021  000A18  0100               	movlb	0	; () banked
  3022  000A1A  0100               	movlb	0	; () banked
  3023  000A1C  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  3024  000A1E  B4D8               	btfsc	status,2,c
  3025  000A20  D36B               	goto	l4436
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;doprnt.c: 836: if(flag & 0x1000)
  3029  000A22  0100               	movlb	0	; () banked
  3030  000A24  0100               	movlb	0	; () banked
  3031  000A26  A976               	btfss	(sprintf@flag+1)& (0+255),4,b
  3032  000A28  D007               	goto	l4274
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;doprnt.c: 838: prec = 6;
  3036  000A2A  0E00               	movlw	0
  3037  000A2C  0100               	movlb	0	; () banked
  3038  000A2E  0100               	movlb	0	; () banked
  3039  000A30  6F7F               	movwf	(sprintf@prec+1)& (0+255),b
  3040  000A32  0E06               	movlw	6
  3041  000A34  0100               	movlb	0	; () banked
  3042  000A36  6F7E               	movwf	sprintf@prec& (0+255),b
  3043  000A38                     l4274:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3047  000A38  C067  FFD9         	movff	sprintf@ap,fsr2l
  3048  000A3C  C068  FFDA         	movff	sprintf@ap+1,fsr2h
  3049  000A40  0100               	movlb	0	; () banked
  3050  000A42  CFDE F07B          	movff	postinc2,sprintf@fval
  3051  000A46  0100               	movlb	0	; () banked
  3052  000A48  CFDE F07C          	movff	postinc2,sprintf@fval+1
  3053  000A4C  0100               	movlb	0	; () banked
  3054  000A4E  CFDD F07D          	movff	postdec2,sprintf@fval+2
  3055                           
  3056                           ; BSR set to: 0
  3057  000A52  0E03               	movlw	3
  3058  000A54  0100               	movlb	0	; () banked
  3059  000A56  0100               	movlb	0	; () banked
  3060  000A58  2767               	addwf	sprintf@ap& (0+255),f,b
  3061  000A5A  0E00               	movlw	0
  3062  000A5C  0100               	movlb	0	; () banked
  3063  000A5E  2368               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;doprnt.c: 840: if(fval < 0.0) {
  3067  000A60  0100               	movlb	0	; () banked
  3068  000A62  0100               	movlb	0	; () banked
  3069  000A64  517D               	movf	(sprintf@fval+2)& (0+255),w,b
  3070  000A66  0A80               	xorlw	128
  3071  000A68  0F80               	addlw	128
  3072  000A6A  E107               	bnz	u2865
  3073  000A6C  0E00               	movlw	0
  3074  000A6E  0100               	movlb	0	; () banked
  3075  000A70  5D7C               	subwf	(sprintf@fval+1)& (0+255),w,b
  3076  000A72  E103               	bnz	u2865
  3077  000A74  0E00               	movlw	0
  3078  000A76  0100               	movlb	0	; () banked
  3079  000A78  5D7B               	subwf	sprintf@fval& (0+255),w,b
  3080  000A7A                     u2865:
  3081  000A7A  B0D8               	btfsc	status,0,c
  3082  000A7C  D012               	goto	l4284
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;doprnt.c: 841: fval = -fval;
  3086  000A7E  C07B  F001         	movff	sprintf@fval,?___ftneg
  3087  000A82  C07C  F002         	movff	sprintf@fval+1,?___ftneg+1
  3088  000A86  C07D  F003         	movff	sprintf@fval+2,?___ftneg+2
  3089  000A8A  EC8E  F014         	call	___ftneg	;wreg free
  3090  000A8E  C003  F07D         	movff	?___ftneg+2,sprintf@fval+2
  3091  000A92  C002  F07C         	movff	?___ftneg+1,sprintf@fval+1
  3092  000A96  C001  F07B         	movff	?___ftneg,sprintf@fval
  3093                           
  3094                           ;doprnt.c: 842: flag |= 0x03;
  3095  000A9A  0E03               	movlw	3
  3096  000A9C  0100               	movlb	0	; () banked
  3097  000A9E  0100               	movlb	0	; () banked
  3098  000AA0  1375               	iorwf	sprintf@flag& (0+255),f,b
  3099  000AA2                     l4284:
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;doprnt.c: 843: }
  3103                           ;doprnt.c: 844: exp = 0;
  3104  000AA2  0E00               	movlw	0
  3105  000AA4  0100               	movlb	0	; () banked
  3106  000AA6  0100               	movlb	0	; () banked
  3107  000AA8  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  3108  000AAA  0E00               	movlw	0
  3109  000AAC  0100               	movlb	0	; () banked
  3110  000AAE  6F79               	movwf	sprintf@exp& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;doprnt.c: 845: if( fval!=0) {
  3114  000AB0  0E7F               	movlw	127
  3115  000AB2  0100               	movlb	0	; () banked
  3116  000AB4  0100               	movlb	0	; () banked
  3117  000AB6  157D               	andwf	(sprintf@fval+2)& (0+255),w,b
  3118  000AB8  0100               	movlb	0	; () banked
  3119  000ABA  117C               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3120  000ABC  0100               	movlb	0	; () banked
  3121  000ABE  117B               	iorwf	sprintf@fval& (0+255),w,b
  3122  000AC0  B4D8               	btfsc	status,2,c
  3123  000AC2  D091               	goto	l4312
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3127  000AC4  0E82               	movlw	130
  3128  000AC6  6E52               	movwf	??_sprintf& (0+255),c
  3129  000AC8  0EFF               	movlw	255
  3130  000ACA  6E53               	movwf	(??_sprintf+1)& (0+255),c
  3131  000ACC  0100               	movlb	0	; () banked
  3132  000ACE  C07B  F054         	movff	sprintf@fval,??_sprintf+2
  3133  000AD2  0100               	movlb	0	; () banked
  3134  000AD4  C07C  F055         	movff	sprintf@fval+1,??_sprintf+3
  3135  000AD8  0100               	movlb	0	; () banked
  3136  000ADA  C07D  F056         	movff	sprintf@fval+2,??_sprintf+4
  3137  000ADE  0100               	movlb	0	; () banked
  3138  000AE0  C07E  F057         	movff	sprintf@fval+3,??_sprintf+5
  3139  000AE4  0E10               	movlw	16
  3140  000AE6  D005               	goto	u2880
  3141  000AE8                     u2885:
  3142  000AE8  90D8               	bcf	status,0,c
  3143  000AEA  3257               	rrcf	??_sprintf+5,f,c
  3144  000AEC  3256               	rrcf	??_sprintf+4,f,c
  3145  000AEE  3255               	rrcf	??_sprintf+3,f,c
  3146  000AF0  3254               	rrcf	??_sprintf+2,f,c
  3147  000AF2                     u2880:
  3148  000AF2  2EE8               	decfsz	wreg,f,c
  3149  000AF4  D7F9               	goto	u2885
  3150  000AF6  5054               	movf	??_sprintf+2,w,c
  3151  000AF8  2452               	addwf	??_sprintf,w,c
  3152  000AFA  0100               	movlb	0	; () banked
  3153  000AFC  0100               	movlb	0	; () banked
  3154  000AFE  6F79               	movwf	sprintf@exp& (0+255),b
  3155  000B00  0100               	movlb	0	; () banked
  3156  000B02  0E00               	movlw	0
  3157  000B04  2053               	addwfc	??_sprintf+1,w,c
  3158  000B06  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;doprnt.c: 847: exp--;
  3162  000B08  0100               	movlb	0	; () banked
  3163  000B0A  0100               	movlb	0	; () banked
  3164  000B0C  0779               	decf	sprintf@exp& (0+255),f,b
  3165  000B0E  A0D8               	btfss	status,0,c
  3166  000B10  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;doprnt.c: 848: exp *= 3;
  3170  000B12  C079  F011         	movff	sprintf@exp,?___wmul
  3171  000B16  C07A  F012         	movff	sprintf@exp+1,?___wmul+1
  3172  000B1A  0E00               	movlw	0
  3173  000B1C  6E14               	movwf	?___wmul+3,c
  3174  000B1E  0E03               	movlw	3
  3175  000B20  6E13               	movwf	?___wmul+2,c
  3176  000B22  EC3E  F014         	call	___wmul	;wreg free
  3177  000B26  C011  F079         	movff	?___wmul,sprintf@exp
  3178  000B2A  C012  F07A         	movff	?___wmul+1,sprintf@exp+1
  3179                           
  3180                           ;doprnt.c: 849: exp /= 10;
  3181  000B2E  C079  F008         	movff	sprintf@exp,?___awdiv
  3182  000B32  C07A  F009         	movff	sprintf@exp+1,?___awdiv+1
  3183  000B36  0E00               	movlw	0
  3184  000B38  6E0B               	movwf	?___awdiv+3,c
  3185  000B3A  0E0A               	movlw	10
  3186  000B3C  6E0A               	movwf	?___awdiv+2,c
  3187  000B3E  EC49  F011         	call	___awdiv	;wreg free
  3188  000B42  C008  F079         	movff	?___awdiv,sprintf@exp
  3189  000B46  C009  F07A         	movff	?___awdiv+1,sprintf@exp+1
  3190                           
  3191                           ;doprnt.c: 850: if(exp < 0)
  3192  000B4A  0100               	movlb	0	; () banked
  3193  000B4C  0100               	movlb	0	; () banked
  3194  000B4E  AF7A               	btfss	(sprintf@exp+1)& (0+255),7,b
  3195  000B50  D005               	goto	l4300
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;doprnt.c: 851: exp--;
  3199  000B52  0100               	movlb	0	; () banked
  3200  000B54  0100               	movlb	0	; () banked
  3201  000B56  0779               	decf	sprintf@exp& (0+255),f,b
  3202  000B58  A0D8               	btfss	status,0,c
  3203  000B5A  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  3204  000B5C                     l4300:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;doprnt.c: 855: integ = scale(-exp);
  3208  000B5C  0100               	movlb	0	; () banked
  3209  000B5E  0100               	movlb	0	; () banked
  3210  000B60  5179               	movf	sprintf@exp& (0+255),w,b
  3211  000B62  0800               	sublw	0
  3212  000B64  6E37               	movwf	?_scale,c
  3213  000B66  EC70  F009         	call	_scale	;wreg free
  3214  000B6A  C039  F074         	movff	?_scale+2,sprintf@integ+2
  3215  000B6E  C038  F073         	movff	?_scale+1,sprintf@integ+1
  3216  000B72  C037  F072         	movff	?_scale,sprintf@integ
  3217                           
  3218                           ;doprnt.c: 856: integ *= fval;
  3219  000B76  0100               	movlb	0	; () banked
  3220  000B78  0E00               	movlw	high sprintf@integ
  3221  000B7A  6E38               	movwf	?___asftmul+1,c
  3222  000B7C  0100               	movlb	0	; () banked
  3223  000B7E  0E72               	movlw	low sprintf@integ
  3224  000B80  6E37               	movwf	?___asftmul,c
  3225  000B82  C07B  F039         	movff	sprintf@fval,?___asftmul+2
  3226  000B86  C07C  F03A         	movff	sprintf@fval+1,?___asftmul+3
  3227  000B8A  C07D  F03B         	movff	sprintf@fval+2,?___asftmul+4
  3228  000B8E  EC02  F014         	call	___asftmul	;wreg free
  3229                           
  3230                           ;doprnt.c: 857: if(integ < 1.0)
  3231  000B92  C072  F001         	movff	sprintf@integ,?___ftge
  3232  000B96  C073  F002         	movff	sprintf@integ+1,?___ftge+1
  3233  000B9A  C074  F003         	movff	sprintf@integ+2,?___ftge+2
  3234  000B9E  0E00               	movlw	0
  3235  000BA0  6E04               	movwf	?___ftge+3,c
  3236  000BA2  0E80               	movlw	128
  3237  000BA4  6E05               	movwf	?___ftge+4,c
  3238  000BA6  0E3F               	movlw	63
  3239  000BA8  6E06               	movwf	?___ftge+5,c
  3240  000BAA  EC01  F011         	call	___ftge	;wreg free
  3241  000BAE  B0D8               	btfsc	status,0,c
  3242  000BB0  D006               	goto	l4308
  3243                           
  3244                           ;doprnt.c: 858: exp--;
  3245  000BB2  0100               	movlb	0	; () banked
  3246  000BB4  0100               	movlb	0	; () banked
  3247  000BB6  0779               	decf	sprintf@exp& (0+255),f,b
  3248  000BB8  A0D8               	btfss	status,0,c
  3249  000BBA  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  3250  000BBC  D014               	goto	l4312
  3251  000BBE                     l4308:
  3252                           
  3253                           ;doprnt.c: 859: else if(integ >= 10.0)
  3254  000BBE  C072  F001         	movff	sprintf@integ,?___ftge
  3255  000BC2  C073  F002         	movff	sprintf@integ+1,?___ftge+1
  3256  000BC6  C074  F003         	movff	sprintf@integ+2,?___ftge+2
  3257  000BCA  0E00               	movlw	0
  3258  000BCC  6E04               	movwf	?___ftge+3,c
  3259  000BCE  0E20               	movlw	32
  3260  000BD0  6E05               	movwf	?___ftge+4,c
  3261  000BD2  0E41               	movlw	65
  3262  000BD4  6E06               	movwf	?___ftge+5,c
  3263  000BD6  EC01  F011         	call	___ftge	;wreg free
  3264  000BDA  A0D8               	btfss	status,0,c
  3265  000BDC  D004               	goto	l4312
  3266                           
  3267                           ;doprnt.c: 860: exp++;
  3268  000BDE  0100               	movlb	0	; () banked
  3269  000BE0  0100               	movlb	0	; () banked
  3270  000BE2  4B79               	infsnz	sprintf@exp& (0+255),f,b
  3271  000BE4  2B7A               	incf	(sprintf@exp+1)& (0+255),f,b
  3272  000BE6                     l4312:
  3273                           
  3274                           ;doprnt.c: 861: }
  3275                           ;doprnt.c: 1121: if(prec <= 12)
  3276  000BE6  0100               	movlb	0	; () banked
  3277  000BE8  0100               	movlb	0	; () banked
  3278  000BEA  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3279  000BEC  0A80               	xorlw	128
  3280  000BEE  0F80               	addlw	-128
  3281  000BF0  0E0D               	movlw	13
  3282  000BF2  B4D8               	btfsc	status,2,c
  3283  000BF4  5D7E               	subwf	sprintf@prec& (0+255),w,b
  3284  000BF6  B0D8               	btfsc	status,0,c
  3285  000BF8  D012               	goto	l4316
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;doprnt.c: 1122: fval += fround(prec);
  3289  000BFA  0100               	movlb	0	; () banked
  3290  000BFC  0E00               	movlw	high sprintf@fval
  3291  000BFE  6E47               	movwf	?___asftadd+1,c
  3292  000C00  0100               	movlb	0	; () banked
  3293  000C02  0E7B               	movlw	low sprintf@fval
  3294  000C04  6E46               	movwf	?___asftadd,c
  3295  000C06  C07E  F037         	movff	sprintf@prec,?_fround
  3296  000C0A  EC98  F00B         	call	_fround	;wreg free
  3297  000C0E  C039  F04A         	movff	?_fround+2,?___asftadd+4
  3298  000C12  C038  F049         	movff	?_fround+1,?___asftadd+3
  3299  000C16  C037  F048         	movff	?_fround,?___asftadd+2
  3300  000C1A  EC20  F014         	call	___asftadd	;wreg free
  3301  000C1E                     l4316:
  3302                           
  3303                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3304  000C1E  0100               	movlb	0	; () banked
  3305  000C20  0100               	movlb	0	; () banked
  3306  000C22  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  3307  000C24  0A80               	xorlw	128
  3308  000C26  0F80               	addlw	-128
  3309  000C28  0E0A               	movlw	10
  3310  000C2A  B4D8               	btfsc	status,2,c
  3311  000C2C  5D79               	subwf	sprintf@exp& (0+255),w,b
  3312  000C2E  B0D8               	btfsc	status,0,c
  3313  000C30  D022               	goto	l4324
  3314                           
  3315                           ; BSR set to: 0
  3316  000C32  0E7F               	movlw	127
  3317  000C34  0100               	movlb	0	; () banked
  3318  000C36  0100               	movlb	0	; () banked
  3319  000C38  157D               	andwf	(sprintf@fval+2)& (0+255),w,b
  3320  000C3A  0100               	movlb	0	; () banked
  3321  000C3C  117C               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3322  000C3E  0100               	movlb	0	; () banked
  3323  000C40  117B               	iorwf	sprintf@fval& (0+255),w,b
  3324  000C42  B4D8               	btfsc	status,2,c
  3325  000C44  D067               	goto	l4340
  3326                           
  3327                           ; BSR set to: 0
  3328  000C46  C07B  F017         	movff	sprintf@fval,?___fttol
  3329  000C4A  C07C  F018         	movff	sprintf@fval+1,?___fttol+1
  3330  000C4E  C07D  F019         	movff	sprintf@fval+2,?___fttol+2
  3331  000C52  ECD0  F00F         	call	___fttol	;wreg free
  3332  000C56  501A               	movf	?___fttol+3,w,c
  3333  000C58  1017               	iorwf	?___fttol,w,c
  3334  000C5A  1018               	iorwf	?___fttol+1,w,c
  3335  000C5C  1019               	iorwf	?___fttol+2,w,c
  3336  000C5E  A4D8               	btfss	status,2,c
  3337  000C60  D059               	goto	l4340
  3338  000C62  0100               	movlb	0	; () banked
  3339  000C64  0100               	movlb	0	; () banked
  3340  000C66  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  3341  000C68  0A80               	xorlw	128
  3342  000C6A  0F80               	addlw	-128
  3343  000C6C  0E02               	movlw	2
  3344  000C6E  B4D8               	btfsc	status,2,c
  3345  000C70  5D79               	subwf	sprintf@exp& (0+255),w,b
  3346  000C72  A0D8               	btfss	status,0,c
  3347  000C74  D04F               	goto	l4340
  3348  000C76                     l4324:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3352  000C76  C072  F001         	movff	sprintf@integ,?___ftge
  3353  000C7A  C073  F002         	movff	sprintf@integ+1,?___ftge+1
  3354  000C7E  C074  F003         	movff	sprintf@integ+2,?___ftge+2
  3355  000C82  0E70               	movlw	112
  3356  000C84  6E04               	movwf	?___ftge+3,c
  3357  000C86  0E89               	movlw	137
  3358  000C88  6E05               	movwf	?___ftge+4,c
  3359  000C8A  0E40               	movlw	64
  3360  000C8C  6E06               	movwf	?___ftge+5,c
  3361  000C8E  EC01  F011         	call	___ftge	;wreg free
  3362  000C92  B0D8               	btfsc	status,0,c
  3363  000C94  D003               	goto	l4328
  3364                           
  3365                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3366  000C96  0100               	movlb	0	; () banked
  3367  000C98  0EF7               	movlw	247
  3368  000C9A  D002               	goto	L3
  3369  000C9C                     l4328:
  3370                           
  3371                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3372  000C9C  0100               	movlb	0	; () banked
  3373  000C9E  0EF8               	movlw	248
  3374  000CA0                     L3:
  3375  000CA0  0100               	movlb	0	; () banked
  3376  000CA2  2779               	addwf	sprintf@exp& (0+255),f,b
  3377  000CA4  0EFF               	movlw	255
  3378  000CA6  0100               	movlb	0	; () banked
  3379  000CA8  237A               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 1133: }
  3383                           ;doprnt.c: 1134: integ = scale(exp);
  3384                           
  3385                           ; BSR set to: 0
  3386  000CAA  C079  F037         	movff	sprintf@exp,?_scale
  3387  000CAE  EC70  F009         	call	_scale	;wreg free
  3388  000CB2  C039  F074         	movff	?_scale+2,sprintf@integ+2
  3389  000CB6  C038  F073         	movff	?_scale+1,sprintf@integ+1
  3390  000CBA  C037  F072         	movff	?_scale,sprintf@integ
  3391                           
  3392                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3393  000CBE  C07B  F001         	movff	sprintf@fval,?__tdiv_to_l_
  3394  000CC2  C07C  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  3395  000CC6  C07D  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  3396  000CCA  C072  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  3397  000CCE  C073  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  3398  000CD2  C074  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  3399  000CD6  ECBE  F00D         	call	__tdiv_to_l_	;wreg free
  3400  000CDA  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$318+3
  3401  000CDE  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$318+2
  3402  000CE2  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$318+1
  3403  000CE6  C001  F063         	movff	?__tdiv_to_l_,_sprintf$318
  3404  000CEA  C063  F06D         	movff	_sprintf$318,sprintf@_val
  3405  000CEE  C064  F06E         	movff	_sprintf$318+1,sprintf@_val+1
  3406  000CF2  C065  F06F         	movff	_sprintf$318+2,sprintf@_val+2
  3407  000CF6  C066  F070         	movff	_sprintf$318+3,sprintf@_val+3
  3408                           
  3409                           ;doprnt.c: 1138: fval = 0.0;
  3410  000CFA  0E00               	movlw	0
  3411  000CFC  0100               	movlb	0	; () banked
  3412  000CFE  0100               	movlb	0	; () banked
  3413  000D00  6F7B               	movwf	sprintf@fval& (0+255),b
  3414  000D02  0E00               	movlw	0
  3415  000D04  0100               	movlb	0	; () banked
  3416  000D06  0100               	movlb	0	; () banked
  3417  000D08  6F7C               	movwf	(sprintf@fval+1)& (0+255),b
  3418  000D0A  0E00               	movlw	0
  3419  000D0C  0100               	movlb	0	; () banked
  3420  000D0E  0100               	movlb	0	; () banked
  3421  000D10  6F7D               	movwf	(sprintf@fval+2)& (0+255),b
  3422                           
  3423                           ;doprnt.c: 1139: } else {
  3424  000D12  D02F               	goto	l4346
  3425  000D14                     l4340:
  3426                           
  3427                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3428  000D14  C07B  F017         	movff	sprintf@fval,?___fttol
  3429  000D18  C07C  F018         	movff	sprintf@fval+1,?___fttol+1
  3430  000D1C  C07D  F019         	movff	sprintf@fval+2,?___fttol+2
  3431  000D20  ECD0  F00F         	call	___fttol	;wreg free
  3432  000D24  C01A  F070         	movff	?___fttol+3,sprintf@_val+3
  3433  000D28  C019  F06F         	movff	?___fttol+2,sprintf@_val+2
  3434  000D2C  C018  F06E         	movff	?___fttol+1,sprintf@_val+1
  3435  000D30  C017  F06D         	movff	?___fttol,sprintf@_val
  3436                           
  3437                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3438  000D34  0100               	movlb	0	; () banked
  3439  000D36  0E00               	movlw	high sprintf@fval
  3440  000D38  6E1E               	movwf	?___asftsub+1,c
  3441  000D3A  0100               	movlb	0	; () banked
  3442  000D3C  0E7B               	movlw	low sprintf@fval
  3443  000D3E  6E1D               	movwf	?___asftsub,c
  3444  000D40  C06D  F009         	movff	sprintf@_val,?___lltoft
  3445  000D44  C06E  F00A         	movff	sprintf@_val+1,?___lltoft+1
  3446  000D48  C06F  F00B         	movff	sprintf@_val+2,?___lltoft+2
  3447  000D4C  C070  F00C         	movff	sprintf@_val+3,?___lltoft+3
  3448  000D50  ECC0  F012         	call	___lltoft	;wreg free
  3449  000D54  C00B  F021         	movff	?___lltoft+2,?___asftsub+4
  3450  000D58  C00A  F020         	movff	?___lltoft+1,?___asftsub+3
  3451  000D5C  C009  F01F         	movff	?___lltoft,?___asftsub+2
  3452  000D60  ECE4  F013         	call	___asftsub	;wreg free
  3453                           
  3454                           ;doprnt.c: 1142: exp = 0;
  3455  000D64  0E00               	movlw	0
  3456  000D66  0100               	movlb	0	; () banked
  3457  000D68  0100               	movlb	0	; () banked
  3458  000D6A  6F7A               	movwf	(sprintf@exp+1)& (0+255),b
  3459  000D6C  0E00               	movlw	0
  3460  000D6E  0100               	movlb	0	; () banked
  3461  000D70  6F79               	movwf	sprintf@exp& (0+255),b
  3462  000D72                     l4346:
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;doprnt.c: 1143: }
  3466                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3467  000D72  6E52               	movwf	??_sprintf& (0+255),c
  3468  000D74  0E01               	movlw	1
  3469  000D76  0100               	movlb	0	; () banked
  3470  000D78  0100               	movlb	0	; () banked
  3471  000D7A  6F80               	movwf	sprintf@c& (0+255),b
  3472  000D7C  5052               	movf	??_sprintf& (0+255),w,c
  3473  000D7E                     
  3474                           ; BSR set to: 0
  3475  000D7E  0100               	movlb	0	; () banked
  3476  000D80  0100               	movlb	0	; () banked
  3477  000D82  5180               	movf	sprintf@c& (0+255),w,b
  3478  000D84  0A0A               	xorlw	10
  3479  000D86  B4D8               	btfsc	status,2,c
  3480  000D88  D021               	goto	l4360
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3484                           
  3485                           ; BSR set to: 0
  3486                           
  3487                           ; BSR set to: 0
  3488  000D8A  0100               	movlb	0	; () banked
  3489  000D8C  0100               	movlb	0	; () banked
  3490  000D8E  5180               	movf	sprintf@c& (0+255),w,b
  3491  000D90  0D04               	mullw	4
  3492  000D92  0E00               	movlw	low _dpowers
  3493  000D94  24F3               	addwf	prodl,w,c
  3494  000D96  6EF6               	movwf	tblptrl,c
  3495  000D98  0E08               	movlw	high _dpowers
  3496  000D9A  20F4               	addwfc	prodh,w,c
  3497  000D9C  6EF7               	movwf	tblptrh,c
  3498  000D9E  0009               	tblrd		*+
  3499  000DA0  50F5               	movf	tablat,w,c
  3500  000DA2  0100               	movlb	0	; () banked
  3501  000DA4  0100               	movlb	0	; () banked
  3502  000DA6  5D6D               	subwf	sprintf@_val& (0+255),w,b
  3503  000DA8  0009               	tblrd		*+
  3504  000DAA  50F5               	movf	tablat,w,c
  3505  000DAC  0100               	movlb	0	; () banked
  3506  000DAE  596E               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3507  000DB0  0009               	tblrd		*+
  3508  000DB2  50F5               	movf	tablat,w,c
  3509  000DB4  0100               	movlb	0	; () banked
  3510  000DB6  596F               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3511  000DB8  0009               	tblrd		*+
  3512  000DBA  50F5               	movf	tablat,w,c
  3513  000DBC  0100               	movlb	0	; () banked
  3514  000DBE  5970               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3515  000DC0  A0D8               	btfss	status,0,c
  3516  000DC2  D004               	goto	l4360
  3517                           
  3518                           ; BSR set to: 0
  3519                           
  3520                           ; BSR set to: 0
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;doprnt.c: 1147: break;
  3524  000DC4  0100               	movlb	0	; () banked
  3525  000DC6  0100               	movlb	0	; () banked
  3526  000DC8  2B80               	incf	sprintf@c& (0+255),f,b
  3527  000DCA  D7D9               	goto	L4
  3528  000DCC                     l4360:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;doprnt.c: 1151: width -= prec + c + exp;
  3532  000DCC  0100               	movlb	0	; () banked
  3533  000DCE  C080  F052         	movff	sprintf@c,??_sprintf
  3534  000DD2  6A53               	clrf	(??_sprintf+1)& (0+255),c
  3535  000DD4  BE52               	btfsc	??_sprintf& (0+255),7,c
  3536  000DD6  0653               	decf	(??_sprintf+1)& (0+255),f,c
  3537  000DD8  0100               	movlb	0	; () banked
  3538  000DDA  0100               	movlb	0	; () banked
  3539  000DDC  517E               	movf	sprintf@prec& (0+255),w,b
  3540  000DDE  2652               	addwf	??_sprintf,f,c
  3541  000DE0  0100               	movlb	0	; () banked
  3542  000DE2  0100               	movlb	0	; () banked
  3543  000DE4  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3544  000DE6  2253               	addwfc	??_sprintf+1,f,c
  3545  000DE8  0100               	movlb	0	; () banked
  3546  000DEA  0100               	movlb	0	; () banked
  3547  000DEC  5179               	movf	sprintf@exp& (0+255),w,b
  3548  000DEE  2652               	addwf	??_sprintf,f,c
  3549  000DF0  0100               	movlb	0	; () banked
  3550  000DF2  0100               	movlb	0	; () banked
  3551  000DF4  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  3552  000DF6  2253               	addwfc	??_sprintf+1,f,c
  3553  000DF8  5052               	movf	??_sprintf,w,c
  3554  000DFA  0100               	movlb	0	; () banked
  3555  000DFC  0100               	movlb	0	; () banked
  3556  000DFE  5F77               	subwf	sprintf@width& (0+255),f,b
  3557  000E00  5053               	movf	??_sprintf+1,w,c
  3558  000E02  0100               	movlb	0	; () banked
  3559  000E04  0100               	movlb	0	; () banked
  3560  000E06  5B78               	subwfb	(sprintf@width+1)& (0+255),f,b
  3561                           
  3562                           ;doprnt.c: 1152: if(
  3563                           ;doprnt.c: 1156: prec)
  3564  000E08  0100               	movlb	0	; () banked
  3565  000E0A  0100               	movlb	0	; () banked
  3566  000E0C  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3567  000E0E  117E               	iorwf	sprintf@prec& (0+255),w,b
  3568  000E10  B4D8               	btfsc	status,2,c
  3569  000E12  D005               	goto	l4364
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;doprnt.c: 1157: width--;
  3573  000E14  0100               	movlb	0	; () banked
  3574  000E16  0100               	movlb	0	; () banked
  3575  000E18  0777               	decf	sprintf@width& (0+255),f,b
  3576  000E1A  A0D8               	btfss	status,0,c
  3577  000E1C  0778               	decf	(sprintf@width+1)& (0+255),f,b
  3578  000E1E                     l4364:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1158: if(flag & 0x03)
  3582  000E1E  0E03               	movlw	3
  3583  000E20  0100               	movlb	0	; () banked
  3584  000E22  0100               	movlb	0	; () banked
  3585  000E24  1575               	andwf	sprintf@flag& (0+255),w,b
  3586  000E26  6E52               	movwf	??_sprintf& (0+255),c
  3587  000E28  0E00               	movlw	0
  3588  000E2A  0100               	movlb	0	; () banked
  3589  000E2C  0100               	movlb	0	; () banked
  3590  000E2E  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  3591  000E30  6E53               	movwf	(??_sprintf+1)& (0+255),c
  3592  000E32  5053               	movf	??_sprintf+1,w,c
  3593  000E34  1052               	iorwf	??_sprintf,w,c
  3594  000E36  B4D8               	btfsc	status,2,c
  3595  000E38  D00E               	goto	l4374
  3596  000E3A  D008               	goto	L5
  3597  000E3C                     l4368:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 1188: ((*sp++ = (' ')));
  3601  000E3C  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3602  000E40  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3603  000E44  0E20               	movlw	32
  3604  000E46  6EDF               	movwf	indf2,c
  3605                           
  3606                           ; BSR set to: 0
  3607  000E48  4A4B               	infsnz	sprintf@sp,f,c
  3608  000E4A  2A4C               	incf	sprintf@sp+1,f,c
  3609  000E4C                     L5:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;doprnt.c: 1189: width--;
  3613  000E4C  0100               	movlb	0	; () banked
  3614  000E4E  0100               	movlb	0	; () banked
  3615  000E50  0777               	decf	sprintf@width& (0+255),f,b
  3616  000E52  A0D8               	btfss	status,0,c
  3617  000E54  0778               	decf	(sprintf@width+1)& (0+255),f,b
  3618  000E56                     l4374:
  3619                           
  3620                           ; BSR set to: 0
  3621  000E56  0100               	movlb	0	; () banked
  3622  000E58  0100               	movlb	0	; () banked
  3623  000E5A  5178               	movf	(sprintf@width+1)& (0+255),w,b
  3624  000E5C  0A80               	xorlw	128
  3625  000E5E  0F80               	addlw	-128
  3626  000E60  0E01               	movlw	1
  3627  000E62  B4D8               	btfsc	status,2,c
  3628  000E64  5D77               	subwf	sprintf@width& (0+255),w,b
  3629  000E66  B0D8               	btfsc	status,0,c
  3630  000E68  D7E9               	goto	l4368
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;doprnt.c: 1190: }
  3634                           ;doprnt.c: 1195: if(flag & 0x03)
  3635                           
  3636                           ; BSR set to: 0
  3637  000E6A  0E03               	movlw	3
  3638  000E6C  0100               	movlb	0	; () banked
  3639  000E6E  0100               	movlb	0	; () banked
  3640  000E70  1575               	andwf	sprintf@flag& (0+255),w,b
  3641  000E72  6E52               	movwf	??_sprintf& (0+255),c
  3642  000E74  0E00               	movlw	0
  3643  000E76  0100               	movlb	0	; () banked
  3644  000E78  0100               	movlb	0	; () banked
  3645  000E7A  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  3646  000E7C  6E53               	movwf	(??_sprintf+1)& (0+255),c
  3647  000E7E  5053               	movf	??_sprintf+1,w,c
  3648  000E80  1052               	iorwf	??_sprintf,w,c
  3649  000E82  B4D8               	btfsc	status,2,c
  3650  000E84  D043               	goto	l4390
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  3654  000E86  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3655  000E8A  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3656  000E8E  0E2D               	movlw	45
  3657  000E90  D03A               	goto	L6
  3658  000E92                     l4382:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;doprnt.c: 1207: {
  3662                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  3663  000E92  C06D  F001         	movff	sprintf@_val,?___lldiv
  3664  000E96  C06E  F002         	movff	sprintf@_val+1,?___lldiv+1
  3665  000E9A  C06F  F003         	movff	sprintf@_val+2,?___lldiv+2
  3666  000E9E  C070  F004         	movff	sprintf@_val+3,?___lldiv+3
  3667  000EA2  0100               	movlb	0	; () banked
  3668  000EA4  0100               	movlb	0	; () banked
  3669  000EA6  5180               	movf	sprintf@c& (0+255),w,b
  3670  000EA8  0D04               	mullw	4
  3671  000EAA  0E00               	movlw	low _dpowers
  3672  000EAC  24F3               	addwf	prodl,w,c
  3673  000EAE  6EF6               	movwf	tblptrl,c
  3674  000EB0  0E08               	movlw	high _dpowers
  3675  000EB2  20F4               	addwfc	prodh,w,c
  3676  000EB4  6EF7               	movwf	tblptrh,c
  3677  000EB6  0009               	tblrd		*+
  3678  000EB8  CFF5 F005          	movff	tablat,?___lldiv+4
  3679  000EBC  0009               	tblrd		*+
  3680  000EBE  CFF5 F006          	movff	tablat,?___lldiv+5
  3681  000EC2  0009               	tblrd		*+
  3682  000EC4  CFF5 F007          	movff	tablat,?___lldiv+6
  3683  000EC8  000A               	tblrd		*-
  3684  000ECA  CFF5 F008          	movff	tablat,?___lldiv+7
  3685  000ECE  EC91  F011         	call	___lldiv	;wreg free
  3686  000ED2  C001  F069         	movff	?___lldiv,sprintf@vd
  3687  000ED6  C002  F06A         	movff	?___lldiv+1,sprintf@vd+1
  3688                           
  3689                           ;doprnt.c: 1209: vd %= 10;
  3690  000EDA  C069  F001         	movff	sprintf@vd,?___lwmod
  3691  000EDE  C06A  F002         	movff	sprintf@vd+1,?___lwmod+1
  3692  000EE2  0E00               	movlw	0
  3693  000EE4  6E04               	movwf	?___lwmod+3,c
  3694  000EE6  0E0A               	movlw	10
  3695  000EE8  6E03               	movwf	?___lwmod+2,c
  3696  000EEA  EC9F  F013         	call	___lwmod	;wreg free
  3697  000EEE  C001  F069         	movff	?___lwmod,sprintf@vd
  3698  000EF2  C002  F06A         	movff	?___lwmod+1,sprintf@vd+1
  3699                           
  3700                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  3701  000EF6  0100               	movlb	0	; () banked
  3702  000EF8  0100               	movlb	0	; () banked
  3703  000EFA  5169               	movf	sprintf@vd& (0+255),w,b
  3704  000EFC  0F30               	addlw	48
  3705  000EFE  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3706  000F02  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3707  000F06                     L6:
  3708  000F06  6EDF               	movwf	indf2,c
  3709                           
  3710                           ; BSR set to: 0
  3711  000F08  4A4B               	infsnz	sprintf@sp,f,c
  3712  000F0A  2A4C               	incf	sprintf@sp+1,f,c
  3713  000F0C                     l4390:
  3714                           
  3715                           ; BSR set to: 0
  3716  000F0C  0100               	movlb	0	; () banked
  3717  000F0E  0100               	movlb	0	; () banked
  3718  000F10  0780               	decf	sprintf@c& (0+255),f,b
  3719  000F12  0100               	movlb	0	; () banked
  3720  000F14  2980               	incf	sprintf@c& (0+255),w,b
  3721  000F16  B4D8               	btfsc	status,2,c
  3722  000F18  D00E               	goto	l4398
  3723  000F1A  D7BB               	goto	l4382
  3724  000F1C                     l4392:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  3728  000F1C  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3729  000F20  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3730  000F24  0E30               	movlw	48
  3731  000F26  6EDF               	movwf	indf2,c
  3732                           
  3733                           ; BSR set to: 0
  3734  000F28  4A4B               	infsnz	sprintf@sp,f,c
  3735  000F2A  2A4C               	incf	sprintf@sp+1,f,c
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;doprnt.c: 1216: exp--;
  3739  000F2C  0100               	movlb	0	; () banked
  3740  000F2E  0100               	movlb	0	; () banked
  3741  000F30  0779               	decf	sprintf@exp& (0+255),f,b
  3742  000F32  A0D8               	btfss	status,0,c
  3743  000F34  077A               	decf	(sprintf@exp+1)& (0+255),f,b
  3744  000F36                     l4398:
  3745                           
  3746                           ; BSR set to: 0
  3747  000F36  0100               	movlb	0	; () banked
  3748  000F38  0100               	movlb	0	; () banked
  3749  000F3A  517A               	movf	(sprintf@exp+1)& (0+255),w,b
  3750  000F3C  0A80               	xorlw	128
  3751  000F3E  0F80               	addlw	-128
  3752  000F40  0E01               	movlw	1
  3753  000F42  B4D8               	btfsc	status,2,c
  3754  000F44  5D79               	subwf	sprintf@exp& (0+255),w,b
  3755  000F46  B0D8               	btfsc	status,0,c
  3756  000F48  D7E9               	goto	l4392
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;doprnt.c: 1217: }
  3760                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3761                           
  3762                           ; BSR set to: 0
  3763  000F4A  0100               	movlb	0	; () banked
  3764  000F4C  0100               	movlb	0	; () banked
  3765  000F4E  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3766  000F50  0A80               	xorlw	128
  3767  000F52  0F80               	addlw	-128
  3768  000F54  0E09               	movlw	9
  3769  000F56  B4D8               	btfsc	status,2,c
  3770  000F58  5D7E               	subwf	sprintf@prec& (0+255),w,b
  3771  000F5A  A0D8               	btfss	status,0,c
  3772  000F5C  D007               	goto	l231
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3776  000F5E  6E52               	movwf	??_sprintf& (0+255),c
  3777  000F60  0E08               	movlw	8
  3778  000F62  0100               	movlb	0	; () banked
  3779  000F64  0100               	movlb	0	; () banked
  3780  000F66  6F80               	movwf	sprintf@c& (0+255),b
  3781  000F68  5052               	movf	??_sprintf& (0+255),w,c
  3782  000F6A  D002               	goto	l4404
  3783  000F6C                     l231:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;doprnt.c: 1220: else
  3787                           ;doprnt.c: 1221: c = prec;
  3788  000F6C  C07E  F080         	movff	sprintf@prec,sprintf@c
  3789  000F70                     l4404:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;doprnt.c: 1222: prec -= c;
  3793  000F70  0100               	movlb	0	; () banked
  3794  000F72  0100               	movlb	0	; () banked
  3795  000F74  5180               	movf	sprintf@c& (0+255),w,b
  3796  000F76  0100               	movlb	0	; () banked
  3797  000F78  0100               	movlb	0	; () banked
  3798  000F7A  5F7E               	subwf	sprintf@prec& (0+255),f,b
  3799  000F7C  0E00               	movlw	0
  3800  000F7E  0100               	movlb	0	; () banked
  3801  000F80  BF80               	btfsc	sprintf@c& (0+255),7,b
  3802  000F82  0EFF               	movlw	255
  3803  000F84  0100               	movlb	0	; () banked
  3804  000F86  0100               	movlb	0	; () banked
  3805  000F88  5B7F               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;doprnt.c: 1226: if(c)
  3809  000F8A  0100               	movlb	0	; () banked
  3810  000F8C  0100               	movlb	0	; () banked
  3811  000F8E  5180               	movf	sprintf@c& (0+255),w,b
  3812  000F90  B4D8               	btfsc	status,2,c
  3813  000F92  D008               	goto	l4412
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  3817  000F94  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3818  000F98  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3819  000F9C  0E2E               	movlw	46
  3820  000F9E  6EDF               	movwf	indf2,c
  3821                           
  3822                           ; BSR set to: 0
  3823  000FA0  4A4B               	infsnz	sprintf@sp,f,c
  3824  000FA2  2A4C               	incf	sprintf@sp+1,f,c
  3825  000FA4                     l4412:
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3829  000FA4  C080  F037         	movff	sprintf@c,?_scale
  3830  000FA8  EC70  F009         	call	_scale	;wreg free
  3831  000FAC  C039  F062         	movff	?_scale+2,_sprintf$1409+2
  3832  000FB0  C038  F061         	movff	?_scale+1,_sprintf$1409+1
  3833  000FB4  C037  F060         	movff	?_scale,_sprintf$1409
  3834                           
  3835                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3836  000FB8  C07B  F029         	movff	sprintf@fval,?___ftmul+3
  3837  000FBC  C07C  F02A         	movff	sprintf@fval+1,?___ftmul+4
  3838  000FC0  C07D  F02B         	movff	sprintf@fval+2,?___ftmul+5
  3839  000FC4  C060  F026         	movff	_sprintf$1409,?___ftmul
  3840  000FC8  C061  F027         	movff	_sprintf$1409+1,?___ftmul+1
  3841  000FCC  C062  F028         	movff	_sprintf$1409+2,?___ftmul+2
  3842  000FD0  EC4F  F00E         	call	___ftmul	;wreg free
  3843  000FD4  C028  F019         	movff	?___ftmul+2,?___fttol+2
  3844  000FD8  C027  F018         	movff	?___ftmul+1,?___fttol+1
  3845  000FDC  C026  F017         	movff	?___ftmul,?___fttol
  3846  000FE0  ECD0  F00F         	call	___fttol	;wreg free
  3847  000FE4  C01A  F070         	movff	?___fttol+3,sprintf@_val+3
  3848  000FE8  C019  F06F         	movff	?___fttol+2,sprintf@_val+2
  3849  000FEC  C018  F06E         	movff	?___fttol+1,sprintf@_val+1
  3850  000FF0  C017  F06D         	movff	?___fttol,sprintf@_val
  3851                           
  3852                           ;doprnt.c: 1235: while(c--) {
  3853  000FF4  D065               	goto	l4426
  3854  000FF6                     l4416:
  3855                           
  3856                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  3857  000FF6  C06D  F001         	movff	sprintf@_val,?___lldiv
  3858  000FFA  C06E  F002         	movff	sprintf@_val+1,?___lldiv+1
  3859  000FFE  C06F  F003         	movff	sprintf@_val+2,?___lldiv+2
  3860  001002  C070  F004         	movff	sprintf@_val+3,?___lldiv+3
  3861  001006  0100               	movlb	0	; () banked
  3862  001008  0100               	movlb	0	; () banked
  3863  00100A  5180               	movf	sprintf@c& (0+255),w,b
  3864  00100C  0D04               	mullw	4
  3865  00100E  0E00               	movlw	low _dpowers
  3866  001010  24F3               	addwf	prodl,w,c
  3867  001012  6EF6               	movwf	tblptrl,c
  3868  001014  0E08               	movlw	high _dpowers
  3869  001016  20F4               	addwfc	prodh,w,c
  3870  001018  6EF7               	movwf	tblptrh,c
  3871  00101A  0009               	tblrd		*+
  3872  00101C  CFF5 F005          	movff	tablat,?___lldiv+4
  3873  001020  0009               	tblrd		*+
  3874  001022  CFF5 F006          	movff	tablat,?___lldiv+5
  3875  001026  0009               	tblrd		*+
  3876  001028  CFF5 F007          	movff	tablat,?___lldiv+6
  3877  00102C  000A               	tblrd		*-
  3878  00102E  CFF5 F008          	movff	tablat,?___lldiv+7
  3879  001032  EC91  F011         	call	___lldiv	;wreg free
  3880  001036  C001  F06B         	movff	?___lldiv,sprintf@vd_320
  3881  00103A  C002  F06C         	movff	?___lldiv+1,sprintf@vd_320+1
  3882                           
  3883                           ;doprnt.c: 1237: vd %= 10;
  3884  00103E  C06B  F001         	movff	sprintf@vd_320,?___lwmod
  3885  001042  C06C  F002         	movff	sprintf@vd_320+1,?___lwmod+1
  3886  001046  0E00               	movlw	0
  3887  001048  6E04               	movwf	?___lwmod+3,c
  3888  00104A  0E0A               	movlw	10
  3889  00104C  6E03               	movwf	?___lwmod+2,c
  3890  00104E  EC9F  F013         	call	___lwmod	;wreg free
  3891  001052  C001  F06B         	movff	?___lwmod,sprintf@vd_320
  3892  001056  C002  F06C         	movff	?___lwmod+1,sprintf@vd_320+1
  3893                           
  3894                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  3895  00105A  0100               	movlb	0	; () banked
  3896  00105C  0100               	movlb	0	; () banked
  3897  00105E  516B               	movf	sprintf@vd_320& (0+255),w,b
  3898  001060  0F30               	addlw	48
  3899  001062  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3900  001066  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3901  00106A  6EDF               	movwf	indf2,c
  3902                           
  3903                           ; BSR set to: 0
  3904  00106C  4A4B               	infsnz	sprintf@sp,f,c
  3905  00106E  2A4C               	incf	sprintf@sp+1,f,c
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  3909  001070  C06D  F001         	movff	sprintf@_val,?___llmod
  3910  001074  C06E  F002         	movff	sprintf@_val+1,?___llmod+1
  3911  001078  C06F  F003         	movff	sprintf@_val+2,?___llmod+2
  3912  00107C  C070  F004         	movff	sprintf@_val+3,?___llmod+3
  3913  001080  0100               	movlb	0	; () banked
  3914  001082  0100               	movlb	0	; () banked
  3915  001084  5180               	movf	sprintf@c& (0+255),w,b
  3916  001086  0D04               	mullw	4
  3917  001088  0E00               	movlw	low _dpowers
  3918  00108A  24F3               	addwf	prodl,w,c
  3919  00108C  6EF6               	movwf	tblptrl,c
  3920  00108E  0E08               	movlw	high _dpowers
  3921  001090  20F4               	addwfc	prodh,w,c
  3922  001092  6EF7               	movwf	tblptrh,c
  3923  001094  0009               	tblrd		*+
  3924  001096  CFF5 F005          	movff	tablat,?___llmod+4
  3925  00109A  0009               	tblrd		*+
  3926  00109C  CFF5 F006          	movff	tablat,?___llmod+5
  3927  0010A0  0009               	tblrd		*+
  3928  0010A2  CFF5 F007          	movff	tablat,?___llmod+6
  3929  0010A6  000A               	tblrd		*-
  3930  0010A8  CFF5 F008          	movff	tablat,?___llmod+7
  3931  0010AC  EC8B  F012         	call	___llmod	;wreg free
  3932  0010B0  C004  F070         	movff	?___llmod+3,sprintf@_val+3
  3933  0010B4  C003  F06F         	movff	?___llmod+2,sprintf@_val+2
  3934  0010B8  C002  F06E         	movff	?___llmod+1,sprintf@_val+1
  3935  0010BC  C001  F06D         	movff	?___llmod,sprintf@_val
  3936  0010C0                     l4426:
  3937  0010C0  0100               	movlb	0	; () banked
  3938  0010C2  0100               	movlb	0	; () banked
  3939  0010C4  0780               	decf	sprintf@c& (0+255),f,b
  3940  0010C6  0100               	movlb	0	; () banked
  3941  0010C8  2980               	incf	sprintf@c& (0+255),w,b
  3942  0010CA  B4D8               	btfsc	status,2,c
  3943  0010CC  D00E               	goto	l4434
  3944  0010CE  D793               	goto	l4416
  3945  0010D0                     l4428:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  3949  0010D0  C04B  FFD9         	movff	sprintf@sp,fsr2l
  3950  0010D4  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  3951  0010D8  0E30               	movlw	48
  3952  0010DA  6EDF               	movwf	indf2,c
  3953                           
  3954                           ; BSR set to: 0
  3955  0010DC  4A4B               	infsnz	sprintf@sp,f,c
  3956  0010DE  2A4C               	incf	sprintf@sp+1,f,c
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 1244: prec--;
  3960  0010E0  0100               	movlb	0	; () banked
  3961  0010E2  0100               	movlb	0	; () banked
  3962  0010E4  077E               	decf	sprintf@prec& (0+255),f,b
  3963  0010E6  A0D8               	btfss	status,0,c
  3964  0010E8  077F               	decf	(sprintf@prec+1)& (0+255),f,b
  3965  0010EA                     l4434:
  3966                           
  3967                           ; BSR set to: 0
  3968  0010EA  0100               	movlb	0	; () banked
  3969  0010EC  0100               	movlb	0	; () banked
  3970  0010EE  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3971  0010F0  117E               	iorwf	sprintf@prec& (0+255),w,b
  3972  0010F2  B4D8               	btfsc	status,2,c
  3973  0010F4  D0E0               	goto	l4484
  3974  0010F6  D7EC               	goto	l4428
  3975  0010F8                     l4436:
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;doprnt.c: 1253: }
  3979                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  3980  0010F8  0100               	movlb	0	; () banked
  3981  0010FA  0100               	movlb	0	; () banked
  3982  0010FC  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  3983  0010FE  117E               	iorwf	sprintf@prec& (0+255),w,b
  3984  001100  A4D8               	btfss	status,2,c
  3985  001102  D00C               	goto	l4442
  3986                           
  3987                           ; BSR set to: 0
  3988  001104  0100               	movlb	0	; () banked
  3989  001106  0100               	movlb	0	; () banked
  3990  001108  5170               	movf	(sprintf@_val+3)& (0+255),w,b
  3991  00110A  116D               	iorwf	sprintf@_val& (0+255),w,b
  3992  00110C  116E               	iorwf	(sprintf@_val+1)& (0+255),w,b
  3993  00110E  116F               	iorwf	(sprintf@_val+2)& (0+255),w,b
  3994  001110  A4D8               	btfss	status,2,c
  3995  001112  D004               	goto	l4442
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;doprnt.c: 1298: prec++;
  3999  001114  0100               	movlb	0	; () banked
  4000  001116  0100               	movlb	0	; () banked
  4001  001118  4B7E               	infsnz	sprintf@prec& (0+255),f,b
  4002  00111A  2B7F               	incf	(sprintf@prec+1)& (0+255),f,b
  4003  00111C                     l4442:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;doprnt.c: 1346: if(c < prec)
  4007  00111C  0E80               	movlw	128
  4008  00111E  0100               	movlb	0	; () banked
  4009  001120  0100               	movlb	0	; () banked
  4010  001122  BF80               	btfsc	sprintf@c& (0+255),7,b
  4011  001124  0E7F               	movlw	127
  4012  001126  6E52               	movwf	??_sprintf& (0+255),c
  4013  001128  0100               	movlb	0	; () banked
  4014  00112A  0100               	movlb	0	; () banked
  4015  00112C  517E               	movf	sprintf@prec& (0+255),w,b
  4016  00112E  0100               	movlb	0	; () banked
  4017  001130  0100               	movlb	0	; () banked
  4018  001132  5D80               	subwf	sprintf@c& (0+255),w,b
  4019  001134  0100               	movlb	0	; () banked
  4020  001136  0100               	movlb	0	; () banked
  4021  001138  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  4022  00113A  0A80               	xorlw	128
  4023  00113C  5852               	subwfb	??_sprintf& (0+255),w,c
  4024  00113E  B0D8               	btfsc	status,0,c
  4025  001140  D003               	goto	l4446
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;doprnt.c: 1347: c = prec;
  4029  001142  C07E  F080         	movff	sprintf@prec,sprintf@c
  4030  001146  D01E               	goto	l4450
  4031  001148                     l4446:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;doprnt.c: 1348: else if(prec < c)
  4035  001148  0100               	movlb	0	; () banked
  4036  00114A  0100               	movlb	0	; () banked
  4037  00114C  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  4038  00114E  0A80               	xorlw	128
  4039  001150  6E52               	movwf	??_sprintf& (0+255),c
  4040  001152  0100               	movlb	0	; () banked
  4041  001154  0100               	movlb	0	; () banked
  4042  001156  5180               	movf	sprintf@c& (0+255),w,b
  4043  001158  0100               	movlb	0	; () banked
  4044  00115A  0100               	movlb	0	; () banked
  4045  00115C  5D7E               	subwf	sprintf@prec& (0+255),w,b
  4046  00115E  0E80               	movlw	128
  4047  001160  0100               	movlb	0	; () banked
  4048  001162  0100               	movlb	0	; () banked
  4049  001164  BF80               	btfsc	sprintf@c& (0+255),7,b
  4050  001166  0E7F               	movlw	127
  4051  001168  5852               	subwfb	??_sprintf& (0+255),w,c
  4052  00116A  B0D8               	btfsc	status,0,c
  4053  00116C  D00B               	goto	l4450
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;doprnt.c: 1349: prec = c;
  4057  00116E  0100               	movlb	0	; () banked
  4058  001170  0100               	movlb	0	; () banked
  4059  001172  5180               	movf	sprintf@c& (0+255),w,b
  4060  001174  0100               	movlb	0	; () banked
  4061  001176  0100               	movlb	0	; () banked
  4062  001178  6F7E               	movwf	sprintf@prec& (0+255),b
  4063  00117A  0100               	movlb	0	; () banked
  4064  00117C  6B7F               	clrf	(sprintf@prec+1)& (0+255),b
  4065  00117E  0100               	movlb	0	; () banked
  4066  001180  BF7E               	btfsc	sprintf@prec& (0+255),7,b
  4067  001182  077F               	decf	(sprintf@prec+1)& (0+255),f,b
  4068  001184                     l4450:
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;doprnt.c: 1352: if(width && flag & 0x03)
  4072  001184  0100               	movlb	0	; () banked
  4073  001186  0100               	movlb	0	; () banked
  4074  001188  5178               	movf	(sprintf@width+1)& (0+255),w,b
  4075  00118A  1177               	iorwf	sprintf@width& (0+255),w,b
  4076  00118C  B4D8               	btfsc	status,2,c
  4077  00118E  D013               	goto	l4456
  4078                           
  4079                           ; BSR set to: 0
  4080  001190  0E03               	movlw	3
  4081  001192  0100               	movlb	0	; () banked
  4082  001194  0100               	movlb	0	; () banked
  4083  001196  1575               	andwf	sprintf@flag& (0+255),w,b
  4084  001198  6E52               	movwf	??_sprintf& (0+255),c
  4085  00119A  0E00               	movlw	0
  4086  00119C  0100               	movlb	0	; () banked
  4087  00119E  0100               	movlb	0	; () banked
  4088  0011A0  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  4089  0011A2  6E53               	movwf	(??_sprintf+1)& (0+255),c
  4090  0011A4  5053               	movf	??_sprintf+1,w,c
  4091  0011A6  1052               	iorwf	??_sprintf,w,c
  4092  0011A8  B4D8               	btfsc	status,2,c
  4093  0011AA  D005               	goto	l4456
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;doprnt.c: 1353: width--;
  4097  0011AC  0100               	movlb	0	; () banked
  4098  0011AE  0100               	movlb	0	; () banked
  4099  0011B0  0777               	decf	sprintf@width& (0+255),f,b
  4100  0011B2  A0D8               	btfss	status,0,c
  4101  0011B4  0778               	decf	(sprintf@width+1)& (0+255),f,b
  4102  0011B6                     l4456:
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;doprnt.c: 1355: if(flag & 0x4000) {
  4106  0011B6  0100               	movlb	0	; () banked
  4107  0011B8  0100               	movlb	0	; () banked
  4108  0011BA  AD76               	btfss	(sprintf@flag+1)& (0+255),6,b
  4109  0011BC  D026               	goto	l4464
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 1356: if(width > prec)
  4113  0011BE  0100               	movlb	0	; () banked
  4114  0011C0  0100               	movlb	0	; () banked
  4115  0011C2  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  4116  0011C4  0A80               	xorlw	128
  4117  0011C6  6E52               	movwf	??_sprintf& (0+255),c
  4118  0011C8  0100               	movlb	0	; () banked
  4119  0011CA  0100               	movlb	0	; () banked
  4120  0011CC  5177               	movf	sprintf@width& (0+255),w,b
  4121  0011CE  0100               	movlb	0	; () banked
  4122  0011D0  0100               	movlb	0	; () banked
  4123  0011D2  5D7E               	subwf	sprintf@prec& (0+255),w,b
  4124  0011D4  0100               	movlb	0	; () banked
  4125  0011D6  0100               	movlb	0	; () banked
  4126  0011D8  5178               	movf	(sprintf@width+1)& (0+255),w,b
  4127  0011DA  0A80               	xorlw	128
  4128  0011DC  5852               	subwfb	??_sprintf& (0+255),w,c
  4129  0011DE  B0D8               	btfsc	status,0,c
  4130  0011E0  D00D               	goto	l4462
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;doprnt.c: 1357: width -= prec;
  4134  0011E2  0100               	movlb	0	; () banked
  4135  0011E4  0100               	movlb	0	; () banked
  4136  0011E6  517E               	movf	sprintf@prec& (0+255),w,b
  4137  0011E8  0100               	movlb	0	; () banked
  4138  0011EA  0100               	movlb	0	; () banked
  4139  0011EC  5F77               	subwf	sprintf@width& (0+255),f,b
  4140  0011EE  0100               	movlb	0	; () banked
  4141  0011F0  0100               	movlb	0	; () banked
  4142  0011F2  517F               	movf	(sprintf@prec+1)& (0+255),w,b
  4143  0011F4  0100               	movlb	0	; () banked
  4144  0011F6  0100               	movlb	0	; () banked
  4145  0011F8  5B78               	subwfb	(sprintf@width+1)& (0+255),f,b
  4146  0011FA  D007               	goto	l4464
  4147  0011FC                     l4462:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;doprnt.c: 1358: else
  4151                           ;doprnt.c: 1359: width = 0;
  4152  0011FC  0E00               	movlw	0
  4153  0011FE  0100               	movlb	0	; () banked
  4154  001200  0100               	movlb	0	; () banked
  4155  001202  6F78               	movwf	(sprintf@width+1)& (0+255),b
  4156  001204  0E00               	movlw	0
  4157  001206  0100               	movlb	0	; () banked
  4158  001208  6F77               	movwf	sprintf@width& (0+255),b
  4159  00120A                     l4464:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;doprnt.c: 1360: }
  4163                           ;doprnt.c: 1388: if(width > c)
  4164  00120A  0E80               	movlw	128
  4165  00120C  0100               	movlb	0	; () banked
  4166  00120E  0100               	movlb	0	; () banked
  4167  001210  BF80               	btfsc	sprintf@c& (0+255),7,b
  4168  001212  0E7F               	movlw	127
  4169  001214  6E52               	movwf	??_sprintf& (0+255),c
  4170  001216  0100               	movlb	0	; () banked
  4171  001218  0100               	movlb	0	; () banked
  4172  00121A  5177               	movf	sprintf@width& (0+255),w,b
  4173  00121C  0100               	movlb	0	; () banked
  4174  00121E  0100               	movlb	0	; () banked
  4175  001220  5D80               	subwf	sprintf@c& (0+255),w,b
  4176  001222  0100               	movlb	0	; () banked
  4177  001224  0100               	movlb	0	; () banked
  4178  001226  5178               	movf	(sprintf@width+1)& (0+255),w,b
  4179  001228  0A80               	xorlw	128
  4180  00122A  5852               	subwfb	??_sprintf& (0+255),w,c
  4181  00122C  B0D8               	btfsc	status,0,c
  4182  00122E  D00E               	goto	l4468
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;doprnt.c: 1389: width -= c;
  4186  001230  0100               	movlb	0	; () banked
  4187  001232  0100               	movlb	0	; () banked
  4188  001234  5180               	movf	sprintf@c& (0+255),w,b
  4189  001236  0100               	movlb	0	; () banked
  4190  001238  0100               	movlb	0	; () banked
  4191  00123A  5F77               	subwf	sprintf@width& (0+255),f,b
  4192  00123C  0E00               	movlw	0
  4193  00123E  0100               	movlb	0	; () banked
  4194  001240  BF80               	btfsc	sprintf@c& (0+255),7,b
  4195  001242  0EFF               	movlw	255
  4196  001244  0100               	movlb	0	; () banked
  4197  001246  0100               	movlb	0	; () banked
  4198  001248  5B78               	subwfb	(sprintf@width+1)& (0+255),f,b
  4199  00124A  D007               	goto	l4470
  4200  00124C                     l4468:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;doprnt.c: 1390: else
  4204                           ;doprnt.c: 1391: width = 0;
  4205  00124C  0E00               	movlw	0
  4206  00124E  0100               	movlb	0	; () banked
  4207  001250  0100               	movlb	0	; () banked
  4208  001252  6F78               	movwf	(sprintf@width+1)& (0+255),b
  4209  001254  0E00               	movlw	0
  4210  001256  0100               	movlb	0	; () banked
  4211  001258  6F77               	movwf	sprintf@width& (0+255),b
  4212  00125A                     l4470:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;doprnt.c: 1429: {
  4216                           ;doprnt.c: 1431: if(width
  4217                           ;doprnt.c: 1435: )
  4218  00125A  0100               	movlb	0	; () banked
  4219  00125C  0100               	movlb	0	; () banked
  4220  00125E  5178               	movf	(sprintf@width+1)& (0+255),w,b
  4221  001260  1177               	iorwf	sprintf@width& (0+255),w,b
  4222  001262  B4D8               	btfsc	status,2,c
  4223  001264  D012               	goto	l4478
  4224  001266                     l4472:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  4228  001266  C04B  FFD9         	movff	sprintf@sp,fsr2l
  4229  00126A  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  4230  00126E  0E20               	movlw	32
  4231  001270  6EDF               	movwf	indf2,c
  4232                           
  4233                           ; BSR set to: 0
  4234  001272  4A4B               	infsnz	sprintf@sp,f,c
  4235  001274  2A4C               	incf	sprintf@sp+1,f,c
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;doprnt.c: 1438: while(--width);
  4239  001276  0100               	movlb	0	; () banked
  4240  001278  0100               	movlb	0	; () banked
  4241  00127A  0777               	decf	sprintf@width& (0+255),f,b
  4242  00127C  A0D8               	btfss	status,0,c
  4243  00127E  0778               	decf	(sprintf@width+1)& (0+255),f,b
  4244  001280  0100               	movlb	0	; () banked
  4245  001282  5178               	movf	(sprintf@width+1)& (0+255),w,b
  4246  001284  1177               	iorwf	sprintf@width& (0+255),w,b
  4247  001286  A4D8               	btfss	status,2,c
  4248  001288  D7EE               	goto	l4472
  4249  00128A                     l4478:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;doprnt.c: 1445: if(flag & 0x03)
  4253  00128A  0E03               	movlw	3
  4254  00128C  0100               	movlb	0	; () banked
  4255  00128E  0100               	movlb	0	; () banked
  4256  001290  1575               	andwf	sprintf@flag& (0+255),w,b
  4257  001292  6E52               	movwf	??_sprintf& (0+255),c
  4258  001294  0E00               	movlw	0
  4259  001296  0100               	movlb	0	; () banked
  4260  001298  0100               	movlb	0	; () banked
  4261  00129A  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  4262  00129C  6E53               	movwf	(??_sprintf+1)& (0+255),c
  4263  00129E  5053               	movf	??_sprintf+1,w,c
  4264  0012A0  1052               	iorwf	??_sprintf,w,c
  4265  0012A2  B4D8               	btfsc	status,2,c
  4266  0012A4  D008               	goto	l4484
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  4270  0012A6  C04B  FFD9         	movff	sprintf@sp,fsr2l
  4271  0012AA  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  4272  0012AE  0E2D               	movlw	45
  4273  0012B0  6EDF               	movwf	indf2,c
  4274  0012B2                     L2:
  4275                           
  4276                           ; BSR set to: 0
  4277  0012B2  4A4B               	infsnz	sprintf@sp,f,c
  4278  0012B4  2A4C               	incf	sprintf@sp+1,f,c
  4279  0012B6                     l4484:
  4280                           
  4281                           ; BSR set to: 0
  4282  0012B6  C04D  FFF6         	movff	sprintf@f,tblptrl
  4283  0012BA  C04E  FFF7         	movff	sprintf@f+1,tblptrh
  4284  0012BE  4A4D               	infsnz	sprintf@f,f,c
  4285  0012C0  2A4E               	incf	sprintf@f+1,f,c
  4286  0012C2  0008               	tblrd		*
  4287  0012C4  0100               	movlb	0	; () banked
  4288  0012C6  CFF5 F080          	movff	tablat,sprintf@c
  4289  0012CA  0100               	movlb	0	; () banked
  4290  0012CC  6780               	tstfsz	sprintf@c& (0+255),b
  4291  0012CE  EF48  F004         	goto	l4226
  4292  0012D2                     l4486:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 1545: *sp = 0;
  4296  0012D2  C04B  FFD9         	movff	sprintf@sp,fsr2l
  4297  0012D6  C04C  FFDA         	movff	sprintf@sp+1,fsr2h
  4298  0012DA  0E00               	movlw	0
  4299  0012DC  6EDF               	movwf	indf2,c
  4300                           
  4301                           ; BSR set to: 0
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;doprnt.c: 1547: return 0;
  4305                           ;	Return value of _sprintf is never used
  4306  0012DE  0012               	return	
  4307  0012E0                     __end_of_sprintf:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           postinc1	equ	0xFE6
  4319                           postdec1	equ	0xFE5
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function ___lwmod *****************
  4329 ;; Defined at:
  4330 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  dividend        2    0[COMRAM] unsigned int 
  4333 ;;  divisor         2    2[COMRAM] unsigned int 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  counter         1    5[COMRAM] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  2    0[COMRAM] unsigned int 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4345 ;;      Params:         4       0       0       0       0       0       0       0       0
  4346 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4347 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4348 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4349 ;;Total ram usage:        6 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_sprintf
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text21
  4359  00273E                     __ptext21:
  4360                           	opt stack 0
  4361  00273E                     ___lwmod:
  4362                           	opt stack 28
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;incstack = 0
  4366                           ;incstack = 0
  4367  00273E  5004               	movf	___lwmod@divisor+1,w,c
  4368  002740  1003               	iorwf	___lwmod@divisor,w,c
  4369  002742  B4D8               	btfsc	status,2,c
  4370  002744  D01A               	goto	l890
  4371  002746  6E05               	movwf	??___lwmod& (0+255),c
  4372  002748  0E01               	movlw	1
  4373  00274A  6E06               	movwf	___lwmod@counter,c
  4374  00274C  5005               	movf	??___lwmod& (0+255),w,c
  4375  00274E  D004               	goto	l3726
  4376  002750                     l3724:
  4377  002750  90D8               	bcf	status,0,c
  4378  002752  3603               	rlcf	___lwmod@divisor,f,c
  4379  002754  3604               	rlcf	___lwmod@divisor+1,f,c
  4380  002756  2A06               	incf	___lwmod@counter,f,c
  4381  002758                     l3726:
  4382  002758  AE04               	btfss	___lwmod@divisor+1,7,c
  4383  00275A  D7FA               	goto	l3724
  4384  00275C                     l3728:
  4385  00275C  5003               	movf	___lwmod@divisor,w,c
  4386  00275E  5C01               	subwf	___lwmod@dividend,w,c
  4387  002760  5004               	movf	___lwmod@divisor+1,w,c
  4388  002762  5802               	subwfb	___lwmod@dividend+1,w,c
  4389  002764  A0D8               	btfss	status,0,c
  4390  002766  D004               	goto	l3732
  4391  002768  5003               	movf	___lwmod@divisor,w,c
  4392  00276A  5E01               	subwf	___lwmod@dividend,f,c
  4393  00276C  5004               	movf	___lwmod@divisor+1,w,c
  4394  00276E  5A02               	subwfb	___lwmod@dividend+1,f,c
  4395  002770                     l3732:
  4396  002770  90D8               	bcf	status,0,c
  4397  002772  3204               	rrcf	___lwmod@divisor+1,f,c
  4398  002774  3203               	rrcf	___lwmod@divisor,f,c
  4399  002776  2E06               	decfsz	___lwmod@counter,f,c
  4400  002778  D7F1               	goto	l3728
  4401  00277A                     l890:
  4402  00277A  C001  F001         	movff	___lwmod@dividend,?___lwmod
  4403  00277E  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  4404  002782  0012               	return	
  4405  002784                     __end_of___lwmod:
  4406                           	opt stack 0
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodh	equ	0xFF4
  4412                           prodl	equ	0xFF3
  4413                           intcon	equ	0xFF2
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           postinc1	equ	0xFE6
  4417                           postdec1	equ	0xFE5
  4418                           fsr1l	equ	0xFE1
  4419                           indf2	equ	0xFDF
  4420                           postinc2	equ	0xFDE
  4421                           postdec2	equ	0xFDD
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function ___lltoft *****************
  4427 ;; Defined at:
  4428 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lltoft.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  c               4    8[COMRAM] unsigned long 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  exp             1   16[COMRAM] unsigned char 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  3    8[COMRAM] float 
  4435 ;; Registers used:
  4436 ;;		wreg, status,2, status,0, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4442 ;;      Params:         4       0       0       0       0       0       0       0       0
  4443 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4444 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4445 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4446 ;;Total ram usage:        9 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    1
  4449 ;; This function calls:
  4450 ;;		___ftpack
  4451 ;; This function is called by:
  4452 ;;		_sprintf
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           	psect	text22
  4457  002580                     __ptext22:
  4458                           	opt stack 0
  4459  002580                     ___lltoft:
  4460                           	opt stack 27
  4461                           
  4462                           ;incstack = 0
  4463                           ;incstack = 0
  4464  002580  6E0D               	movwf	??___lltoft& (0+255),c
  4465  002582  0E8E               	movlw	142
  4466  002584  6E11               	movwf	___lltoft@exp,c
  4467  002586  500D               	movf	??___lltoft& (0+255),w,c
  4468  002588  D006               	goto	l3948
  4469  00258A                     l3946:
  4470  00258A  90D8               	bcf	status,0,c
  4471  00258C  320C               	rrcf	___lltoft@c+3,f,c
  4472  00258E  320B               	rrcf	___lltoft@c+2,f,c
  4473  002590  320A               	rrcf	___lltoft@c+1,f,c
  4474  002592  3209               	rrcf	___lltoft@c,f,c
  4475  002594  2A11               	incf	___lltoft@exp,f,c
  4476  002596                     l3948:
  4477  002596  0E00               	movlw	0
  4478  002598  1409               	andwf	___lltoft@c,w,c
  4479  00259A  6E0D               	movwf	??___lltoft& (0+255),c
  4480  00259C  0E00               	movlw	0
  4481  00259E  140A               	andwf	___lltoft@c+1,w,c
  4482  0025A0  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4483  0025A2  0E00               	movlw	0
  4484  0025A4  140B               	andwf	___lltoft@c+2,w,c
  4485  0025A6  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4486  0025A8  0EFF               	movlw	255
  4487  0025AA  140C               	andwf	___lltoft@c+3,w,c
  4488  0025AC  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4489  0025AE  5010               	movf	??___lltoft+3,w,c
  4490  0025B0  100D               	iorwf	??___lltoft,w,c
  4491  0025B2  100E               	iorwf	??___lltoft+1,w,c
  4492  0025B4  100F               	iorwf	??___lltoft+2,w,c
  4493  0025B6  A4D8               	btfss	status,2,c
  4494  0025B8  D7E8               	goto	l3946
  4495  0025BA  C009  F001         	movff	___lltoft@c,?___ftpack
  4496  0025BE  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  4497  0025C2  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  4498  0025C6  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  4499  0025CA  6E0D               	movwf	??___lltoft& (0+255),c
  4500  0025CC  0E00               	movlw	0
  4501  0025CE  6E05               	movwf	?___ftpack+4,c
  4502  0025D0  500D               	movf	??___lltoft& (0+255),w,c
  4503  0025D2  ECA5  F010         	call	___ftpack	;wreg free
  4504  0025D6  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4505  0025DA  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4506  0025DE  C001  F009         	movff	?___ftpack,?___lltoft
  4507  0025E2  0012               	return	
  4508  0025E4                     __end_of___lltoft:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postinc1	equ	0xFE6
  4520                           postdec1	equ	0xFE5
  4521                           fsr1l	equ	0xFE1
  4522                           indf2	equ	0xFDF
  4523                           postinc2	equ	0xFDE
  4524                           postdec2	equ	0xFDD
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function ___llmod *****************
  4530 ;; Defined at:
  4531 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  dividend        4    0[COMRAM] unsigned long 
  4534 ;;  divisor         4    4[COMRAM] unsigned long 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  counter         1    9[COMRAM] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  4    0[COMRAM] unsigned long 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4546 ;;      Params:         8       0       0       0       0       0       0       0       0
  4547 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4548 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4549 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4550 ;;Total ram usage:       10 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_sprintf
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text23
  4560  002516                     __ptext23:
  4561                           	opt stack 0
  4562  002516                     ___llmod:
  4563                           	opt stack 28
  4564                           
  4565                           ;incstack = 0
  4566                           ;incstack = 0
  4567  002516  5008               	movf	___llmod@divisor+3,w,c
  4568  002518  1005               	iorwf	___llmod@divisor,w,c
  4569  00251A  1006               	iorwf	___llmod@divisor+1,w,c
  4570  00251C  1007               	iorwf	___llmod@divisor+2,w,c
  4571  00251E  B4D8               	btfsc	status,2,c
  4572  002520  D026               	goto	l821
  4573  002522  6E09               	movwf	??___llmod& (0+255),c
  4574  002524  0E01               	movlw	1
  4575  002526  6E0A               	movwf	___llmod@counter,c
  4576  002528  5009               	movf	??___llmod& (0+255),w,c
  4577  00252A  D006               	goto	l3710
  4578  00252C                     l3708:
  4579  00252C  90D8               	bcf	status,0,c
  4580  00252E  3605               	rlcf	___llmod@divisor,f,c
  4581  002530  3606               	rlcf	___llmod@divisor+1,f,c
  4582  002532  3607               	rlcf	___llmod@divisor+2,f,c
  4583  002534  3608               	rlcf	___llmod@divisor+3,f,c
  4584  002536  2A0A               	incf	___llmod@counter,f,c
  4585  002538                     l3710:
  4586  002538  AE08               	btfss	___llmod@divisor+3,7,c
  4587  00253A  D7F8               	goto	l3708
  4588  00253C                     l3712:
  4589  00253C  5005               	movf	___llmod@divisor,w,c
  4590  00253E  5C01               	subwf	___llmod@dividend,w,c
  4591  002540  5006               	movf	___llmod@divisor+1,w,c
  4592  002542  5802               	subwfb	___llmod@dividend+1,w,c
  4593  002544  5007               	movf	___llmod@divisor+2,w,c
  4594  002546  5803               	subwfb	___llmod@dividend+2,w,c
  4595  002548  5008               	movf	___llmod@divisor+3,w,c
  4596  00254A  5804               	subwfb	___llmod@dividend+3,w,c
  4597  00254C  A0D8               	btfss	status,0,c
  4598  00254E  D008               	goto	l3716
  4599  002550  5005               	movf	___llmod@divisor,w,c
  4600  002552  5E01               	subwf	___llmod@dividend,f,c
  4601  002554  5006               	movf	___llmod@divisor+1,w,c
  4602  002556  5A02               	subwfb	___llmod@dividend+1,f,c
  4603  002558  5007               	movf	___llmod@divisor+2,w,c
  4604  00255A  5A03               	subwfb	___llmod@dividend+2,f,c
  4605  00255C  5008               	movf	___llmod@divisor+3,w,c
  4606  00255E  5A04               	subwfb	___llmod@dividend+3,f,c
  4607  002560                     l3716:
  4608  002560  90D8               	bcf	status,0,c
  4609  002562  3208               	rrcf	___llmod@divisor+3,f,c
  4610  002564  3207               	rrcf	___llmod@divisor+2,f,c
  4611  002566  3206               	rrcf	___llmod@divisor+1,f,c
  4612  002568  3205               	rrcf	___llmod@divisor,f,c
  4613  00256A  2E0A               	decfsz	___llmod@counter,f,c
  4614  00256C  D7E7               	goto	l3712
  4615  00256E                     l821:
  4616  00256E  C001  F001         	movff	___llmod@dividend,?___llmod
  4617  002572  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4618  002576  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4619  00257A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4620  00257E  0012               	return	
  4621  002580                     __end_of___llmod:
  4622                           	opt stack 0
  4623                           tblptru	equ	0xFF8
  4624                           tblptrh	equ	0xFF7
  4625                           tblptrl	equ	0xFF6
  4626                           tablat	equ	0xFF5
  4627                           prodh	equ	0xFF4
  4628                           prodl	equ	0xFF3
  4629                           intcon	equ	0xFF2
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postinc1	equ	0xFE6
  4633                           postdec1	equ	0xFE5
  4634                           fsr1l	equ	0xFE1
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___lldiv *****************
  4643 ;; Defined at:
  4644 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  dividend        4    0[COMRAM] unsigned long 
  4647 ;;  divisor         4    4[COMRAM] unsigned long 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  quotient        4    9[COMRAM] unsigned long 
  4650 ;;  counter         1   13[COMRAM] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  4    0[COMRAM] unsigned long 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4660 ;;      Params:         8       0       0       0       0       0       0       0       0
  4661 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4662 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4663 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4664 ;;Total ram usage:       14 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_sprintf
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text24
  4674  002322                     __ptext24:
  4675                           	opt stack 0
  4676  002322                     ___lldiv:
  4677                           	opt stack 28
  4678                           
  4679                           ;incstack = 0
  4680                           ;incstack = 0
  4681  002322  0E00               	movlw	0
  4682  002324  6E0A               	movwf	___lldiv@quotient,c
  4683  002326  0E00               	movlw	0
  4684  002328  6E0B               	movwf	___lldiv@quotient+1,c
  4685  00232A  0E00               	movlw	0
  4686  00232C  6E0C               	movwf	___lldiv@quotient+2,c
  4687  00232E  0E00               	movlw	0
  4688  002330  6E0D               	movwf	___lldiv@quotient+3,c
  4689  002332  5008               	movf	___lldiv@divisor+3,w,c
  4690  002334  1005               	iorwf	___lldiv@divisor,w,c
  4691  002336  1006               	iorwf	___lldiv@divisor+1,w,c
  4692  002338  1007               	iorwf	___lldiv@divisor+2,w,c
  4693  00233A  B4D8               	btfsc	status,2,c
  4694  00233C  D02C               	goto	l811
  4695  00233E  6E09               	movwf	??___lldiv& (0+255),c
  4696  002340  0E01               	movlw	1
  4697  002342  6E0E               	movwf	___lldiv@counter,c
  4698  002344  5009               	movf	??___lldiv& (0+255),w,c
  4699  002346  D006               	goto	l3690
  4700  002348                     l3688:
  4701  002348  90D8               	bcf	status,0,c
  4702  00234A  3605               	rlcf	___lldiv@divisor,f,c
  4703  00234C  3606               	rlcf	___lldiv@divisor+1,f,c
  4704  00234E  3607               	rlcf	___lldiv@divisor+2,f,c
  4705  002350  3608               	rlcf	___lldiv@divisor+3,f,c
  4706  002352  2A0E               	incf	___lldiv@counter,f,c
  4707  002354                     l3690:
  4708  002354  AE08               	btfss	___lldiv@divisor+3,7,c
  4709  002356  D7F8               	goto	l3688
  4710  002358                     l3692:
  4711  002358  90D8               	bcf	status,0,c
  4712  00235A  360A               	rlcf	___lldiv@quotient,f,c
  4713  00235C  360B               	rlcf	___lldiv@quotient+1,f,c
  4714  00235E  360C               	rlcf	___lldiv@quotient+2,f,c
  4715  002360  360D               	rlcf	___lldiv@quotient+3,f,c
  4716  002362  5005               	movf	___lldiv@divisor,w,c
  4717  002364  5C01               	subwf	___lldiv@dividend,w,c
  4718  002366  5006               	movf	___lldiv@divisor+1,w,c
  4719  002368  5802               	subwfb	___lldiv@dividend+1,w,c
  4720  00236A  5007               	movf	___lldiv@divisor+2,w,c
  4721  00236C  5803               	subwfb	___lldiv@dividend+2,w,c
  4722  00236E  5008               	movf	___lldiv@divisor+3,w,c
  4723  002370  5804               	subwfb	___lldiv@dividend+3,w,c
  4724  002372  A0D8               	btfss	status,0,c
  4725  002374  D009               	goto	l3700
  4726  002376  5005               	movf	___lldiv@divisor,w,c
  4727  002378  5E01               	subwf	___lldiv@dividend,f,c
  4728  00237A  5006               	movf	___lldiv@divisor+1,w,c
  4729  00237C  5A02               	subwfb	___lldiv@dividend+1,f,c
  4730  00237E  5007               	movf	___lldiv@divisor+2,w,c
  4731  002380  5A03               	subwfb	___lldiv@dividend+2,f,c
  4732  002382  5008               	movf	___lldiv@divisor+3,w,c
  4733  002384  5A04               	subwfb	___lldiv@dividend+3,f,c
  4734  002386  800A               	bsf	___lldiv@quotient,0,c
  4735  002388                     l3700:
  4736  002388  90D8               	bcf	status,0,c
  4737  00238A  3208               	rrcf	___lldiv@divisor+3,f,c
  4738  00238C  3207               	rrcf	___lldiv@divisor+2,f,c
  4739  00238E  3206               	rrcf	___lldiv@divisor+1,f,c
  4740  002390  3205               	rrcf	___lldiv@divisor,f,c
  4741  002392  2E0E               	decfsz	___lldiv@counter,f,c
  4742  002394  D7E1               	goto	l3692
  4743  002396                     l811:
  4744  002396  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  4745  00239A  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4746  00239E  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4747  0023A2  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4748  0023A6  0012               	return	
  4749  0023A8                     __end_of___lldiv:
  4750                           	opt stack 0
  4751                           tblptru	equ	0xFF8
  4752                           tblptrh	equ	0xFF7
  4753                           tblptrl	equ	0xFF6
  4754                           tablat	equ	0xFF5
  4755                           prodh	equ	0xFF4
  4756                           prodl	equ	0xFF3
  4757                           intcon	equ	0xFF2
  4758                           postinc0	equ	0xFEE
  4759                           wreg	equ	0xFE8
  4760                           postinc1	equ	0xFE6
  4761                           postdec1	equ	0xFE5
  4762                           fsr1l	equ	0xFE1
  4763                           indf2	equ	0xFDF
  4764                           postinc2	equ	0xFDE
  4765                           postdec2	equ	0xFDD
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           
  4770 ;; *************** function ___fttol *****************
  4771 ;; Defined at:
  4772 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fttol.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  f1              3   22[COMRAM] float 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  lval            4   32[COMRAM] unsigned long 
  4777 ;;  exp1            1   36[COMRAM] unsigned char 
  4778 ;;  sign1           1   31[COMRAM] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  4   22[COMRAM] long 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4788 ;;      Params:         4       0       0       0       0       0       0       0       0
  4789 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4790 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4791 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4792 ;;Total ram usage:       15 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; This function calls:
  4795 ;;		Nothing
  4796 ;; This function is called by:
  4797 ;;		_sprintf
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text25
  4802  001FA0                     __ptext25:
  4803                           	opt stack 0
  4804  001FA0                     ___fttol:
  4805                           	opt stack 28
  4806                           
  4807                           ;incstack = 0
  4808                           ;incstack = 0
  4809  001FA0  0E0F               	movlw	15
  4810  001FA2  6E1B               	movwf	??___fttol& (0+255),c
  4811  001FA4  C017  F01C         	movff	___fttol@f1,??___fttol+1
  4812  001FA8  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  4813  001FAC  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  4814  001FB0  281B               	incf	??___fttol,w,c
  4815  001FB2  6E1F               	movwf	(??___fttol+4)& (0+255),c
  4816  001FB4  D004               	goto	u2710
  4817  001FB6                     u2715:
  4818  001FB6  90D8               	bcf	status,0,c
  4819  001FB8  321E               	rrcf	??___fttol+3,f,c
  4820  001FBA  321D               	rrcf	??___fttol+2,f,c
  4821  001FBC  321C               	rrcf	??___fttol+1,f,c
  4822  001FBE                     u2710:
  4823  001FBE  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  4824  001FC0  D7FA               	goto	u2715
  4825  001FC2  501C               	movf	??___fttol+1,w,c
  4826  001FC4  6E25               	movwf	___fttol@exp1,c
  4827  001FC6  6625               	tstfsz	___fttol@exp1& (0+255),c
  4828  001FC8  D001               	goto	l4184
  4829  001FCA  D035               	goto	u2760
  4830  001FCC                     l4184:
  4831  001FCC  0E17               	movlw	23
  4832  001FCE  6E1B               	movwf	??___fttol& (0+255),c
  4833  001FD0  C017  F01C         	movff	___fttol@f1,??___fttol+1
  4834  001FD4  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  4835  001FD8  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  4836  001FDC  281B               	incf	??___fttol,w,c
  4837  001FDE  6E1F               	movwf	(??___fttol+4)& (0+255),c
  4838  001FE0  D004               	goto	u2730
  4839  001FE2                     u2735:
  4840  001FE2  90D8               	bcf	status,0,c
  4841  001FE4  321E               	rrcf	??___fttol+3,f,c
  4842  001FE6  321D               	rrcf	??___fttol+2,f,c
  4843  001FE8  321C               	rrcf	??___fttol+1,f,c
  4844  001FEA                     u2730:
  4845  001FEA  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  4846  001FEC  D7FA               	goto	u2735
  4847  001FEE  501C               	movf	??___fttol+1,w,c
  4848  001FF0  6E20               	movwf	___fttol@sign1,c
  4849  001FF2  8E18               	bsf	___fttol@f1+1,7,c
  4850  001FF4  0EFF               	movlw	255
  4851  001FF6  1617               	andwf	___fttol@f1,f,c
  4852  001FF8  0EFF               	movlw	255
  4853  001FFA  1618               	andwf	___fttol@f1+1,f,c
  4854  001FFC  0E00               	movlw	0
  4855  001FFE  1619               	andwf	___fttol@f1+2,f,c
  4856  002000  5017               	movf	___fttol@f1,w,c
  4857  002002  6E21               	movwf	___fttol@lval,c
  4858  002004  5018               	movf	___fttol@f1+1,w,c
  4859  002006  6E22               	movwf	___fttol@lval+1,c
  4860  002008  5019               	movf	___fttol@f1+2,w,c
  4861  00200A  6E23               	movwf	___fttol@lval+2,c
  4862  00200C  6A24               	clrf	___fttol@lval+3,c
  4863  00200E  0E8E               	movlw	142
  4864  002010  5E25               	subwf	___fttol@exp1,f,c
  4865  002012  AE25               	btfss	___fttol@exp1,7,c
  4866  002014  D00D               	goto	l4206
  4867  002016  5025               	movf	___fttol@exp1,w,c
  4868  002018  0A80               	xorlw	128
  4869  00201A  0F8F               	addlw	143
  4870  00201C  A0D8               	btfss	status,0,c
  4871  00201E  D00B               	goto	u2760
  4872  002020                     l4202:
  4873  002020  90D8               	bcf	status,0,c
  4874  002022  3224               	rrcf	___fttol@lval+3,f,c
  4875  002024  3223               	rrcf	___fttol@lval+2,f,c
  4876  002026  3222               	rrcf	___fttol@lval+1,f,c
  4877  002028  3221               	rrcf	___fttol@lval,f,c
  4878  00202A  3E25               	incfsz	___fttol@exp1,f,c
  4879  00202C  D7F9               	goto	l4202
  4880  00202E  D014               	goto	l4216
  4881  002030                     l4206:
  4882  002030  0E17               	movlw	23
  4883  002032  6425               	cpfsgt	___fttol@exp1,c
  4884  002034  D00F               	goto	l4214
  4885  002036                     u2760:
  4886  002036  0E00               	movlw	0
  4887  002038  6E17               	movwf	?___fttol,c
  4888  00203A  0E00               	movlw	0
  4889  00203C  6E18               	movwf	?___fttol+1,c
  4890  00203E  0E00               	movlw	0
  4891  002040  6E19               	movwf	?___fttol+2,c
  4892  002042  0E00               	movlw	0
  4893  002044  6E1A               	movwf	?___fttol+3,c
  4894  002046  D01B               	goto	l767
  4895  002048                     l4212:
  4896  002048  90D8               	bcf	status,0,c
  4897  00204A  3621               	rlcf	___fttol@lval,f,c
  4898  00204C  3622               	rlcf	___fttol@lval+1,f,c
  4899  00204E  3623               	rlcf	___fttol@lval+2,f,c
  4900  002050  3624               	rlcf	___fttol@lval+3,f,c
  4901  002052  0625               	decf	___fttol@exp1,f,c
  4902  002054                     l4214:
  4903  002054  6625               	tstfsz	___fttol@exp1,c
  4904  002056  D7F8               	goto	l4212
  4905  002058                     l4216:
  4906  002058  5020               	movf	___fttol@sign1,w,c
  4907  00205A  B4D8               	btfsc	status,2,c
  4908  00205C  D008               	goto	l4220
  4909  00205E  1E24               	comf	___fttol@lval+3,f,c
  4910  002060  1E23               	comf	___fttol@lval+2,f,c
  4911  002062  1E22               	comf	___fttol@lval+1,f,c
  4912  002064  6C21               	negf	___fttol@lval,c
  4913  002066  0E00               	movlw	0
  4914  002068  2222               	addwfc	___fttol@lval+1,f,c
  4915  00206A  2223               	addwfc	___fttol@lval+2,f,c
  4916  00206C  2224               	addwfc	___fttol@lval+3,f,c
  4917  00206E                     l4220:
  4918  00206E  C021  F017         	movff	___fttol@lval,?___fttol
  4919  002072  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  4920  002076  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  4921  00207A  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  4922  00207E                     l767:
  4923  00207E  0012               	return	
  4924  002080                     __end_of___fttol:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           postinc1	equ	0xFE6
  4936                           postdec1	equ	0xFE5
  4937                           fsr1l	equ	0xFE1
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function ___ftneg *****************
  4946 ;; Defined at:
  4947 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftneg.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  f1              3    0[COMRAM] float 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  3    0[COMRAM] float 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4961 ;;      Params:         3       0       0       0       0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4964 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4965 ;;Total ram usage:        3 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_sprintf
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text26
  4975  00291C                     __ptext26:
  4976                           	opt stack 0
  4977  00291C                     ___ftneg:
  4978                           	opt stack 28
  4979                           
  4980                           ;incstack = 0
  4981                           ;incstack = 0
  4982  00291C  0E7F               	movlw	127
  4983  00291E  1403               	andwf	___ftneg@f1+2,w,c
  4984  002920  1002               	iorwf	___ftneg@f1+1,w,c
  4985  002922  1001               	iorwf	___ftneg@f1,w,c
  4986  002924  B4D8               	btfsc	status,2,c
  4987  002926  D006               	goto	l757
  4988  002928  0E00               	movlw	0
  4989  00292A  1A01               	xorwf	___ftneg@f1,f,c
  4990  00292C  0E00               	movlw	0
  4991  00292E  1A02               	xorwf	___ftneg@f1+1,f,c
  4992  002930  0E80               	movlw	128
  4993  002932  1A03               	xorwf	___ftneg@f1+2,f,c
  4994  002934                     l757:
  4995  002934  C001  F001         	movff	___ftneg@f1,?___ftneg
  4996  002938  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4997  00293C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4998  002940  0012               	return	
  4999  002942                     __end_of___ftneg:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           postinc1	equ	0xFE6
  5011                           postdec1	equ	0xFE5
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function ___ftge *****************
  5021 ;; Defined at:
  5022 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftge.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  ff1             3    0[COMRAM] float 
  5025 ;;  ff2             3    3[COMRAM] float 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5037 ;;      Params:         6       0       0       0       0       0       0       0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5039 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5040 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5041 ;;Total ram usage:        9 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_sprintf
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text27
  5051  002202                     __ptext27:
  5052                           	opt stack 0
  5053  002202                     ___ftge:
  5054                           	opt stack 28
  5055                           
  5056                           ;incstack = 0
  5057                           ;incstack = 0
  5058  002202  AE03               	btfss	___ftge@ff1+2,7,c
  5059  002204  D016               	goto	l3664
  5060  002206  C001  F007         	movff	___ftge@ff1,??___ftge
  5061  00220A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5062  00220E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5063  002212  1E07               	comf	??___ftge,f,c
  5064  002214  1E08               	comf	??___ftge+1,f,c
  5065  002216  1E09               	comf	??___ftge+2,f,c
  5066  002218  2A07               	incf	??___ftge,f,c
  5067  00221A  0E00               	movlw	0
  5068  00221C  2208               	addwfc	??___ftge+1,f,c
  5069  00221E  2209               	addwfc	??___ftge+2,f,c
  5070  002220  0E00               	movlw	0
  5071  002222  2407               	addwf	??___ftge,w,c
  5072  002224  6E01               	movwf	___ftge@ff1,c
  5073  002226  0E00               	movlw	0
  5074  002228  2008               	addwfc	??___ftge+1,w,c
  5075  00222A  6E02               	movwf	___ftge@ff1+1,c
  5076  00222C  0E80               	movlw	128
  5077  00222E  2009               	addwfc	??___ftge+2,w,c
  5078  002230  6E03               	movwf	___ftge@ff1+2,c
  5079  002232                     l3664:
  5080  002232  AE06               	btfss	___ftge@ff2+2,7,c
  5081  002234  D016               	goto	l3668
  5082  002236  C004  F007         	movff	___ftge@ff2,??___ftge
  5083  00223A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5084  00223E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5085  002242  1E07               	comf	??___ftge,f,c
  5086  002244  1E08               	comf	??___ftge+1,f,c
  5087  002246  1E09               	comf	??___ftge+2,f,c
  5088  002248  2A07               	incf	??___ftge,f,c
  5089  00224A  0E00               	movlw	0
  5090  00224C  2208               	addwfc	??___ftge+1,f,c
  5091  00224E  2209               	addwfc	??___ftge+2,f,c
  5092  002250  0E00               	movlw	0
  5093  002252  2407               	addwf	??___ftge,w,c
  5094  002254  6E04               	movwf	___ftge@ff2,c
  5095  002256  0E00               	movlw	0
  5096  002258  2008               	addwfc	??___ftge+1,w,c
  5097  00225A  6E05               	movwf	___ftge@ff2+1,c
  5098  00225C  0E80               	movlw	128
  5099  00225E  2009               	addwfc	??___ftge+2,w,c
  5100  002260  6E06               	movwf	___ftge@ff2+2,c
  5101  002262                     l3668:
  5102  002262  0E00               	movlw	0
  5103  002264  1A01               	xorwf	___ftge@ff1,f,c
  5104  002266  0E00               	movlw	0
  5105  002268  1A02               	xorwf	___ftge@ff1+1,f,c
  5106  00226A  0E80               	movlw	128
  5107  00226C  1A03               	xorwf	___ftge@ff1+2,f,c
  5108  00226E  0E00               	movlw	0
  5109  002270  1A04               	xorwf	___ftge@ff2,f,c
  5110  002272  0E00               	movlw	0
  5111  002274  1A05               	xorwf	___ftge@ff2+1,f,c
  5112  002276  0E80               	movlw	128
  5113  002278  1A06               	xorwf	___ftge@ff2+2,f,c
  5114  00227A  5004               	movf	___ftge@ff2,w,c
  5115  00227C  5C01               	subwf	___ftge@ff1,w,c
  5116  00227E  5005               	movf	___ftge@ff2+1,w,c
  5117  002280  5802               	subwfb	___ftge@ff1+1,w,c
  5118  002282  5006               	movf	___ftge@ff2+2,w,c
  5119  002284  5803               	subwfb	___ftge@ff1+2,w,c
  5120  002286  B0D8               	btfsc	status,0,c
  5121  002288  D002               	goto	l3674
  5122  00228A  90D8               	bcf	status,0,c
  5123  00228C  D001               	goto	l741
  5124  00228E                     l3674:
  5125  00228E  80D8               	bsf	status,0,c
  5126  002290                     l741:
  5127  002290  0012               	return	
  5128  002292                     __end_of___ftge:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           postinc1	equ	0xFE6
  5140                           postdec1	equ	0xFE5
  5141                           fsr1l	equ	0xFE1
  5142                           indf2	equ	0xFDF
  5143                           postinc2	equ	0xFDE
  5144                           postdec2	equ	0xFDD
  5145                           fsr2h	equ	0xFDA
  5146                           fsr2l	equ	0xFD9
  5147                           status	equ	0xFD8
  5148                           
  5149 ;; *************** function ___asftsub *****************
  5150 ;; Defined at:
  5151 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftsub.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  f1p             2   28[COMRAM] PTR float 
  5154 ;;		 -> sprintf@fval(3), 
  5155 ;;  f2              3   30[COMRAM] float 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  3   28[COMRAM] float 
  5160 ;; Registers used:
  5161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5167 ;;      Params:         5       0       0       0       0       0       0       0       0
  5168 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5170 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5171 ;;Total ram usage:        5 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    3
  5174 ;; This function calls:
  5175 ;;		___ftsub
  5176 ;; This function is called by:
  5177 ;;		_sprintf
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text28
  5182  0027C8                     __ptext28:
  5183                           	opt stack 0
  5184  0027C8                     ___asftsub:
  5185                           	opt stack 25
  5186                           
  5187                           ;	Return value of ___asftsub is never used
  5188                           
  5189                           ;incstack = 0
  5190                           ;incstack = 0
  5191  0027C8  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  5192  0027CC  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  5193  0027D0  CFDE F017          	movff	postinc2,?___ftsub
  5194  0027D4  CFDE F018          	movff	postinc2,?___ftsub+1
  5195  0027D8  CFDD F019          	movff	postdec2,?___ftsub+2
  5196  0027DC  C01F  F01A         	movff	___asftsub@f2,?___ftsub+3
  5197  0027E0  C020  F01B         	movff	___asftsub@f2+1,?___ftsub+4
  5198  0027E4  C021  F01C         	movff	___asftsub@f2+2,?___ftsub+5
  5199  0027E8  EC5B  F014         	call	___ftsub	;wreg free
  5200  0027EC  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
  5201  0027F0  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
  5202  0027F4  C017  FFDE         	movff	?___ftsub,postinc2
  5203  0027F8  C018  FFDE         	movff	?___ftsub+1,postinc2
  5204  0027FC  C019  FFDD         	movff	?___ftsub+2,postdec2
  5205  002800  52DD               	movf	postdec2,f,c
  5206  002802  0012               	return	
  5207  002804                     __end_of___asftsub:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           postinc1	equ	0xFE6
  5219                           postdec1	equ	0xFE5
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function ___ftsub *****************
  5229 ;; Defined at:
  5230 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftsub.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  f1              3   22[COMRAM] float 
  5233 ;;  f2              3   25[COMRAM] float 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  3   22[COMRAM] float 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         6       0       0       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5248 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5249 ;;Total ram usage:        6 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    2
  5252 ;; This function calls:
  5253 ;;		___ftadd
  5254 ;; This function is called by:
  5255 ;;		___asftsub
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text29
  5260  0028B6                     __ptext29:
  5261                           	opt stack 0
  5262  0028B6                     ___ftsub:
  5263                           	opt stack 25
  5264                           
  5265                           ;incstack = 0
  5266                           ;incstack = 0
  5267  0028B6  0E00               	movlw	0
  5268  0028B8  1A1A               	xorwf	___ftsub@f2,f,c
  5269  0028BA  0E00               	movlw	0
  5270  0028BC  1A1B               	xorwf	___ftsub@f2+1,f,c
  5271  0028BE  0E80               	movlw	128
  5272  0028C0  1A1C               	xorwf	___ftsub@f2+2,f,c
  5273  0028C2  C017  F009         	movff	___ftsub@f1,?___ftadd
  5274  0028C6  C018  F00A         	movff	___ftsub@f1+1,?___ftadd+1
  5275  0028CA  C019  F00B         	movff	___ftsub@f1+2,?___ftadd+2
  5276  0028CE  C01A  F00C         	movff	___ftsub@f2,?___ftadd+3
  5277  0028D2  C01B  F00D         	movff	___ftsub@f2+1,?___ftadd+4
  5278  0028D6  C01C  F00E         	movff	___ftsub@f2+2,?___ftadd+5
  5279  0028DA  ECD8  F00C         	call	___ftadd	;wreg free
  5280  0028DE  C00B  F019         	movff	?___ftadd+2,?___ftsub+2
  5281  0028E2  C00A  F018         	movff	?___ftadd+1,?___ftsub+1
  5282  0028E6  C009  F017         	movff	?___ftadd,?___ftsub
  5283  0028EA  0012               	return	
  5284  0028EC                     __end_of___ftsub:
  5285                           	opt stack 0
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           postinc1	equ	0xFE6
  5296                           postdec1	equ	0xFE5
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           postdec2	equ	0xFDD
  5301                           fsr2h	equ	0xFDA
  5302                           fsr2l	equ	0xFD9
  5303                           status	equ	0xFD8
  5304                           
  5305 ;; *************** function ___asftmul *****************
  5306 ;; Defined at:
  5307 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftmul.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  f1p             2   54[COMRAM] PTR float 
  5310 ;;		 -> sprintf@integ(3), 
  5311 ;;  f2              3   56[COMRAM] float 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  3   54[COMRAM] float 
  5316 ;; Registers used:
  5317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5323 ;;      Params:         5       0       0       0       0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5326 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5327 ;;Total ram usage:        5 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    2
  5330 ;; This function calls:
  5331 ;;		___ftmul
  5332 ;; This function is called by:
  5333 ;;		_sprintf
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text30
  5338  002804                     __ptext30:
  5339                           	opt stack 0
  5340  002804                     ___asftmul:
  5341                           	opt stack 26
  5342                           
  5343                           ;	Return value of ___asftmul is never used
  5344                           
  5345                           ;incstack = 0
  5346                           ;incstack = 0
  5347  002804  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  5348  002808  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  5349  00280C  CFDE F026          	movff	postinc2,?___ftmul
  5350  002810  CFDE F027          	movff	postinc2,?___ftmul+1
  5351  002814  CFDD F028          	movff	postdec2,?___ftmul+2
  5352  002818  C039  F029         	movff	___asftmul@f2,?___ftmul+3
  5353  00281C  C03A  F02A         	movff	___asftmul@f2+1,?___ftmul+4
  5354  002820  C03B  F02B         	movff	___asftmul@f2+2,?___ftmul+5
  5355  002824  EC4F  F00E         	call	___ftmul	;wreg free
  5356  002828  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  5357  00282C  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  5358  002830  C026  FFDE         	movff	?___ftmul,postinc2
  5359  002834  C027  FFDE         	movff	?___ftmul+1,postinc2
  5360  002838  C028  FFDD         	movff	?___ftmul+2,postdec2
  5361  00283C  52DD               	movf	postdec2,f,c
  5362  00283E  0012               	return	
  5363  002840                     __end_of___asftmul:
  5364                           	opt stack 0
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           intcon	equ	0xFF2
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           postinc1	equ	0xFE6
  5375                           postdec1	equ	0xFE5
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function ___asftadd *****************
  5385 ;; Defined at:
  5386 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftadd.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  f1p             2   69[COMRAM] PTR float 
  5389 ;;		 -> sprintf@fval(3), 
  5390 ;;  f2              3   71[COMRAM] float 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  3   69[COMRAM] float 
  5395 ;; Registers used:
  5396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5402 ;;      Params:         5       0       0       0       0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5405 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5406 ;;Total ram usage:        5 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    2
  5409 ;; This function calls:
  5410 ;;		___ftadd
  5411 ;; This function is called by:
  5412 ;;		_sprintf
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text31
  5417  002840                     __ptext31:
  5418                           	opt stack 0
  5419  002840                     ___asftadd:
  5420                           	opt stack 26
  5421                           
  5422                           ;	Return value of ___asftadd is never used
  5423                           
  5424                           ;incstack = 0
  5425                           ;incstack = 0
  5426  002840  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  5427  002844  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5428  002848  CFDE F009          	movff	postinc2,?___ftadd
  5429  00284C  CFDE F00A          	movff	postinc2,?___ftadd+1
  5430  002850  CFDD F00B          	movff	postdec2,?___ftadd+2
  5431  002854  C048  F00C         	movff	___asftadd@f2,?___ftadd+3
  5432  002858  C049  F00D         	movff	___asftadd@f2+1,?___ftadd+4
  5433  00285C  C04A  F00E         	movff	___asftadd@f2+2,?___ftadd+5
  5434  002860  ECD8  F00C         	call	___ftadd	;wreg free
  5435  002864  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  5436  002868  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5437  00286C  C009  FFDE         	movff	?___ftadd,postinc2
  5438  002870  C00A  FFDE         	movff	?___ftadd+1,postinc2
  5439  002874  C00B  FFDD         	movff	?___ftadd+2,postdec2
  5440  002878  52DD               	movf	postdec2,f,c
  5441  00287A  0012               	return	
  5442  00287C                     __end_of___asftadd:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           postinc1	equ	0xFE6
  5454                           postdec1	equ	0xFE5
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function ___ftadd *****************
  5464 ;; Defined at:
  5465 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftadd.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  f1              3    8[COMRAM] float 
  5468 ;;  f2              3   11[COMRAM] float 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  exp1            1   21[COMRAM] unsigned char 
  5471 ;;  exp2            1   20[COMRAM] unsigned char 
  5472 ;;  sign            1   19[COMRAM] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  3    8[COMRAM] float 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5482 ;;      Params:         6       0       0       0       0       0       0       0       0
  5483 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5484 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5485 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5486 ;;Total ram usage:       14 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    1
  5489 ;; This function calls:
  5490 ;;		___ftpack
  5491 ;; This function is called by:
  5492 ;;		___asftadd
  5493 ;;		___ftsub
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text32
  5498  0019B0                     __ptext32:
  5499                           	opt stack 0
  5500  0019B0                     ___ftadd:
  5501                           	opt stack 25
  5502                           
  5503                           ;incstack = 0
  5504                           ;incstack = 0
  5505  0019B0  0E0F               	movlw	15
  5506  0019B2  6E0F               	movwf	??___ftadd& (0+255),c
  5507  0019B4  C009  F010         	movff	___ftadd@f1,??___ftadd+1
  5508  0019B8  C00A  F011         	movff	___ftadd@f1+1,??___ftadd+2
  5509  0019BC  C00B  F012         	movff	___ftadd@f1+2,??___ftadd+3
  5510  0019C0  280F               	incf	??___ftadd,w,c
  5511  0019C2  6E13               	movwf	(??___ftadd+4)& (0+255),c
  5512  0019C4  D004               	goto	u2210
  5513  0019C6                     u2215:
  5514  0019C6  90D8               	bcf	status,0,c
  5515  0019C8  3212               	rrcf	??___ftadd+3,f,c
  5516  0019CA  3211               	rrcf	??___ftadd+2,f,c
  5517  0019CC  3210               	rrcf	??___ftadd+1,f,c
  5518  0019CE                     u2210:
  5519  0019CE  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  5520  0019D0  D7FA               	goto	u2215
  5521  0019D2  5010               	movf	??___ftadd+1,w,c
  5522  0019D4  6E16               	movwf	___ftadd@exp1,c
  5523  0019D6  0E0F               	movlw	15
  5524  0019D8  6E0F               	movwf	??___ftadd& (0+255),c
  5525  0019DA  C00C  F010         	movff	___ftadd@f2,??___ftadd+1
  5526  0019DE  C00D  F011         	movff	___ftadd@f2+1,??___ftadd+2
  5527  0019E2  C00E  F012         	movff	___ftadd@f2+2,??___ftadd+3
  5528  0019E6  280F               	incf	??___ftadd,w,c
  5529  0019E8  6E13               	movwf	(??___ftadd+4)& (0+255),c
  5530  0019EA  D004               	goto	u2220
  5531  0019EC                     u2225:
  5532  0019EC  90D8               	bcf	status,0,c
  5533  0019EE  3212               	rrcf	??___ftadd+3,f,c
  5534  0019F0  3211               	rrcf	??___ftadd+2,f,c
  5535  0019F2  3210               	rrcf	??___ftadd+1,f,c
  5536  0019F4                     u2220:
  5537  0019F4  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
  5538  0019F6  D7FA               	goto	u2225
  5539  0019F8  5010               	movf	??___ftadd+1,w,c
  5540  0019FA  6E15               	movwf	___ftadd@exp2,c
  5541  0019FC  5016               	movf	___ftadd@exp1,w,c
  5542  0019FE  B4D8               	btfsc	status,2,c
  5543  001A00  D00B               	goto	l683
  5544  001A02  5015               	movf	___ftadd@exp2,w,c
  5545  001A04  6016               	cpfslt	___ftadd@exp1,c
  5546  001A06  D00F               	goto	l3778
  5547  001A08  5016               	movf	___ftadd@exp1,w,c
  5548  001A0A  0800               	sublw	0
  5549  001A0C  2415               	addwf	___ftadd@exp2,w,c
  5550  001A0E  6E0F               	movwf	??___ftadd& (0+255),c
  5551  001A10  0E19               	movlw	25
  5552  001A12  5C0F               	subwf	??___ftadd,w,c
  5553  001A14  A0D8               	btfss	status,0,c
  5554  001A16  D007               	goto	l3778
  5555  001A18                     l683:
  5556  001A18  C00C  F009         	movff	___ftadd@f2,?___ftadd
  5557  001A1C  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  5558  001A20  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  5559  001A24  D0AA               	goto	l684
  5560  001A26                     l3778:
  5561  001A26  5015               	movf	___ftadd@exp2,w,c
  5562  001A28  B4D8               	btfsc	status,2,c
  5563  001A2A  D00B               	goto	l687
  5564  001A2C  5016               	movf	___ftadd@exp1,w,c
  5565  001A2E  6015               	cpfslt	___ftadd@exp2,c
  5566  001A30  D00F               	goto	l3784
  5567  001A32  5015               	movf	___ftadd@exp2,w,c
  5568  001A34  0800               	sublw	0
  5569  001A36  2416               	addwf	___ftadd@exp1,w,c
  5570  001A38  6E0F               	movwf	??___ftadd& (0+255),c
  5571  001A3A  0E19               	movlw	25
  5572  001A3C  5C0F               	subwf	??___ftadd,w,c
  5573  001A3E  A0D8               	btfss	status,0,c
  5574  001A40  D007               	goto	l3784
  5575  001A42                     l687:
  5576  001A42  C009  F009         	movff	___ftadd@f1,?___ftadd
  5577  001A46  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  5578  001A4A  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  5579  001A4E  D095               	goto	l684
  5580  001A50                     l3784:
  5581  001A50  6E0F               	movwf	??___ftadd& (0+255),c
  5582  001A52  0E06               	movlw	6
  5583  001A54  6E14               	movwf	___ftadd@sign,c
  5584  001A56  500F               	movf	??___ftadd& (0+255),w,c
  5585  001A58  BE0B               	btfsc	___ftadd@f1+2,7,c
  5586  001A5A  8E14               	bsf	___ftadd@sign,7,c
  5587  001A5C  BE0E               	btfsc	___ftadd@f2+2,7,c
  5588  001A5E  8C14               	bsf	___ftadd@sign,6,c
  5589  001A60  8E0A               	bsf	___ftadd@f1+1,7,c
  5590  001A62  0EFF               	movlw	255
  5591  001A64  1609               	andwf	___ftadd@f1,f,c
  5592  001A66  0EFF               	movlw	255
  5593  001A68  160A               	andwf	___ftadd@f1+1,f,c
  5594  001A6A  0E00               	movlw	0
  5595  001A6C  160B               	andwf	___ftadd@f1+2,f,c
  5596  001A6E  8E0D               	bsf	___ftadd@f2+1,7,c
  5597  001A70  0EFF               	movlw	255
  5598  001A72  160C               	andwf	___ftadd@f2,f,c
  5599  001A74  0EFF               	movlw	255
  5600  001A76  160D               	andwf	___ftadd@f2+1,f,c
  5601  001A78  0E00               	movlw	0
  5602  001A7A  160E               	andwf	___ftadd@f2+2,f,c
  5603  001A7C  5015               	movf	___ftadd@exp2,w,c
  5604  001A7E  6016               	cpfslt	___ftadd@exp1,c
  5605  001A80  D018               	goto	l3810
  5606  001A82                     l3800:
  5607  001A82  90D8               	bcf	status,0,c
  5608  001A84  360C               	rlcf	___ftadd@f2,f,c
  5609  001A86  360D               	rlcf	___ftadd@f2+1,f,c
  5610  001A88  360E               	rlcf	___ftadd@f2+2,f,c
  5611  001A8A  0615               	decf	___ftadd@exp2,f,c
  5612  001A8C  5015               	movf	___ftadd@exp2,w,c
  5613  001A8E  1816               	xorwf	___ftadd@exp1,w,c
  5614  001A90  B4D8               	btfsc	status,2,c
  5615  001A92  D00B               	goto	l3808
  5616  001A94  0614               	decf	___ftadd@sign,f,c
  5617  001A96  5014               	movf	___ftadd@sign& (0+255),w,c
  5618  001A98  0B07               	andlw	7
  5619  001A9A  B4D8               	btfsc	status,2,c
  5620  001A9C  D006               	goto	l3808
  5621  001A9E  D7F1               	goto	l3800
  5622  001AA0                     l3806:
  5623  001AA0  90D8               	bcf	status,0,c
  5624  001AA2  320B               	rrcf	___ftadd@f1+2,f,c
  5625  001AA4  320A               	rrcf	___ftadd@f1+1,f,c
  5626  001AA6  3209               	rrcf	___ftadd@f1,f,c
  5627  001AA8  2A16               	incf	___ftadd@exp1,f,c
  5628  001AAA                     l3808:
  5629  001AAA  5015               	movf	___ftadd@exp2,w,c
  5630  001AAC  6216               	cpfseq	___ftadd@exp1,c
  5631  001AAE  D7F8               	goto	l3806
  5632  001AB0  D01A               	goto	l698
  5633  001AB2                     l3810:
  5634  001AB2  5016               	movf	___ftadd@exp1,w,c
  5635  001AB4  6015               	cpfslt	___ftadd@exp2,c
  5636  001AB6  D017               	goto	l698
  5637  001AB8                     l3812:
  5638  001AB8  90D8               	bcf	status,0,c
  5639  001ABA  3609               	rlcf	___ftadd@f1,f,c
  5640  001ABC  360A               	rlcf	___ftadd@f1+1,f,c
  5641  001ABE  360B               	rlcf	___ftadd@f1+2,f,c
  5642  001AC0  0616               	decf	___ftadd@exp1,f,c
  5643  001AC2  5015               	movf	___ftadd@exp2,w,c
  5644  001AC4  1816               	xorwf	___ftadd@exp1,w,c
  5645  001AC6  B4D8               	btfsc	status,2,c
  5646  001AC8  D00B               	goto	l3820
  5647  001ACA  0614               	decf	___ftadd@sign,f,c
  5648  001ACC  5014               	movf	___ftadd@sign& (0+255),w,c
  5649  001ACE  0B07               	andlw	7
  5650  001AD0  B4D8               	btfsc	status,2,c
  5651  001AD2  D006               	goto	l3820
  5652  001AD4  D7F1               	goto	l3812
  5653  001AD6                     l3818:
  5654  001AD6  90D8               	bcf	status,0,c
  5655  001AD8  320E               	rrcf	___ftadd@f2+2,f,c
  5656  001ADA  320D               	rrcf	___ftadd@f2+1,f,c
  5657  001ADC  320C               	rrcf	___ftadd@f2,f,c
  5658  001ADE  2A15               	incf	___ftadd@exp2,f,c
  5659  001AE0                     l3820:
  5660  001AE0  5015               	movf	___ftadd@exp2,w,c
  5661  001AE2  6216               	cpfseq	___ftadd@exp1,c
  5662  001AE4  D7F8               	goto	l3818
  5663  001AE6                     l698:
  5664  001AE6  AE14               	btfss	___ftadd@sign,7,c
  5665  001AE8  D00C               	goto	l707
  5666  001AEA  0EFF               	movlw	255
  5667  001AEC  1A09               	xorwf	___ftadd@f1,f,c
  5668  001AEE  0EFF               	movlw	255
  5669  001AF0  1A0A               	xorwf	___ftadd@f1+1,f,c
  5670  001AF2  0EFF               	movlw	255
  5671  001AF4  1A0B               	xorwf	___ftadd@f1+2,f,c
  5672  001AF6  0E01               	movlw	1
  5673  001AF8  2609               	addwf	___ftadd@f1,f,c
  5674  001AFA  0E00               	movlw	0
  5675  001AFC  220A               	addwfc	___ftadd@f1+1,f,c
  5676  001AFE  0E00               	movlw	0
  5677  001B00  220B               	addwfc	___ftadd@f1+2,f,c
  5678  001B02                     l707:
  5679  001B02  AC14               	btfss	___ftadd@sign,6,c
  5680  001B04  D00C               	goto	l3826
  5681  001B06  0EFF               	movlw	255
  5682  001B08  1A0C               	xorwf	___ftadd@f2,f,c
  5683  001B0A  0EFF               	movlw	255
  5684  001B0C  1A0D               	xorwf	___ftadd@f2+1,f,c
  5685  001B0E  0EFF               	movlw	255
  5686  001B10  1A0E               	xorwf	___ftadd@f2+2,f,c
  5687  001B12  0E01               	movlw	1
  5688  001B14  260C               	addwf	___ftadd@f2,f,c
  5689  001B16  0E00               	movlw	0
  5690  001B18  220D               	addwfc	___ftadd@f2+1,f,c
  5691  001B1A  0E00               	movlw	0
  5692  001B1C  220E               	addwfc	___ftadd@f2+2,f,c
  5693  001B1E                     l3826:
  5694  001B1E  6E0F               	movwf	??___ftadd& (0+255),c
  5695  001B20  0E00               	movlw	0
  5696  001B22  6E14               	movwf	___ftadd@sign,c
  5697  001B24  500F               	movf	??___ftadd& (0+255),w,c
  5698  001B26  5009               	movf	___ftadd@f1,w,c
  5699  001B28  260C               	addwf	___ftadd@f2,f,c
  5700  001B2A  500A               	movf	___ftadd@f1+1,w,c
  5701  001B2C  220D               	addwfc	___ftadd@f2+1,f,c
  5702  001B2E  500B               	movf	___ftadd@f1+2,w,c
  5703  001B30  220E               	addwfc	___ftadd@f2+2,f,c
  5704  001B32  AE0E               	btfss	___ftadd@f2+2,7,c
  5705  001B34  D010               	goto	l3836
  5706  001B36  0EFF               	movlw	255
  5707  001B38  1A0C               	xorwf	___ftadd@f2,f,c
  5708  001B3A  0EFF               	movlw	255
  5709  001B3C  1A0D               	xorwf	___ftadd@f2+1,f,c
  5710  001B3E  0EFF               	movlw	255
  5711  001B40  1A0E               	xorwf	___ftadd@f2+2,f,c
  5712  001B42  0E01               	movlw	1
  5713  001B44  260C               	addwf	___ftadd@f2,f,c
  5714  001B46  0E00               	movlw	0
  5715  001B48  220D               	addwfc	___ftadd@f2+1,f,c
  5716  001B4A  0E00               	movlw	0
  5717  001B4C  220E               	addwfc	___ftadd@f2+2,f,c
  5718  001B4E  6E0F               	movwf	??___ftadd& (0+255),c
  5719  001B50  0E01               	movlw	1
  5720  001B52  6E14               	movwf	___ftadd@sign,c
  5721  001B54  500F               	movf	??___ftadd& (0+255),w,c
  5722  001B56                     l3836:
  5723  001B56  C00C  F001         	movff	___ftadd@f2,?___ftpack
  5724  001B5A  C00D  F002         	movff	___ftadd@f2+1,?___ftpack+1
  5725  001B5E  C00E  F003         	movff	___ftadd@f2+2,?___ftpack+2
  5726  001B62  C016  F004         	movff	___ftadd@exp1,?___ftpack+3
  5727  001B66  C014  F005         	movff	___ftadd@sign,?___ftpack+4
  5728  001B6A  ECA5  F010         	call	___ftpack	;wreg free
  5729  001B6E  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  5730  001B72  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  5731  001B76  C001  F009         	movff	?___ftpack,?___ftadd
  5732  001B7A                     l684:
  5733  001B7A  0012               	return	
  5734  001B7C                     __end_of___ftadd:
  5735                           	opt stack 0
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           prodh	equ	0xFF4
  5741                           prodl	equ	0xFF3
  5742                           intcon	equ	0xFF2
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           postinc1	equ	0xFE6
  5746                           postdec1	equ	0xFE5
  5747                           fsr1l	equ	0xFE1
  5748                           indf2	equ	0xFDF
  5749                           postinc2	equ	0xFDE
  5750                           postdec2	equ	0xFDD
  5751                           fsr2h	equ	0xFDA
  5752                           fsr2l	equ	0xFD9
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function ___ftpack *****************
  5756 ;; Defined at:
  5757 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\float.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  arg             3    0[COMRAM] unsigned um
  5760 ;;  exp             1    3[COMRAM] unsigned char 
  5761 ;;  sign            1    4[COMRAM] unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  3    0[COMRAM] float 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5773 ;;      Params:         5       0       0       0       0       0       0       0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5775 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5776 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5777 ;;Total ram usage:        8 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		___awtoft
  5783 ;;		___ftadd
  5784 ;;		___ftdiv
  5785 ;;		___ftmul
  5786 ;;		___lltoft
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text33
  5791  00214A                     __ptext33:
  5792                           	opt stack 0
  5793  00214A                     ___ftpack:
  5794                           	opt stack 28
  5795                           
  5796                           ;incstack = 0
  5797                           ;incstack = 0
  5798  00214A  5004               	movf	___ftpack@exp,w,c
  5799  00214C  B4D8               	btfsc	status,2,c
  5800  00214E  D005               	goto	l3594
  5801  002150  5001               	movf	___ftpack@arg,w,c
  5802  002152  1002               	iorwf	___ftpack@arg+1,w,c
  5803  002154  1003               	iorwf	___ftpack@arg+2,w,c
  5804  002156  A4D8               	btfss	status,2,c
  5805  002158  D00C               	goto	l3600
  5806  00215A                     l3594:
  5807  00215A  0E00               	movlw	0
  5808  00215C  6E01               	movwf	?___ftpack,c
  5809  00215E  0E00               	movlw	0
  5810  002160  6E02               	movwf	?___ftpack+1,c
  5811  002162  0E00               	movlw	0
  5812  002164  6E03               	movwf	?___ftpack+2,c
  5813  002166  D04C               	goto	l646
  5814  002168                     l3598:
  5815  002168  2A04               	incf	___ftpack@exp,f,c
  5816  00216A  90D8               	bcf	status,0,c
  5817  00216C  3203               	rrcf	___ftpack@arg+2,f,c
  5818  00216E  3202               	rrcf	___ftpack@arg+1,f,c
  5819  002170  3201               	rrcf	___ftpack@arg,f,c
  5820  002172                     l3600:
  5821  002172  0E00               	movlw	0
  5822  002174  1401               	andwf	___ftpack@arg,w,c
  5823  002176  6E06               	movwf	??___ftpack& (0+255),c
  5824  002178  0E00               	movlw	0
  5825  00217A  1402               	andwf	___ftpack@arg+1,w,c
  5826  00217C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5827  00217E  0EFE               	movlw	254
  5828  002180  1403               	andwf	___ftpack@arg+2,w,c
  5829  002182  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5830  002184  5006               	movf	??___ftpack,w,c
  5831  002186  1007               	iorwf	??___ftpack+1,w,c
  5832  002188  1008               	iorwf	??___ftpack+2,w,c
  5833  00218A  B4D8               	btfsc	status,2,c
  5834  00218C  D00C               	goto	l3606
  5835  00218E  D7EC               	goto	l3598
  5836  002190                     l3602:
  5837  002190  2A04               	incf	___ftpack@exp,f,c
  5838  002192  0E01               	movlw	1
  5839  002194  2601               	addwf	___ftpack@arg,f,c
  5840  002196  0E00               	movlw	0
  5841  002198  2202               	addwfc	___ftpack@arg+1,f,c
  5842  00219A  0E00               	movlw	0
  5843  00219C  2203               	addwfc	___ftpack@arg+2,f,c
  5844  00219E  90D8               	bcf	status,0,c
  5845  0021A0  3203               	rrcf	___ftpack@arg+2,f,c
  5846  0021A2  3202               	rrcf	___ftpack@arg+1,f,c
  5847  0021A4  3201               	rrcf	___ftpack@arg,f,c
  5848  0021A6                     l3606:
  5849  0021A6  0E00               	movlw	0
  5850  0021A8  1401               	andwf	___ftpack@arg,w,c
  5851  0021AA  6E06               	movwf	??___ftpack& (0+255),c
  5852  0021AC  0E00               	movlw	0
  5853  0021AE  1402               	andwf	___ftpack@arg+1,w,c
  5854  0021B0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5855  0021B2  0EFF               	movlw	255
  5856  0021B4  1403               	andwf	___ftpack@arg+2,w,c
  5857  0021B6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5858  0021B8  5006               	movf	??___ftpack,w,c
  5859  0021BA  1007               	iorwf	??___ftpack+1,w,c
  5860  0021BC  1008               	iorwf	??___ftpack+2,w,c
  5861  0021BE  B4D8               	btfsc	status,2,c
  5862  0021C0  D006               	goto	l3610
  5863  0021C2  D7E6               	goto	l3602
  5864  0021C4                     l3608:
  5865  0021C4  0604               	decf	___ftpack@exp,f,c
  5866  0021C6  90D8               	bcf	status,0,c
  5867  0021C8  3601               	rlcf	___ftpack@arg,f,c
  5868  0021CA  3602               	rlcf	___ftpack@arg+1,f,c
  5869  0021CC  3603               	rlcf	___ftpack@arg+2,f,c
  5870  0021CE                     l3610:
  5871  0021CE  AE02               	btfss	___ftpack@arg+1,7,c
  5872  0021D0  D7F9               	goto	l3608
  5873  0021D2  A004               	btfss	___ftpack@exp,0,c
  5874  0021D4  9E02               	bcf	___ftpack@arg+1,7,c
  5875  0021D6  90D8               	bcf	status,0,c
  5876  0021D8  3204               	rrcf	___ftpack@exp,f,c
  5877  0021DA  5004               	movf	___ftpack@exp,w,c
  5878  0021DC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5879  0021DE  6A07               	clrf	(??___ftpack+1)& (0+255),c
  5880  0021E0  6A06               	clrf	??___ftpack& (0+255),c
  5881  0021E2  5006               	movf	??___ftpack,w,c
  5882  0021E4  1201               	iorwf	___ftpack@arg,f,c
  5883  0021E6  5007               	movf	??___ftpack+1,w,c
  5884  0021E8  1202               	iorwf	___ftpack@arg+1,f,c
  5885  0021EA  5008               	movf	??___ftpack+2,w,c
  5886  0021EC  1203               	iorwf	___ftpack@arg+2,f,c
  5887  0021EE  5005               	movf	___ftpack@sign,w,c
  5888  0021F0  A4D8               	btfss	status,2,c
  5889  0021F2  8E03               	bsf	___ftpack@arg+2,7,c
  5890  0021F4  C001  F001         	movff	___ftpack@arg,?___ftpack
  5891  0021F8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5892  0021FC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5893  002200                     l646:
  5894  002200  0012               	return	
  5895  002202                     __end_of___ftpack:
  5896                           	opt stack 0
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           postinc0	equ	0xFEE
  5905                           wreg	equ	0xFE8
  5906                           postinc1	equ	0xFE6
  5907                           postdec1	equ	0xFE5
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function __div_to_l_ *****************
  5917 ;; Defined at:
  5918 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldivl.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  f1              3    0[COMRAM] float 
  5921 ;;  f2              3    3[COMRAM] float 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  quot            4    7[COMRAM] unsigned long 
  5924 ;;  exp1            1   12[COMRAM] unsigned char 
  5925 ;;  cntr            1   11[COMRAM] unsigned char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  4    0[COMRAM] unsigned long 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5935 ;;      Params:         6       0       0       0       0       0       0       0       0
  5936 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5937 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5938 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5939 ;;Total ram usage:       13 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_sprintf
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text34
  5949  001EAC                     __ptext34:
  5950                           	opt stack 0
  5951  001EAC                     __div_to_l_:
  5952                           	opt stack 28
  5953                           
  5954                           ;incstack = 0
  5955                           ;incstack = 0
  5956  001EAC  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  5957  001EAE  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  5958  001EB0  6E0D               	movwf	__div_to_l_@exp1,c
  5959  001EB2  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  5960  001EB4  D001               	goto	l3540
  5961  001EB6  D05A               	goto	u1910
  5962  001EB8                     l3540:
  5963  001EB8  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  5964  001EBA  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  5965  001EBC  6E0C               	movwf	__div_to_l_@cntr,c
  5966  001EBE  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  5967  001EC0  D001               	goto	l3546
  5968  001EC2  D054               	goto	u1910
  5969  001EC4                     l3546:
  5970  001EC4  8E03               	bsf	__div_to_l_@f1+2,7,c
  5971  001EC6  0EFF               	movlw	255
  5972  001EC8  1601               	andwf	__div_to_l_@f1,f,c
  5973  001ECA  0EFF               	movlw	255
  5974  001ECC  1602               	andwf	__div_to_l_@f1+1,f,c
  5975  001ECE  0EFF               	movlw	255
  5976  001ED0  1603               	andwf	__div_to_l_@f1+2,f,c
  5977  001ED2  0E00               	movlw	0
  5978  001ED4  1604               	andwf	__div_to_l_@f1+3,f,c
  5979  001ED6  8E06               	bsf	__div_to_l_@f2+2,7,c
  5980  001ED8  0EFF               	movlw	255
  5981  001EDA  1604               	andwf	__div_to_l_@f2,f,c
  5982  001EDC  0EFF               	movlw	255
  5983  001EDE  1605               	andwf	__div_to_l_@f2+1,f,c
  5984  001EE0  0EFF               	movlw	255
  5985  001EE2  1606               	andwf	__div_to_l_@f2+2,f,c
  5986  001EE4  0E00               	movlw	0
  5987  001EE6  1607               	andwf	__div_to_l_@f2+3,f,c
  5988  001EE8  0E00               	movlw	0
  5989  001EEA  6E08               	movwf	__div_to_l_@quot,c
  5990  001EEC  0E00               	movlw	0
  5991  001EEE  6E09               	movwf	__div_to_l_@quot+1,c
  5992  001EF0  0E00               	movlw	0
  5993  001EF2  6E0A               	movwf	__div_to_l_@quot+2,c
  5994  001EF4  0E00               	movlw	0
  5995  001EF6  6E0B               	movwf	__div_to_l_@quot+3,c
  5996  001EF8  0E7F               	movlw	127
  5997  001EFA  5E0D               	subwf	__div_to_l_@exp1,f,c
  5998  001EFC  500C               	movf	__div_to_l_@cntr,w,c
  5999  001EFE  0FA0               	addlw	160
  6000  001F00  5E0D               	subwf	__div_to_l_@exp1,f,c
  6001  001F02  6E07               	movwf	??__div_to_l_& (0+255),c
  6002  001F04  0E20               	movlw	32
  6003  001F06  6E0C               	movwf	__div_to_l_@cntr,c
  6004  001F08  5007               	movf	??__div_to_l_& (0+255),w,c
  6005  001F0A                     l607:
  6006  001F0A  90D8               	bcf	status,0,c
  6007  001F0C  3608               	rlcf	__div_to_l_@quot,f,c
  6008  001F0E  3609               	rlcf	__div_to_l_@quot+1,f,c
  6009  001F10  360A               	rlcf	__div_to_l_@quot+2,f,c
  6010  001F12  360B               	rlcf	__div_to_l_@quot+3,f,c
  6011  001F14  5004               	movf	__div_to_l_@f2,w,c
  6012  001F16  5C01               	subwf	__div_to_l_@f1,w,c
  6013  001F18  5005               	movf	__div_to_l_@f2+1,w,c
  6014  001F1A  5802               	subwfb	__div_to_l_@f1+1,w,c
  6015  001F1C  5006               	movf	__div_to_l_@f2+2,w,c
  6016  001F1E  5803               	subwfb	__div_to_l_@f1+2,w,c
  6017  001F20  5007               	movf	__div_to_l_@f2+3,w,c
  6018  001F22  5804               	subwfb	__div_to_l_@f1+3,w,c
  6019  001F24  A0D8               	btfss	status,0,c
  6020  001F26  D009               	goto	l3566
  6021  001F28  5004               	movf	__div_to_l_@f2,w,c
  6022  001F2A  5E01               	subwf	__div_to_l_@f1,f,c
  6023  001F2C  5005               	movf	__div_to_l_@f2+1,w,c
  6024  001F2E  5A02               	subwfb	__div_to_l_@f1+1,f,c
  6025  001F30  5006               	movf	__div_to_l_@f2+2,w,c
  6026  001F32  5A03               	subwfb	__div_to_l_@f1+2,f,c
  6027  001F34  5007               	movf	__div_to_l_@f2+3,w,c
  6028  001F36  5A04               	subwfb	__div_to_l_@f1+3,f,c
  6029  001F38  8008               	bsf	__div_to_l_@quot,0,c
  6030  001F3A                     l3566:
  6031  001F3A  90D8               	bcf	status,0,c
  6032  001F3C  3601               	rlcf	__div_to_l_@f1,f,c
  6033  001F3E  3602               	rlcf	__div_to_l_@f1+1,f,c
  6034  001F40  3603               	rlcf	__div_to_l_@f1+2,f,c
  6035  001F42  3604               	rlcf	__div_to_l_@f1+3,f,c
  6036  001F44  2E0C               	decfsz	__div_to_l_@cntr,f,c
  6037  001F46  D7E1               	goto	l607
  6038  001F48  AE0D               	btfss	__div_to_l_@exp1,7,c
  6039  001F4A  D00D               	goto	l3580
  6040  001F4C  500D               	movf	__div_to_l_@exp1,w,c
  6041  001F4E  0A80               	xorlw	128
  6042  001F50  0F9F               	addlw	159
  6043  001F52  A0D8               	btfss	status,0,c
  6044  001F54  D00B               	goto	u1910
  6045  001F56                     l3576:
  6046  001F56  90D8               	bcf	status,0,c
  6047  001F58  320B               	rrcf	__div_to_l_@quot+3,f,c
  6048  001F5A  320A               	rrcf	__div_to_l_@quot+2,f,c
  6049  001F5C  3209               	rrcf	__div_to_l_@quot+1,f,c
  6050  001F5E  3208               	rrcf	__div_to_l_@quot,f,c
  6051  001F60  3E0D               	incfsz	__div_to_l_@exp1,f,c
  6052  001F62  D7F9               	goto	l3576
  6053  001F64  D014               	goto	l614
  6054  001F66                     l3580:
  6055  001F66  0E1F               	movlw	31
  6056  001F68  640D               	cpfsgt	__div_to_l_@exp1,c
  6057  001F6A  D00F               	goto	l3588
  6058  001F6C                     u1910:
  6059  001F6C  0E00               	movlw	0
  6060  001F6E  6E01               	movwf	?__div_to_l_,c
  6061  001F70  0E00               	movlw	0
  6062  001F72  6E02               	movwf	?__div_to_l_+1,c
  6063  001F74  0E00               	movlw	0
  6064  001F76  6E03               	movwf	?__div_to_l_+2,c
  6065  001F78  0E00               	movlw	0
  6066  001F7A  6E04               	movwf	?__div_to_l_+3,c
  6067  001F7C  D010               	goto	l605
  6068  001F7E                     l3586:
  6069  001F7E  90D8               	bcf	status,0,c
  6070  001F80  3608               	rlcf	__div_to_l_@quot,f,c
  6071  001F82  3609               	rlcf	__div_to_l_@quot+1,f,c
  6072  001F84  360A               	rlcf	__div_to_l_@quot+2,f,c
  6073  001F86  360B               	rlcf	__div_to_l_@quot+3,f,c
  6074  001F88  060D               	decf	__div_to_l_@exp1,f,c
  6075  001F8A                     l3588:
  6076  001F8A  660D               	tstfsz	__div_to_l_@exp1,c
  6077  001F8C  D7F8               	goto	l3586
  6078  001F8E                     l614:
  6079  001F8E  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6080  001F92  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6081  001F96  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6082  001F9A  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6083  001F9E                     l605:
  6084  001F9E  0012               	return	
  6085  001FA0                     __end_of__div_to_l_:
  6086                           	opt stack 0
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           intcon	equ	0xFF2
  6094                           postinc0	equ	0xFEE
  6095                           wreg	equ	0xFE8
  6096                           postinc1	equ	0xFE6
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function __tdiv_to_l_ *****************
  6107 ;; Defined at:
  6108 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdivl.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  f1              3    0[COMRAM] float 
  6111 ;;  f2              3    3[COMRAM] float 
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  quot            4   11[COMRAM] unsigned long 
  6114 ;;  exp1            1   16[COMRAM] unsigned char 
  6115 ;;  cntr            1   15[COMRAM] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  4    0[COMRAM] unsigned long 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2, status,0
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6125 ;;      Params:         6       0       0       0       0       0       0       0       0
  6126 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6127 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6128 ;;      Totals:        17       0       0       0       0       0       0       0       0
  6129 ;;Total ram usage:       17 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; This function calls:
  6132 ;;		Nothing
  6133 ;; This function is called by:
  6134 ;;		_sprintf
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           	psect	text35
  6139  001B7C                     __ptext35:
  6140                           	opt stack 0
  6141  001B7C                     __tdiv_to_l_:
  6142                           	opt stack 28
  6143                           
  6144                           ;incstack = 0
  6145                           ;incstack = 0
  6146  001B7C  0E0F               	movlw	15
  6147  001B7E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  6148  001B80  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  6149  001B84  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  6150  001B88  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  6151  001B8C  2807               	incf	??__tdiv_to_l_,w,c
  6152  001B8E  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  6153  001B90  D004               	goto	u1770
  6154  001B92                     u1775:
  6155  001B92  90D8               	bcf	status,0,c
  6156  001B94  320A               	rrcf	??__tdiv_to_l_+3,f,c
  6157  001B96  3209               	rrcf	??__tdiv_to_l_+2,f,c
  6158  001B98  3208               	rrcf	??__tdiv_to_l_+1,f,c
  6159  001B9A                     u1770:
  6160  001B9A  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  6161  001B9C  D7FA               	goto	u1775
  6162  001B9E  5008               	movf	??__tdiv_to_l_+1,w,c
  6163  001BA0  6E11               	movwf	__tdiv_to_l_@exp1,c
  6164  001BA2  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  6165  001BA4  D001               	goto	l3484
  6166  001BA6  D061               	goto	u1840
  6167  001BA8                     l3484:
  6168  001BA8  0E0F               	movlw	15
  6169  001BAA  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  6170  001BAC  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  6171  001BB0  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  6172  001BB4  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  6173  001BB8  2807               	incf	??__tdiv_to_l_,w,c
  6174  001BBA  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  6175  001BBC  D004               	goto	u1790
  6176  001BBE                     u1795:
  6177  001BBE  90D8               	bcf	status,0,c
  6178  001BC0  320A               	rrcf	??__tdiv_to_l_+3,f,c
  6179  001BC2  3209               	rrcf	??__tdiv_to_l_+2,f,c
  6180  001BC4  3208               	rrcf	??__tdiv_to_l_+1,f,c
  6181  001BC6                     u1790:
  6182  001BC6  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  6183  001BC8  D7FA               	goto	u1795
  6184  001BCA  5008               	movf	??__tdiv_to_l_+1,w,c
  6185  001BCC  6E10               	movwf	__tdiv_to_l_@cntr,c
  6186  001BCE  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  6187  001BD0  D001               	goto	l3490
  6188  001BD2  D04B               	goto	u1840
  6189  001BD4                     l3490:
  6190  001BD4  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  6191  001BD6  0EFF               	movlw	255
  6192  001BD8  1601               	andwf	__tdiv_to_l_@f1,f,c
  6193  001BDA  0EFF               	movlw	255
  6194  001BDC  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  6195  001BDE  0E00               	movlw	0
  6196  001BE0  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  6197  001BE2  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  6198  001BE4  0EFF               	movlw	255
  6199  001BE6  1604               	andwf	__tdiv_to_l_@f2,f,c
  6200  001BE8  0EFF               	movlw	255
  6201  001BEA  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  6202  001BEC  0E00               	movlw	0
  6203  001BEE  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  6204  001BF0  0E00               	movlw	0
  6205  001BF2  6E0C               	movwf	__tdiv_to_l_@quot,c
  6206  001BF4  0E00               	movlw	0
  6207  001BF6  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  6208  001BF8  0E00               	movlw	0
  6209  001BFA  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  6210  001BFC  0E00               	movlw	0
  6211  001BFE  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  6212  001C00  0E7F               	movlw	127
  6213  001C02  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  6214  001C04  5010               	movf	__tdiv_to_l_@cntr,w,c
  6215  001C06  0F98               	addlw	152
  6216  001C08  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  6217  001C0A  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  6218  001C0C  0E18               	movlw	24
  6219  001C0E  6E10               	movwf	__tdiv_to_l_@cntr,c
  6220  001C10  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  6221  001C12                     l3504:
  6222  001C12  90D8               	bcf	status,0,c
  6223  001C14  360C               	rlcf	__tdiv_to_l_@quot,f,c
  6224  001C16  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6225  001C18  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6226  001C1A  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6227  001C1C  5004               	movf	__tdiv_to_l_@f2,w,c
  6228  001C1E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  6229  001C20  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6230  001C22  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  6231  001C24  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6232  001C26  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  6233  001C28  A0D8               	btfss	status,0,c
  6234  001C2A  D007               	goto	l726
  6235  001C2C  5004               	movf	__tdiv_to_l_@f2,w,c
  6236  001C2E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  6237  001C30  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6238  001C32  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  6239  001C34  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6240  001C36  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  6241  001C38  800C               	bsf	__tdiv_to_l_@quot,0,c
  6242  001C3A                     l726:
  6243  001C3A  90D8               	bcf	status,0,c
  6244  001C3C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  6245  001C3E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  6246  001C40  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  6247  001C42  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  6248  001C44  D7E6               	goto	l3504
  6249  001C46  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  6250  001C48  D00D               	goto	l3524
  6251  001C4A  5011               	movf	__tdiv_to_l_@exp1,w,c
  6252  001C4C  0A80               	xorlw	128
  6253  001C4E  0F97               	addlw	151
  6254  001C50  A0D8               	btfss	status,0,c
  6255  001C52  D00B               	goto	u1840
  6256  001C54                     l3520:
  6257  001C54  90D8               	bcf	status,0,c
  6258  001C56  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  6259  001C58  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  6260  001C5A  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  6261  001C5C  320C               	rrcf	__tdiv_to_l_@quot,f,c
  6262  001C5E  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  6263  001C60  D7F9               	goto	l3520
  6264  001C62  D014               	goto	l732
  6265  001C64                     l3524:
  6266  001C64  0E17               	movlw	23
  6267  001C66  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  6268  001C68  D00F               	goto	l3532
  6269  001C6A                     u1840:
  6270  001C6A  0E00               	movlw	0
  6271  001C6C  6E01               	movwf	?__tdiv_to_l_,c
  6272  001C6E  0E00               	movlw	0
  6273  001C70  6E02               	movwf	?__tdiv_to_l_+1,c
  6274  001C72  0E00               	movlw	0
  6275  001C74  6E03               	movwf	?__tdiv_to_l_+2,c
  6276  001C76  0E00               	movlw	0
  6277  001C78  6E04               	movwf	?__tdiv_to_l_+3,c
  6278  001C7A  D010               	goto	l723
  6279  001C7C                     l3530:
  6280  001C7C  90D8               	bcf	status,0,c
  6281  001C7E  360C               	rlcf	__tdiv_to_l_@quot,f,c
  6282  001C80  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6283  001C82  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6284  001C84  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6285  001C86  0611               	decf	__tdiv_to_l_@exp1,f,c
  6286  001C88                     l3532:
  6287  001C88  6611               	tstfsz	__tdiv_to_l_@exp1,c
  6288  001C8A  D7F8               	goto	l3530
  6289  001C8C                     l732:
  6290  001C8C  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6291  001C90  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6292  001C94  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6293  001C98  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6294  001C9C                     l723:
  6295  001C9C  0012               	return	
  6296  001C9E                     __end_of__tdiv_to_l_:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postinc1	equ	0xFE6
  6308                           postdec1	equ	0xFE5
  6309                           fsr1l	equ	0xFE1
  6310                           indf2	equ	0xFDF
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _isdigit *****************
  6318 ;; Defined at:
  6319 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  c               1    0[COMRAM] unsigned char 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;		None               void
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6333 ;;      Params:         1       0       0       0       0       0       0       0       0
  6334 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6335 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6336 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6337 ;;Total ram usage:        3 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_sprintf
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text36
  6347  002942                     __ptext36:
  6348                           	opt stack 0
  6349  002942                     _isdigit:
  6350                           	opt stack 28
  6351                           
  6352                           ;incstack = 0
  6353                           ;incstack = 0
  6354  002942  6E02               	movwf	??_isdigit& (0+255),c
  6355  002944  0E00               	movlw	0
  6356  002946  6E03               	movwf	_isdigit$1071,c
  6357  002948  5002               	movf	??_isdigit& (0+255),w,c
  6358  00294A  0E3A               	movlw	58
  6359  00294C  6001               	cpfslt	isdigit@c,c
  6360  00294E  D007               	goto	l3474
  6361  002950  0E2F               	movlw	47
  6362  002952  6401               	cpfsgt	isdigit@c,c
  6363  002954  D004               	goto	l3474
  6364  002956  6E02               	movwf	??_isdigit& (0+255),c
  6365  002958  0E01               	movlw	1
  6366  00295A  6E03               	movwf	_isdigit$1071,c
  6367  00295C  5002               	movf	??_isdigit& (0+255),w,c
  6368  00295E                     l3474:
  6369  00295E  C003  F002         	movff	_isdigit$1071,??_isdigit
  6370  002962  3002               	rrcf	??_isdigit,w,c
  6371  002964  0012               	return	
  6372  002966                     __end_of_isdigit:
  6373                           	opt stack 0
  6374                           tblptru	equ	0xFF8
  6375                           tblptrh	equ	0xFF7
  6376                           tblptrl	equ	0xFF6
  6377                           tablat	equ	0xFF5
  6378                           prodh	equ	0xFF4
  6379                           prodl	equ	0xFF3
  6380                           intcon	equ	0xFF2
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           postinc1	equ	0xFE6
  6384                           postdec1	equ	0xFE5
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _scale *****************
  6394 ;; Defined at:
  6395 ;;		line 426 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;  scl             1   54[COMRAM] char 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  3   54[COMRAM] char 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6409 ;;      Params:         3       0       0       0       0       0       0       0       0
  6410 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6411 ;;      Temps:          6       0       0       0       0       0       0       0       0
  6412 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6413 ;;Total ram usage:       12 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    2
  6416 ;; This function calls:
  6417 ;;		___ftmul
  6418 ;;		___awdiv
  6419 ;;		___awmod
  6420 ;;		___wmul
  6421 ;; This function is called by:
  6422 ;;		_sprintf
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text37
  6427  0012E0                     __ptext37:
  6428                           	opt stack 0
  6429  0012E0                     _scale:
  6430                           	opt stack 26
  6431                           
  6432                           ;doprnt.c: 428: if(scl < 0) {
  6433                           
  6434                           ;incstack = 0
  6435                           ;incstack = 0
  6436  0012E0  AE37               	btfss	scale@scl,7,c
  6437  0012E2  D108               	goto	l4156
  6438                           
  6439                           ;doprnt.c: 429: scl = -scl;
  6440  0012E4  6C37               	negf	scale@scl,c
  6441                           
  6442                           ;doprnt.c: 430: if(scl>=110)
  6443  0012E6  5037               	movf	scale@scl,w,c
  6444  0012E8  0A80               	xorlw	128
  6445  0012EA  0F12               	addlw	-238
  6446  0012EC  A0D8               	btfss	status,0,c
  6447  0012EE  D09D               	goto	l4146
  6448                           
  6449                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6450  0012F0  0E00               	movlw	0
  6451  0012F2  6E14               	movwf	?___wmul+3,c
  6452  0012F4  0E03               	movlw	3
  6453  0012F6  6E13               	movwf	?___wmul+2,c
  6454  0012F8  0E00               	movlw	0
  6455  0012FA  6E0B               	movwf	?___awdiv+3,c
  6456  0012FC  0E0A               	movlw	10
  6457  0012FE  6E0A               	movwf	?___awdiv+2,c
  6458  001300  0E00               	movlw	0
  6459  001302  6E04               	movwf	?___awmod+3,c
  6460  001304  0E64               	movlw	100
  6461  001306  6E03               	movwf	?___awmod+2,c
  6462  001308  5037               	movf	scale@scl,w,c
  6463  00130A  6E01               	movwf	?___awmod,c
  6464  00130C  6A02               	clrf	?___awmod+1,c
  6465  00130E  BE01               	btfsc	?___awmod,7,c
  6466  001310  0602               	decf	?___awmod+1,f,c
  6467  001312  EC12  F012         	call	___awmod	;wreg free
  6468  001316  C001  F008         	movff	?___awmod,?___awdiv
  6469  00131A  C002  F009         	movff	?___awmod+1,?___awdiv+1
  6470  00131E  EC49  F011         	call	___awdiv	;wreg free
  6471  001322  0E09               	movlw	9
  6472  001324  2408               	addwf	?___awdiv,w,c
  6473  001326  6E11               	movwf	?___wmul,c
  6474  001328  0E00               	movlw	0
  6475  00132A  2009               	addwfc	?___awdiv+1,w,c
  6476  00132C  6E12               	movwf	?___wmul+1,c
  6477  00132E  EC3E  F014         	call	___wmul	;wreg free
  6478  001332  0E28               	movlw	low __npowers_
  6479  001334  2411               	addwf	?___wmul,w,c
  6480  001336  6EF6               	movwf	tblptrl,c
  6481  001338  0E08               	movlw	high __npowers_
  6482  00133A  2012               	addwfc	?___wmul+1,w,c
  6483  00133C  6EF7               	movwf	tblptrh,c
  6484  00133E  0009               	tblrd		*+
  6485  001340  CFF5 F03A          	movff	tablat,??_scale
  6486  001344  0009               	tblrd		*+
  6487  001346  CFF5 F03B          	movff	tablat,??_scale+1
  6488  00134A  0009               	tblrd		*+
  6489  00134C  CFF5 F03C          	movff	tablat,??_scale+2
  6490  001350  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  6491  001354  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  6492  001358  C03A  F029         	movff	??_scale,?___ftmul+3
  6493  00135C  0E00               	movlw	0
  6494  00135E  6E14               	movwf	?___wmul+3,c
  6495  001360  0E03               	movlw	3
  6496  001362  6E13               	movwf	?___wmul+2,c
  6497  001364  0E00               	movlw	0
  6498  001366  6E0B               	movwf	?___awdiv+3,c
  6499  001368  0E64               	movlw	100
  6500  00136A  6E0A               	movwf	?___awdiv+2,c
  6501  00136C  5037               	movf	scale@scl,w,c
  6502  00136E  6E08               	movwf	?___awdiv,c
  6503  001370  6A09               	clrf	?___awdiv+1,c
  6504  001372  BE08               	btfsc	?___awdiv,7,c
  6505  001374  0609               	decf	?___awdiv+1,f,c
  6506  001376  EC49  F011         	call	___awdiv	;wreg free
  6507  00137A  0E12               	movlw	18
  6508  00137C  2408               	addwf	?___awdiv,w,c
  6509  00137E  6E11               	movwf	?___wmul,c
  6510  001380  0E00               	movlw	0
  6511  001382  2009               	addwfc	?___awdiv+1,w,c
  6512  001384  6E12               	movwf	?___wmul+1,c
  6513  001386  EC3E  F014         	call	___wmul	;wreg free
  6514  00138A  0E28               	movlw	low __npowers_
  6515  00138C  2411               	addwf	?___wmul,w,c
  6516  00138E  6EF6               	movwf	tblptrl,c
  6517  001390  0E08               	movlw	high __npowers_
  6518  001392  2012               	addwfc	?___wmul+1,w,c
  6519  001394  6EF7               	movwf	tblptrh,c
  6520  001396  0009               	tblrd		*+
  6521  001398  CFF5 F03D          	movff	tablat,??_scale+3
  6522  00139C  0009               	tblrd		*+
  6523  00139E  CFF5 F03E          	movff	tablat,??_scale+4
  6524  0013A2  0009               	tblrd		*+
  6525  0013A4  CFF5 F03F          	movff	tablat,??_scale+5
  6526  0013A8  C03F  F028         	movff	??_scale+5,?___ftmul+2
  6527  0013AC  C03E  F027         	movff	??_scale+4,?___ftmul+1
  6528  0013B0  C03D  F026         	movff	??_scale+3,?___ftmul
  6529  0013B4  EC4F  F00E         	call	___ftmul	;wreg free
  6530  0013B8  C028  F042         	movff	?___ftmul+2,_scale$1408+2
  6531  0013BC  C027  F041         	movff	?___ftmul+1,_scale$1408+1
  6532  0013C0  C026  F040         	movff	?___ftmul,_scale$1408
  6533                           
  6534                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6535  0013C4  C040  F026         	movff	_scale$1408,?___ftmul
  6536  0013C8  C041  F027         	movff	_scale$1408+1,?___ftmul+1
  6537  0013CC  C042  F028         	movff	_scale$1408+2,?___ftmul+2
  6538  0013D0  0E00               	movlw	0
  6539  0013D2  6E14               	movwf	?___wmul+3,c
  6540  0013D4  0E03               	movlw	3
  6541  0013D6  6E13               	movwf	?___wmul+2,c
  6542  0013D8  0E00               	movlw	0
  6543  0013DA  6E04               	movwf	?___awmod+3,c
  6544  0013DC  0E0A               	movlw	10
  6545  0013DE  6E03               	movwf	?___awmod+2,c
  6546  0013E0  5037               	movf	scale@scl,w,c
  6547  0013E2  6E01               	movwf	?___awmod,c
  6548  0013E4  6A02               	clrf	?___awmod+1,c
  6549  0013E6  BE01               	btfsc	?___awmod,7,c
  6550  0013E8  0602               	decf	?___awmod+1,f,c
  6551  0013EA  EC12  F012         	call	___awmod	;wreg free
  6552  0013EE  C001  F011         	movff	?___awmod,?___wmul
  6553  0013F2  C002  F012         	movff	?___awmod+1,?___wmul+1
  6554  0013F6  EC3E  F014         	call	___wmul	;wreg free
  6555  0013FA  0E28               	movlw	low __npowers_
  6556  0013FC  2411               	addwf	?___wmul,w,c
  6557  0013FE  6EF6               	movwf	tblptrl,c
  6558  001400  0E08               	movlw	high __npowers_
  6559  001402  2012               	addwfc	?___wmul+1,w,c
  6560  001404  6EF7               	movwf	tblptrh,c
  6561  001406  0009               	tblrd		*+
  6562  001408  CFF5 F03A          	movff	tablat,??_scale
  6563  00140C  0009               	tblrd		*+
  6564  00140E  CFF5 F03B          	movff	tablat,??_scale+1
  6565  001412  0009               	tblrd		*+
  6566  001414  CFF5 F03C          	movff	tablat,??_scale+2
  6567  001418  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  6568  00141C  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  6569  001420  C03A  F029         	movff	??_scale,?___ftmul+3
  6570  001424  EC4F  F00E         	call	___ftmul	;wreg free
  6571  001428  D164               	goto	L11
  6572  00142A                     l4146:
  6573                           
  6574                           ;doprnt.c: 432: else if(scl > 10)
  6575  00142A  5037               	movf	scale@scl,w,c
  6576  00142C  0A80               	xorlw	128
  6577  00142E  0F75               	addlw	-139
  6578  001430  A0D8               	btfss	status,0,c
  6579  001432  D059               	goto	l4152
  6580                           
  6581                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6582  001434  0E00               	movlw	0
  6583  001436  6E14               	movwf	?___wmul+3,c
  6584  001438  0E03               	movlw	3
  6585  00143A  6E13               	movwf	?___wmul+2,c
  6586  00143C  0E00               	movlw	0
  6587  00143E  6E0B               	movwf	?___awdiv+3,c
  6588  001440  0E0A               	movlw	10
  6589  001442  6E0A               	movwf	?___awdiv+2,c
  6590  001444  5037               	movf	scale@scl,w,c
  6591  001446  6E08               	movwf	?___awdiv,c
  6592  001448  6A09               	clrf	?___awdiv+1,c
  6593  00144A  BE08               	btfsc	?___awdiv,7,c
  6594  00144C  0609               	decf	?___awdiv+1,f,c
  6595  00144E  EC49  F011         	call	___awdiv	;wreg free
  6596  001452  0E09               	movlw	9
  6597  001454  2408               	addwf	?___awdiv,w,c
  6598  001456  6E11               	movwf	?___wmul,c
  6599  001458  0E00               	movlw	0
  6600  00145A  2009               	addwfc	?___awdiv+1,w,c
  6601  00145C  6E12               	movwf	?___wmul+1,c
  6602  00145E  EC3E  F014         	call	___wmul	;wreg free
  6603  001462  0E28               	movlw	low __npowers_
  6604  001464  2411               	addwf	?___wmul,w,c
  6605  001466  6EF6               	movwf	tblptrl,c
  6606  001468  0E08               	movlw	high __npowers_
  6607  00146A  2012               	addwfc	?___wmul+1,w,c
  6608  00146C  6EF7               	movwf	tblptrh,c
  6609  00146E  0009               	tblrd		*+
  6610  001470  CFF5 F03A          	movff	tablat,??_scale
  6611  001474  0009               	tblrd		*+
  6612  001476  CFF5 F03B          	movff	tablat,??_scale+1
  6613  00147A  0009               	tblrd		*+
  6614  00147C  CFF5 F03C          	movff	tablat,??_scale+2
  6615  001480  C03C  F028         	movff	??_scale+2,?___ftmul+2
  6616  001484  C03B  F027         	movff	??_scale+1,?___ftmul+1
  6617  001488  C03A  F026         	movff	??_scale,?___ftmul
  6618  00148C  0E00               	movlw	0
  6619  00148E  6E14               	movwf	?___wmul+3,c
  6620  001490  0E03               	movlw	3
  6621  001492  6E13               	movwf	?___wmul+2,c
  6622  001494  0E00               	movlw	0
  6623  001496  6E04               	movwf	?___awmod+3,c
  6624  001498  0E0A               	movlw	10
  6625  00149A  6E03               	movwf	?___awmod+2,c
  6626  00149C  5037               	movf	scale@scl,w,c
  6627  00149E  6E01               	movwf	?___awmod,c
  6628  0014A0  6A02               	clrf	?___awmod+1,c
  6629  0014A2  BE01               	btfsc	?___awmod,7,c
  6630  0014A4  0602               	decf	?___awmod+1,f,c
  6631  0014A6  EC12  F012         	call	___awmod	;wreg free
  6632  0014AA  C001  F011         	movff	?___awmod,?___wmul
  6633  0014AE  C002  F012         	movff	?___awmod+1,?___wmul+1
  6634  0014B2  EC3E  F014         	call	___wmul	;wreg free
  6635  0014B6  0E28               	movlw	low __npowers_
  6636  0014B8  2411               	addwf	?___wmul,w,c
  6637  0014BA  6EF6               	movwf	tblptrl,c
  6638  0014BC  0E08               	movlw	high __npowers_
  6639  0014BE  2012               	addwfc	?___wmul+1,w,c
  6640  0014C0  6EF7               	movwf	tblptrh,c
  6641  0014C2  0009               	tblrd		*+
  6642  0014C4  CFF5 F03D          	movff	tablat,??_scale+3
  6643  0014C8  0009               	tblrd		*+
  6644  0014CA  CFF5 F03E          	movff	tablat,??_scale+4
  6645  0014CE  0009               	tblrd		*+
  6646  0014D0  CFF5 F03F          	movff	tablat,??_scale+5
  6647  0014D4  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  6648  0014D8  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  6649  0014DC  C03D  F029         	movff	??_scale+3,?___ftmul+3
  6650  0014E0  EC4F  F00E         	call	___ftmul	;wreg free
  6651  0014E4  D106               	goto	L11
  6652  0014E6                     l4152:
  6653                           
  6654                           ;doprnt.c: 434: return _npowers_[scl];
  6655  0014E6  5037               	movf	scale@scl,w,c
  6656  0014E8  0D03               	mullw	3
  6657  0014EA  0E28               	movlw	low __npowers_
  6658  0014EC  24F3               	addwf	prodl,w,c
  6659  0014EE  6EF6               	movwf	tblptrl,c
  6660  0014F0  0E08               	movlw	high __npowers_
  6661  0014F2  D10C               	goto	L10
  6662  0014F4                     l4156:
  6663                           
  6664                           ;doprnt.c: 435: }
  6665                           ;doprnt.c: 436: if(scl>=110)
  6666  0014F4  5037               	movf	scale@scl,w,c
  6667  0014F6  0A80               	xorlw	128
  6668  0014F8  0F12               	addlw	-238
  6669  0014FA  A0D8               	btfss	status,0,c
  6670  0014FC  D09D               	goto	l4164
  6671                           
  6672                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6673  0014FE  0E00               	movlw	0
  6674  001500  6E14               	movwf	?___wmul+3,c
  6675  001502  0E03               	movlw	3
  6676  001504  6E13               	movwf	?___wmul+2,c
  6677  001506  0E00               	movlw	0
  6678  001508  6E0B               	movwf	?___awdiv+3,c
  6679  00150A  0E0A               	movlw	10
  6680  00150C  6E0A               	movwf	?___awdiv+2,c
  6681  00150E  0E00               	movlw	0
  6682  001510  6E04               	movwf	?___awmod+3,c
  6683  001512  0E64               	movlw	100
  6684  001514  6E03               	movwf	?___awmod+2,c
  6685  001516  5037               	movf	scale@scl,w,c
  6686  001518  6E01               	movwf	?___awmod,c
  6687  00151A  6A02               	clrf	?___awmod+1,c
  6688  00151C  BE01               	btfsc	?___awmod,7,c
  6689  00151E  0602               	decf	?___awmod+1,f,c
  6690  001520  EC12  F012         	call	___awmod	;wreg free
  6691  001524  C001  F008         	movff	?___awmod,?___awdiv
  6692  001528  C002  F009         	movff	?___awmod+1,?___awdiv+1
  6693  00152C  EC49  F011         	call	___awdiv	;wreg free
  6694  001530  0E09               	movlw	9
  6695  001532  2408               	addwf	?___awdiv,w,c
  6696  001534  6E11               	movwf	?___wmul,c
  6697  001536  0E00               	movlw	0
  6698  001538  2009               	addwfc	?___awdiv+1,w,c
  6699  00153A  6E12               	movwf	?___wmul+1,c
  6700  00153C  EC3E  F014         	call	___wmul	;wreg free
  6701  001540  0E4F               	movlw	low __powers_
  6702  001542  2411               	addwf	?___wmul,w,c
  6703  001544  6EF6               	movwf	tblptrl,c
  6704  001546  0E08               	movlw	high __powers_
  6705  001548  2012               	addwfc	?___wmul+1,w,c
  6706  00154A  6EF7               	movwf	tblptrh,c
  6707  00154C  0009               	tblrd		*+
  6708  00154E  CFF5 F03A          	movff	tablat,??_scale
  6709  001552  0009               	tblrd		*+
  6710  001554  CFF5 F03B          	movff	tablat,??_scale+1
  6711  001558  0009               	tblrd		*+
  6712  00155A  CFF5 F03C          	movff	tablat,??_scale+2
  6713  00155E  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  6714  001562  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  6715  001566  C03A  F029         	movff	??_scale,?___ftmul+3
  6716  00156A  0E00               	movlw	0
  6717  00156C  6E14               	movwf	?___wmul+3,c
  6718  00156E  0E03               	movlw	3
  6719  001570  6E13               	movwf	?___wmul+2,c
  6720  001572  0E00               	movlw	0
  6721  001574  6E0B               	movwf	?___awdiv+3,c
  6722  001576  0E64               	movlw	100
  6723  001578  6E0A               	movwf	?___awdiv+2,c
  6724  00157A  5037               	movf	scale@scl,w,c
  6725  00157C  6E08               	movwf	?___awdiv,c
  6726  00157E  6A09               	clrf	?___awdiv+1,c
  6727  001580  BE08               	btfsc	?___awdiv,7,c
  6728  001582  0609               	decf	?___awdiv+1,f,c
  6729  001584  EC49  F011         	call	___awdiv	;wreg free
  6730  001588  0E12               	movlw	18
  6731  00158A  2408               	addwf	?___awdiv,w,c
  6732  00158C  6E11               	movwf	?___wmul,c
  6733  00158E  0E00               	movlw	0
  6734  001590  2009               	addwfc	?___awdiv+1,w,c
  6735  001592  6E12               	movwf	?___wmul+1,c
  6736  001594  EC3E  F014         	call	___wmul	;wreg free
  6737  001598  0E4F               	movlw	low __powers_
  6738  00159A  2411               	addwf	?___wmul,w,c
  6739  00159C  6EF6               	movwf	tblptrl,c
  6740  00159E  0E08               	movlw	high __powers_
  6741  0015A0  2012               	addwfc	?___wmul+1,w,c
  6742  0015A2  6EF7               	movwf	tblptrh,c
  6743  0015A4  0009               	tblrd		*+
  6744  0015A6  CFF5 F03D          	movff	tablat,??_scale+3
  6745  0015AA  0009               	tblrd		*+
  6746  0015AC  CFF5 F03E          	movff	tablat,??_scale+4
  6747  0015B0  0009               	tblrd		*+
  6748  0015B2  CFF5 F03F          	movff	tablat,??_scale+5
  6749  0015B6  C03F  F028         	movff	??_scale+5,?___ftmul+2
  6750  0015BA  C03E  F027         	movff	??_scale+4,?___ftmul+1
  6751  0015BE  C03D  F026         	movff	??_scale+3,?___ftmul
  6752  0015C2  EC4F  F00E         	call	___ftmul	;wreg free
  6753  0015C6  C028  F042         	movff	?___ftmul+2,_scale$1408+2
  6754  0015CA  C027  F041         	movff	?___ftmul+1,_scale$1408+1
  6755  0015CE  C026  F040         	movff	?___ftmul,_scale$1408
  6756                           
  6757                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6758  0015D2  C040  F026         	movff	_scale$1408,?___ftmul
  6759  0015D6  C041  F027         	movff	_scale$1408+1,?___ftmul+1
  6760  0015DA  C042  F028         	movff	_scale$1408+2,?___ftmul+2
  6761  0015DE  0E00               	movlw	0
  6762  0015E0  6E14               	movwf	?___wmul+3,c
  6763  0015E2  0E03               	movlw	3
  6764  0015E4  6E13               	movwf	?___wmul+2,c
  6765  0015E6  0E00               	movlw	0
  6766  0015E8  6E04               	movwf	?___awmod+3,c
  6767  0015EA  0E0A               	movlw	10
  6768  0015EC  6E03               	movwf	?___awmod+2,c
  6769  0015EE  5037               	movf	scale@scl,w,c
  6770  0015F0  6E01               	movwf	?___awmod,c
  6771  0015F2  6A02               	clrf	?___awmod+1,c
  6772  0015F4  BE01               	btfsc	?___awmod,7,c
  6773  0015F6  0602               	decf	?___awmod+1,f,c
  6774  0015F8  EC12  F012         	call	___awmod	;wreg free
  6775  0015FC  C001  F011         	movff	?___awmod,?___wmul
  6776  001600  C002  F012         	movff	?___awmod+1,?___wmul+1
  6777  001604  EC3E  F014         	call	___wmul	;wreg free
  6778  001608  0E4F               	movlw	low __powers_
  6779  00160A  2411               	addwf	?___wmul,w,c
  6780  00160C  6EF6               	movwf	tblptrl,c
  6781  00160E  0E08               	movlw	high __powers_
  6782  001610  2012               	addwfc	?___wmul+1,w,c
  6783  001612  6EF7               	movwf	tblptrh,c
  6784  001614  0009               	tblrd		*+
  6785  001616  CFF5 F03A          	movff	tablat,??_scale
  6786  00161A  0009               	tblrd		*+
  6787  00161C  CFF5 F03B          	movff	tablat,??_scale+1
  6788  001620  0009               	tblrd		*+
  6789  001622  CFF5 F03C          	movff	tablat,??_scale+2
  6790  001626  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  6791  00162A  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  6792  00162E  C03A  F029         	movff	??_scale,?___ftmul+3
  6793  001632  EC4F  F00E         	call	___ftmul	;wreg free
  6794  001636  D05D               	goto	L11
  6795  001638                     l4164:
  6796                           
  6797                           ;doprnt.c: 438: else if(scl > 10)
  6798  001638  5037               	movf	scale@scl,w,c
  6799  00163A  0A80               	xorlw	128
  6800  00163C  0F75               	addlw	-139
  6801  00163E  A0D8               	btfss	status,0,c
  6802  001640  D05F               	goto	l4170
  6803                           
  6804                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6805  001642  0E00               	movlw	0
  6806  001644  6E14               	movwf	?___wmul+3,c
  6807  001646  0E03               	movlw	3
  6808  001648  6E13               	movwf	?___wmul+2,c
  6809  00164A  0E00               	movlw	0
  6810  00164C  6E0B               	movwf	?___awdiv+3,c
  6811  00164E  0E0A               	movlw	10
  6812  001650  6E0A               	movwf	?___awdiv+2,c
  6813  001652  5037               	movf	scale@scl,w,c
  6814  001654  6E08               	movwf	?___awdiv,c
  6815  001656  6A09               	clrf	?___awdiv+1,c
  6816  001658  BE08               	btfsc	?___awdiv,7,c
  6817  00165A  0609               	decf	?___awdiv+1,f,c
  6818  00165C  EC49  F011         	call	___awdiv	;wreg free
  6819  001660  0E09               	movlw	9
  6820  001662  2408               	addwf	?___awdiv,w,c
  6821  001664  6E11               	movwf	?___wmul,c
  6822  001666  0E00               	movlw	0
  6823  001668  2009               	addwfc	?___awdiv+1,w,c
  6824  00166A  6E12               	movwf	?___wmul+1,c
  6825  00166C  EC3E  F014         	call	___wmul	;wreg free
  6826  001670  0E4F               	movlw	low __powers_
  6827  001672  2411               	addwf	?___wmul,w,c
  6828  001674  6EF6               	movwf	tblptrl,c
  6829  001676  0E08               	movlw	high __powers_
  6830  001678  2012               	addwfc	?___wmul+1,w,c
  6831  00167A  6EF7               	movwf	tblptrh,c
  6832  00167C  0009               	tblrd		*+
  6833  00167E  CFF5 F03A          	movff	tablat,??_scale
  6834  001682  0009               	tblrd		*+
  6835  001684  CFF5 F03B          	movff	tablat,??_scale+1
  6836  001688  0009               	tblrd		*+
  6837  00168A  CFF5 F03C          	movff	tablat,??_scale+2
  6838  00168E  C03C  F028         	movff	??_scale+2,?___ftmul+2
  6839  001692  C03B  F027         	movff	??_scale+1,?___ftmul+1
  6840  001696  C03A  F026         	movff	??_scale,?___ftmul
  6841  00169A  0E00               	movlw	0
  6842  00169C  6E14               	movwf	?___wmul+3,c
  6843  00169E  0E03               	movlw	3
  6844  0016A0  6E13               	movwf	?___wmul+2,c
  6845  0016A2  0E00               	movlw	0
  6846  0016A4  6E04               	movwf	?___awmod+3,c
  6847  0016A6  0E0A               	movlw	10
  6848  0016A8  6E03               	movwf	?___awmod+2,c
  6849  0016AA  5037               	movf	scale@scl,w,c
  6850  0016AC  6E01               	movwf	?___awmod,c
  6851  0016AE  6A02               	clrf	?___awmod+1,c
  6852  0016B0  BE01               	btfsc	?___awmod,7,c
  6853  0016B2  0602               	decf	?___awmod+1,f,c
  6854  0016B4  EC12  F012         	call	___awmod	;wreg free
  6855  0016B8  C001  F011         	movff	?___awmod,?___wmul
  6856  0016BC  C002  F012         	movff	?___awmod+1,?___wmul+1
  6857  0016C0  EC3E  F014         	call	___wmul	;wreg free
  6858  0016C4  0E4F               	movlw	low __powers_
  6859  0016C6  2411               	addwf	?___wmul,w,c
  6860  0016C8  6EF6               	movwf	tblptrl,c
  6861  0016CA  0E08               	movlw	high __powers_
  6862  0016CC  2012               	addwfc	?___wmul+1,w,c
  6863  0016CE  6EF7               	movwf	tblptrh,c
  6864  0016D0  0009               	tblrd		*+
  6865  0016D2  CFF5 F03D          	movff	tablat,??_scale+3
  6866  0016D6  0009               	tblrd		*+
  6867  0016D8  CFF5 F03E          	movff	tablat,??_scale+4
  6868  0016DC  0009               	tblrd		*+
  6869  0016DE  CFF5 F03F          	movff	tablat,??_scale+5
  6870  0016E2  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  6871  0016E6  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  6872  0016EA  C03D  F029         	movff	??_scale+3,?___ftmul+3
  6873  0016EE  EC4F  F00E         	call	___ftmul	;wreg free
  6874  0016F2                     L11:
  6875  0016F2  C028  F039         	movff	?___ftmul+2,?_scale+2
  6876  0016F6  C027  F038         	movff	?___ftmul+1,?_scale+1
  6877  0016FA  C026  F037         	movff	?___ftmul,?_scale
  6878  0016FE  D017               	goto	l172
  6879  001700                     l4170:
  6880                           
  6881                           ;doprnt.c: 440: return _powers_[scl];
  6882  001700  5037               	movf	scale@scl,w,c
  6883  001702  0D03               	mullw	3
  6884  001704  0E4F               	movlw	low __powers_
  6885  001706  24F3               	addwf	prodl,w,c
  6886  001708  6EF6               	movwf	tblptrl,c
  6887  00170A  0E08               	movlw	high __powers_
  6888  00170C                     L10:
  6889  00170C  20F4               	addwfc	prodh,w,c
  6890  00170E  6EF7               	movwf	tblptrh,c
  6891  001710  0009               	tblrd		*+
  6892  001712  CFF5 F03A          	movff	tablat,??_scale
  6893  001716  0009               	tblrd		*+
  6894  001718  CFF5 F03B          	movff	tablat,??_scale+1
  6895  00171C  0009               	tblrd		*+
  6896  00171E  CFF5 F03C          	movff	tablat,??_scale+2
  6897  001722  C03C  F039         	movff	??_scale+2,?_scale+2
  6898  001726  C03B  F038         	movff	??_scale+1,?_scale+1
  6899  00172A  C03A  F037         	movff	??_scale,?_scale
  6900  00172E                     l172:
  6901  00172E  0012               	return	
  6902  001730                     __end_of_scale:
  6903                           	opt stack 0
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           intcon	equ	0xFF2
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           postinc1	equ	0xFE6
  6914                           postdec1	equ	0xFE5
  6915                           fsr1l	equ	0xFE1
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function ___wmul *****************
  6924 ;; Defined at:
  6925 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  multiplier      2   16[COMRAM] unsigned int 
  6928 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  product         2   20[COMRAM] unsigned int 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  2   16[COMRAM] unsigned int 
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, prodl, prodh
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6940 ;;      Params:         4       0       0       0       0       0       0       0       0
  6941 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6943 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6944 ;;Total ram usage:        6 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_fround
  6950 ;;		_scale
  6951 ;;		_sprintf
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text38
  6956  00287C                     __ptext38:
  6957                           	opt stack 0
  6958  00287C                     ___wmul:
  6959                           	opt stack 28
  6960                           
  6961                           ;incstack = 0
  6962                           ;incstack = 0
  6963  00287C  5011               	movf	___wmul@multiplier,w,c
  6964  00287E  0213               	mulwf	___wmul@multiplicand,c
  6965  002880  CFF3 F015          	movff	prodl,___wmul@product
  6966  002884  CFF4 F016          	movff	prodh,___wmul@product+1
  6967  002888  5011               	movf	___wmul@multiplier,w,c
  6968  00288A  0214               	mulwf	___wmul@multiplicand+1,c
  6969  00288C  CFF3 FFF4          	movff	prodl,prodh
  6970  002890  6AF3               	clrf	prodl,c
  6971  002892  50F3               	movf	prodl,w,c
  6972  002894  2615               	addwf	___wmul@product,f,c
  6973  002896  50F4               	movf	prodh,w,c
  6974  002898  2216               	addwfc	___wmul@product+1,f,c
  6975  00289A  5012               	movf	___wmul@multiplier+1,w,c
  6976  00289C  0213               	mulwf	___wmul@multiplicand,c
  6977  00289E  CFF3 FFF4          	movff	prodl,prodh
  6978  0028A2  6AF3               	clrf	prodl,c
  6979  0028A4  50F3               	movf	prodl,w,c
  6980  0028A6  2615               	addwf	___wmul@product,f,c
  6981  0028A8  50F4               	movf	prodh,w,c
  6982  0028AA  2216               	addwfc	___wmul@product+1,f,c
  6983  0028AC  C015  F011         	movff	___wmul@product,?___wmul
  6984  0028B0  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6985  0028B4  0012               	return	
  6986  0028B6                     __end_of___wmul:
  6987                           	opt stack 0
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           postinc0	equ	0xFEE
  6996                           wreg	equ	0xFE8
  6997                           postinc1	equ	0xFE6
  6998                           postdec1	equ	0xFE5
  6999                           fsr1l	equ	0xFE1
  7000                           indf2	equ	0xFDF
  7001                           postinc2	equ	0xFDE
  7002                           postdec2	equ	0xFDD
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007 ;; *************** function ___awmod *****************
  7008 ;; Defined at:
  7009 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awmod.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;  dividend        2    0[COMRAM] int 
  7012 ;;  divisor         2    2[COMRAM] int 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  sign            1    6[COMRAM] unsigned char 
  7015 ;;  counter         1    5[COMRAM] unsigned char 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  2    0[COMRAM] int 
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7025 ;;      Params:         4       0       0       0       0       0       0       0       0
  7026 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7027 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7028 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7029 ;;Total ram usage:        7 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		_fround
  7035 ;;		_scale
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text39
  7040  002424                     __ptext39:
  7041                           	opt stack 0
  7042  002424                     ___awmod:
  7043                           	opt stack 27
  7044                           
  7045                           ;incstack = 0
  7046                           ;incstack = 0
  7047  002424  6E05               	movwf	??___awmod& (0+255),c
  7048  002426  0E00               	movlw	0
  7049  002428  6E07               	movwf	___awmod@sign,c
  7050  00242A  5005               	movf	??___awmod& (0+255),w,c
  7051  00242C  AE02               	btfss	___awmod@dividend+1,7,c
  7052  00242E  D008               	goto	l3632
  7053  002430  6C01               	negf	___awmod@dividend,c
  7054  002432  1E02               	comf	___awmod@dividend+1,f,c
  7055  002434  B0D8               	btfsc	status,0,c
  7056  002436  2A02               	incf	___awmod@dividend+1,f,c
  7057  002438  6E05               	movwf	??___awmod& (0+255),c
  7058  00243A  0E01               	movlw	1
  7059  00243C  6E07               	movwf	___awmod@sign,c
  7060  00243E  5005               	movf	??___awmod& (0+255),w,c
  7061  002440                     l3632:
  7062  002440  AE04               	btfss	___awmod@divisor+1,7,c
  7063  002442  D004               	goto	l3636
  7064  002444  6C03               	negf	___awmod@divisor,c
  7065  002446  1E04               	comf	___awmod@divisor+1,f,c
  7066  002448  B0D8               	btfsc	status,0,c
  7067  00244A  2A04               	incf	___awmod@divisor+1,f,c
  7068  00244C                     l3636:
  7069  00244C  5004               	movf	___awmod@divisor+1,w,c
  7070  00244E  1003               	iorwf	___awmod@divisor,w,c
  7071  002450  B4D8               	btfsc	status,2,c
  7072  002452  D01A               	goto	l3652
  7073  002454  6E05               	movwf	??___awmod& (0+255),c
  7074  002456  0E01               	movlw	1
  7075  002458  6E06               	movwf	___awmod@counter,c
  7076  00245A  5005               	movf	??___awmod& (0+255),w,c
  7077  00245C  D004               	goto	l3642
  7078  00245E                     l3640:
  7079  00245E  90D8               	bcf	status,0,c
  7080  002460  3603               	rlcf	___awmod@divisor,f,c
  7081  002462  3604               	rlcf	___awmod@divisor+1,f,c
  7082  002464  2A06               	incf	___awmod@counter,f,c
  7083  002466                     l3642:
  7084  002466  AE04               	btfss	___awmod@divisor+1,7,c
  7085  002468  D7FA               	goto	l3640
  7086  00246A                     l3644:
  7087  00246A  5003               	movf	___awmod@divisor,w,c
  7088  00246C  5C01               	subwf	___awmod@dividend,w,c
  7089  00246E  5004               	movf	___awmod@divisor+1,w,c
  7090  002470  5802               	subwfb	___awmod@dividend+1,w,c
  7091  002472  A0D8               	btfss	status,0,c
  7092  002474  D004               	goto	l3648
  7093  002476  5003               	movf	___awmod@divisor,w,c
  7094  002478  5E01               	subwf	___awmod@dividend,f,c
  7095  00247A  5004               	movf	___awmod@divisor+1,w,c
  7096  00247C  5A02               	subwfb	___awmod@dividend+1,f,c
  7097  00247E                     l3648:
  7098  00247E  90D8               	bcf	status,0,c
  7099  002480  3204               	rrcf	___awmod@divisor+1,f,c
  7100  002482  3203               	rrcf	___awmod@divisor,f,c
  7101  002484  2E06               	decfsz	___awmod@counter,f,c
  7102  002486  D7F1               	goto	l3644
  7103  002488                     l3652:
  7104  002488  5007               	movf	___awmod@sign,w,c
  7105  00248A  B4D8               	btfsc	status,2,c
  7106  00248C  D004               	goto	l3656
  7107  00248E  6C01               	negf	___awmod@dividend,c
  7108  002490  1E02               	comf	___awmod@dividend+1,f,c
  7109  002492  B0D8               	btfsc	status,0,c
  7110  002494  2A02               	incf	___awmod@dividend+1,f,c
  7111  002496                     l3656:
  7112  002496  C001  F001         	movff	___awmod@dividend,?___awmod
  7113  00249A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7114  00249E  0012               	return	
  7115  0024A0                     __end_of___awmod:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodh	equ	0xFF4
  7122                           prodl	equ	0xFF3
  7123                           intcon	equ	0xFF2
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           postinc1	equ	0xFE6
  7127                           postdec1	equ	0xFE5
  7128                           fsr1l	equ	0xFE1
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           fsr2h	equ	0xFDA
  7133                           fsr2l	equ	0xFD9
  7134                           status	equ	0xFD8
  7135                           
  7136 ;; *************** function ___awdiv *****************
  7137 ;; Defined at:
  7138 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awdiv.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  dividend        2    7[COMRAM] int 
  7141 ;;  divisor         2    9[COMRAM] int 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  quotient        2   14[COMRAM] int 
  7144 ;;  sign            1   13[COMRAM] unsigned char 
  7145 ;;  counter         1   12[COMRAM] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  2    7[COMRAM] int 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7155 ;;      Params:         4       0       0       0       0       0       0       0       0
  7156 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7157 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7158 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7159 ;;Total ram usage:        9 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_fround
  7165 ;;		_scale
  7166 ;;		_sprintf
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text40
  7171  002292                     __ptext40:
  7172                           	opt stack 0
  7173  002292                     ___awdiv:
  7174                           	opt stack 28
  7175                           
  7176                           ;incstack = 0
  7177                           ;incstack = 0
  7178  002292  6E0C               	movwf	??___awdiv& (0+255),c
  7179  002294  0E00               	movlw	0
  7180  002296  6E0E               	movwf	___awdiv@sign,c
  7181  002298  500C               	movf	??___awdiv& (0+255),w,c
  7182  00229A  AE0B               	btfss	___awdiv@divisor+1,7,c
  7183  00229C  D008               	goto	l3896
  7184  00229E  6C0A               	negf	___awdiv@divisor,c
  7185  0022A0  1E0B               	comf	___awdiv@divisor+1,f,c
  7186  0022A2  B0D8               	btfsc	status,0,c
  7187  0022A4  2A0B               	incf	___awdiv@divisor+1,f,c
  7188  0022A6  6E0C               	movwf	??___awdiv& (0+255),c
  7189  0022A8  0E01               	movlw	1
  7190  0022AA  6E0E               	movwf	___awdiv@sign,c
  7191  0022AC  500C               	movf	??___awdiv& (0+255),w,c
  7192  0022AE                     l3896:
  7193  0022AE  AE09               	btfss	___awdiv@dividend+1,7,c
  7194  0022B0  D006               	goto	l3902
  7195  0022B2  6C08               	negf	___awdiv@dividend,c
  7196  0022B4  1E09               	comf	___awdiv@dividend+1,f,c
  7197  0022B6  B0D8               	btfsc	status,0,c
  7198  0022B8  2A09               	incf	___awdiv@dividend+1,f,c
  7199  0022BA  0E01               	movlw	1
  7200  0022BC  1A0E               	xorwf	___awdiv@sign,f,c
  7201  0022BE                     l3902:
  7202  0022BE  0E00               	movlw	0
  7203  0022C0  6E10               	movwf	___awdiv@quotient+1,c
  7204  0022C2  0E00               	movlw	0
  7205  0022C4  6E0F               	movwf	___awdiv@quotient,c
  7206  0022C6  500B               	movf	___awdiv@divisor+1,w,c
  7207  0022C8  100A               	iorwf	___awdiv@divisor,w,c
  7208  0022CA  B4D8               	btfsc	status,2,c
  7209  0022CC  D01E               	goto	l3924
  7210  0022CE  6E0C               	movwf	??___awdiv& (0+255),c
  7211  0022D0  0E01               	movlw	1
  7212  0022D2  6E0D               	movwf	___awdiv@counter,c
  7213  0022D4  500C               	movf	??___awdiv& (0+255),w,c
  7214  0022D6  D004               	goto	l3910
  7215  0022D8                     l3908:
  7216  0022D8  90D8               	bcf	status,0,c
  7217  0022DA  360A               	rlcf	___awdiv@divisor,f,c
  7218  0022DC  360B               	rlcf	___awdiv@divisor+1,f,c
  7219  0022DE  2A0D               	incf	___awdiv@counter,f,c
  7220  0022E0                     l3910:
  7221  0022E0  AE0B               	btfss	___awdiv@divisor+1,7,c
  7222  0022E2  D7FA               	goto	l3908
  7223  0022E4                     l3912:
  7224  0022E4  90D8               	bcf	status,0,c
  7225  0022E6  360F               	rlcf	___awdiv@quotient,f,c
  7226  0022E8  3610               	rlcf	___awdiv@quotient+1,f,c
  7227  0022EA  500A               	movf	___awdiv@divisor,w,c
  7228  0022EC  5C08               	subwf	___awdiv@dividend,w,c
  7229  0022EE  500B               	movf	___awdiv@divisor+1,w,c
  7230  0022F0  5809               	subwfb	___awdiv@dividend+1,w,c
  7231  0022F2  A0D8               	btfss	status,0,c
  7232  0022F4  D005               	goto	l3920
  7233  0022F6  500A               	movf	___awdiv@divisor,w,c
  7234  0022F8  5E08               	subwf	___awdiv@dividend,f,c
  7235  0022FA  500B               	movf	___awdiv@divisor+1,w,c
  7236  0022FC  5A09               	subwfb	___awdiv@dividend+1,f,c
  7237  0022FE  800F               	bsf	___awdiv@quotient,0,c
  7238  002300                     l3920:
  7239  002300  90D8               	bcf	status,0,c
  7240  002302  320B               	rrcf	___awdiv@divisor+1,f,c
  7241  002304  320A               	rrcf	___awdiv@divisor,f,c
  7242  002306  2E0D               	decfsz	___awdiv@counter,f,c
  7243  002308  D7ED               	goto	l3912
  7244  00230A                     l3924:
  7245  00230A  500E               	movf	___awdiv@sign,w,c
  7246  00230C  B4D8               	btfsc	status,2,c
  7247  00230E  D004               	goto	l3928
  7248  002310  6C0F               	negf	___awdiv@quotient,c
  7249  002312  1E10               	comf	___awdiv@quotient+1,f,c
  7250  002314  B0D8               	btfsc	status,0,c
  7251  002316  2A10               	incf	___awdiv@quotient+1,f,c
  7252  002318                     l3928:
  7253  002318  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  7254  00231C  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  7255  002320  0012               	return	
  7256  002322                     __end_of___awdiv:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           intcon	equ	0xFF2
  7265                           postinc0	equ	0xFEE
  7266                           wreg	equ	0xFE8
  7267                           postinc1	equ	0xFE6
  7268                           postdec1	equ	0xFE5
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           
  7277 ;; *************** function ___ftmul *****************
  7278 ;; Defined at:
  7279 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftmul.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;  f1              3   37[COMRAM] float 
  7282 ;;  f2              3   40[COMRAM] float 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  7285 ;;  sign            1   53[COMRAM] unsigned char 
  7286 ;;  cntr            1   52[COMRAM] unsigned char 
  7287 ;;  exp             1   48[COMRAM] unsigned char 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  3   37[COMRAM] float 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, status,0, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7297 ;;      Params:         6       0       0       0       0       0       0       0       0
  7298 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7299 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7300 ;;      Totals:        17       0       0       0       0       0       0       0       0
  7301 ;;Total ram usage:       17 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    1
  7304 ;; This function calls:
  7305 ;;		___ftpack
  7306 ;; This function is called by:
  7307 ;;		_ADC_Value
  7308 ;;		_fround
  7309 ;;		_scale
  7310 ;;		_sprintf
  7311 ;;		___asftmul
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text41
  7316  001C9E                     __ptext41:
  7317                           	opt stack 0
  7318  001C9E                     ___ftmul:
  7319                           	opt stack 28
  7320                           
  7321                           ;incstack = 0
  7322                           ;incstack = 0
  7323  001C9E  0E0F               	movlw	15
  7324  001CA0  6E2C               	movwf	??___ftmul& (0+255),c
  7325  001CA2  C026  F02D         	movff	___ftmul@f1,??___ftmul+1
  7326  001CA6  C027  F02E         	movff	___ftmul@f1+1,??___ftmul+2
  7327  001CAA  C028  F02F         	movff	___ftmul@f1+2,??___ftmul+3
  7328  001CAE  282C               	incf	??___ftmul,w,c
  7329  001CB0  6E30               	movwf	(??___ftmul+4)& (0+255),c
  7330  001CB2  D004               	goto	u2420
  7331  001CB4                     u2425:
  7332  001CB4  90D8               	bcf	status,0,c
  7333  001CB6  322F               	rrcf	??___ftmul+3,f,c
  7334  001CB8  322E               	rrcf	??___ftmul+2,f,c
  7335  001CBA  322D               	rrcf	??___ftmul+1,f,c
  7336  001CBC                     u2420:
  7337  001CBC  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  7338  001CBE  D7FA               	goto	u2425
  7339  001CC0  502D               	movf	??___ftmul+1,w,c
  7340  001CC2  6E31               	movwf	___ftmul@exp,c
  7341  001CC4  6631               	tstfsz	___ftmul@exp& (0+255),c
  7342  001CC6  D001               	goto	l3846
  7343  001CC8  D015               	goto	u2450
  7344  001CCA                     l3846:
  7345  001CCA  0E0F               	movlw	15
  7346  001CCC  6E2C               	movwf	??___ftmul& (0+255),c
  7347  001CCE  C029  F02D         	movff	___ftmul@f2,??___ftmul+1
  7348  001CD2  C02A  F02E         	movff	___ftmul@f2+1,??___ftmul+2
  7349  001CD6  C02B  F02F         	movff	___ftmul@f2+2,??___ftmul+3
  7350  001CDA  282C               	incf	??___ftmul,w,c
  7351  001CDC  6E30               	movwf	(??___ftmul+4)& (0+255),c
  7352  001CDE  D004               	goto	u2440
  7353  001CE0                     u2445:
  7354  001CE0  90D8               	bcf	status,0,c
  7355  001CE2  322F               	rrcf	??___ftmul+3,f,c
  7356  001CE4  322E               	rrcf	??___ftmul+2,f,c
  7357  001CE6  322D               	rrcf	??___ftmul+1,f,c
  7358  001CE8                     u2440:
  7359  001CE8  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
  7360  001CEA  D7FA               	goto	u2445
  7361  001CEC  502D               	movf	??___ftmul+1,w,c
  7362  001CEE  6E36               	movwf	___ftmul@sign,c
  7363  001CF0  6636               	tstfsz	___ftmul@sign& (0+255),c
  7364  001CF2  D007               	goto	l3852
  7365  001CF4                     u2450:
  7366  001CF4  0E00               	movlw	0
  7367  001CF6  6E26               	movwf	?___ftmul,c
  7368  001CF8  0E00               	movlw	0
  7369  001CFA  6E27               	movwf	?___ftmul+1,c
  7370  001CFC  0E00               	movlw	0
  7371  001CFE  6E28               	movwf	?___ftmul+2,c
  7372  001D00  D055               	goto	l747
  7373  001D02                     l3852:
  7374  001D02  5036               	movf	___ftmul@sign,w,c
  7375  001D04  0F7B               	addlw	123
  7376  001D06  2631               	addwf	___ftmul@exp,f,c
  7377  001D08  C028  F036         	movff	___ftmul@f1+2,___ftmul@sign
  7378  001D0C  502B               	movf	(___ftmul@f2+2)& (0+255),w,c
  7379  001D0E  1A36               	xorwf	___ftmul@sign,f,c
  7380  001D10  0E80               	movlw	128
  7381  001D12  1636               	andwf	___ftmul@sign,f,c
  7382  001D14  8E27               	bsf	___ftmul@f1+1,7,c
  7383  001D16  8E2A               	bsf	___ftmul@f2+1,7,c
  7384  001D18  0EFF               	movlw	255
  7385  001D1A  1629               	andwf	___ftmul@f2,f,c
  7386  001D1C  0EFF               	movlw	255
  7387  001D1E  162A               	andwf	___ftmul@f2+1,f,c
  7388  001D20  0E00               	movlw	0
  7389  001D22  162B               	andwf	___ftmul@f2+2,f,c
  7390  001D24  0E00               	movlw	0
  7391  001D26  6E32               	movwf	___ftmul@f3_as_product,c
  7392  001D28  0E00               	movlw	0
  7393  001D2A  6E33               	movwf	___ftmul@f3_as_product+1,c
  7394  001D2C  0E00               	movlw	0
  7395  001D2E  6E34               	movwf	___ftmul@f3_as_product+2,c
  7396  001D30  6E2C               	movwf	??___ftmul& (0+255),c
  7397  001D32  0E07               	movlw	7
  7398  001D34  6E35               	movwf	___ftmul@cntr,c
  7399  001D36  502C               	movf	??___ftmul& (0+255),w,c
  7400  001D38                     l3866:
  7401  001D38  A026               	btfss	___ftmul@f1,0,c
  7402  001D3A  D006               	goto	l3870
  7403  001D3C  5029               	movf	___ftmul@f2,w,c
  7404  001D3E  2632               	addwf	___ftmul@f3_as_product,f,c
  7405  001D40  502A               	movf	___ftmul@f2+1,w,c
  7406  001D42  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  7407  001D44  502B               	movf	___ftmul@f2+2,w,c
  7408  001D46  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  7409  001D48                     l3870:
  7410  001D48  90D8               	bcf	status,0,c
  7411  001D4A  3228               	rrcf	___ftmul@f1+2,f,c
  7412  001D4C  3227               	rrcf	___ftmul@f1+1,f,c
  7413  001D4E  3226               	rrcf	___ftmul@f1,f,c
  7414  001D50  90D8               	bcf	status,0,c
  7415  001D52  3629               	rlcf	___ftmul@f2,f,c
  7416  001D54  362A               	rlcf	___ftmul@f2+1,f,c
  7417  001D56  362B               	rlcf	___ftmul@f2+2,f,c
  7418  001D58  2E35               	decfsz	___ftmul@cntr,f,c
  7419  001D5A  D7EE               	goto	l3866
  7420  001D5C  6E2C               	movwf	??___ftmul& (0+255),c
  7421  001D5E  0E09               	movlw	9
  7422  001D60  6E35               	movwf	___ftmul@cntr,c
  7423  001D62  502C               	movf	??___ftmul& (0+255),w,c
  7424  001D64                     l3876:
  7425  001D64  A026               	btfss	___ftmul@f1,0,c
  7426  001D66  D006               	goto	l3880
  7427  001D68  5029               	movf	___ftmul@f2,w,c
  7428  001D6A  2632               	addwf	___ftmul@f3_as_product,f,c
  7429  001D6C  502A               	movf	___ftmul@f2+1,w,c
  7430  001D6E  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  7431  001D70  502B               	movf	___ftmul@f2+2,w,c
  7432  001D72  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  7433  001D74                     l3880:
  7434  001D74  90D8               	bcf	status,0,c
  7435  001D76  3228               	rrcf	___ftmul@f1+2,f,c
  7436  001D78  3227               	rrcf	___ftmul@f1+1,f,c
  7437  001D7A  3226               	rrcf	___ftmul@f1,f,c
  7438  001D7C  90D8               	bcf	status,0,c
  7439  001D7E  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  7440  001D80  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  7441  001D82  3232               	rrcf	___ftmul@f3_as_product,f,c
  7442  001D84  2E35               	decfsz	___ftmul@cntr,f,c
  7443  001D86  D7EE               	goto	l3876
  7444  001D88  C032  F001         	movff	___ftmul@f3_as_product,?___ftpack
  7445  001D8C  C033  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  7446  001D90  C034  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  7447  001D94  C031  F004         	movff	___ftmul@exp,?___ftpack+3
  7448  001D98  C036  F005         	movff	___ftmul@sign,?___ftpack+4
  7449  001D9C  ECA5  F010         	call	___ftpack	;wreg free
  7450  001DA0  C003  F028         	movff	?___ftpack+2,?___ftmul+2
  7451  001DA4  C002  F027         	movff	?___ftpack+1,?___ftmul+1
  7452  001DA8  C001  F026         	movff	?___ftpack,?___ftmul
  7453  001DAC                     l747:
  7454  001DAC  0012               	return	
  7455  001DAE                     __end_of___ftmul:
  7456                           	opt stack 0
  7457                           tblptru	equ	0xFF8
  7458                           tblptrh	equ	0xFF7
  7459                           tblptrl	equ	0xFF6
  7460                           tablat	equ	0xFF5
  7461                           prodh	equ	0xFF4
  7462                           prodl	equ	0xFF3
  7463                           intcon	equ	0xFF2
  7464                           postinc0	equ	0xFEE
  7465                           wreg	equ	0xFE8
  7466                           postinc1	equ	0xFE6
  7467                           postdec1	equ	0xFE5
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function _fround *****************
  7477 ;; Defined at:
  7478 ;;		line 410 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  prec            1   54[COMRAM] unsigned char 
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;		None
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  3   54[COMRAM] unsigned char 
  7485 ;; Registers used:
  7486 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7492 ;;      Params:         3       0       0       0       0       0       0       0       0
  7493 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7494 ;;      Temps:          6       0       0       0       0       0       0       0       0
  7495 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7496 ;;Total ram usage:       15 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    2
  7499 ;; This function calls:
  7500 ;;		___ftmul
  7501 ;;		___awdiv
  7502 ;;		___awmod
  7503 ;;		___wmul
  7504 ;; This function is called by:
  7505 ;;		_sprintf
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text42
  7510  001730                     __ptext42:
  7511                           	opt stack 0
  7512  001730                     _fround:
  7513                           	opt stack 26
  7514                           
  7515                           ;doprnt.c: 413: if(prec>=110)
  7516                           
  7517                           ;incstack = 0
  7518                           ;incstack = 0
  7519  001730  0E6D               	movlw	109
  7520  001732  6437               	cpfsgt	fround@prec,c
  7521  001734  D0AB               	goto	l3758
  7522                           
  7523                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7524  001736  0E00               	movlw	0
  7525  001738  6E14               	movwf	?___wmul+3,c
  7526  00173A  0E03               	movlw	3
  7527  00173C  6E13               	movwf	?___wmul+2,c
  7528  00173E  0E00               	movlw	0
  7529  001740  6E0B               	movwf	?___awdiv+3,c
  7530  001742  0E0A               	movlw	10
  7531  001744  6E0A               	movwf	?___awdiv+2,c
  7532  001746  0E00               	movlw	0
  7533  001748  6E04               	movwf	?___awmod+3,c
  7534  00174A  0E64               	movlw	100
  7535  00174C  6E03               	movwf	?___awmod+2,c
  7536  00174E  C037  F001         	movff	fround@prec,?___awmod
  7537  001752  6A02               	clrf	?___awmod+1,c
  7538  001754  EC12  F012         	call	___awmod	;wreg free
  7539  001758  C001  F008         	movff	?___awmod,?___awdiv
  7540  00175C  C002  F009         	movff	?___awmod+1,?___awdiv+1
  7541  001760  EC49  F011         	call	___awdiv	;wreg free
  7542  001764  0E09               	movlw	9
  7543  001766  2408               	addwf	?___awdiv,w,c
  7544  001768  6E11               	movwf	?___wmul,c
  7545  00176A  0E00               	movlw	0
  7546  00176C  2009               	addwfc	?___awdiv+1,w,c
  7547  00176E  6E12               	movwf	?___wmul+1,c
  7548  001770  EC3E  F014         	call	___wmul	;wreg free
  7549  001774  0E28               	movlw	low __npowers_
  7550  001776  2411               	addwf	?___wmul,w,c
  7551  001778  6EF6               	movwf	tblptrl,c
  7552  00177A  0E08               	movlw	high __npowers_
  7553  00177C  2012               	addwfc	?___wmul+1,w,c
  7554  00177E  6EF7               	movwf	tblptrh,c
  7555  001780  0009               	tblrd		*+
  7556  001782  CFF5 F03A          	movff	tablat,??_fround
  7557  001786  0009               	tblrd		*+
  7558  001788  CFF5 F03B          	movff	tablat,??_fround+1
  7559  00178C  0009               	tblrd		*+
  7560  00178E  CFF5 F03C          	movff	tablat,??_fround+2
  7561  001792  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  7562  001796  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  7563  00179A  C03A  F029         	movff	??_fround,?___ftmul+3
  7564  00179E  0E00               	movlw	0
  7565  0017A0  6E14               	movwf	?___wmul+3,c
  7566  0017A2  0E03               	movlw	3
  7567  0017A4  6E13               	movwf	?___wmul+2,c
  7568  0017A6  0E00               	movlw	0
  7569  0017A8  6E0B               	movwf	?___awdiv+3,c
  7570  0017AA  0E64               	movlw	100
  7571  0017AC  6E0A               	movwf	?___awdiv+2,c
  7572  0017AE  C037  F008         	movff	fround@prec,?___awdiv
  7573  0017B2  6A09               	clrf	?___awdiv+1,c
  7574  0017B4  EC49  F011         	call	___awdiv	;wreg free
  7575  0017B8  0E12               	movlw	18
  7576  0017BA  2408               	addwf	?___awdiv,w,c
  7577  0017BC  6E11               	movwf	?___wmul,c
  7578  0017BE  0E00               	movlw	0
  7579  0017C0  2009               	addwfc	?___awdiv+1,w,c
  7580  0017C2  6E12               	movwf	?___wmul+1,c
  7581  0017C4  EC3E  F014         	call	___wmul	;wreg free
  7582  0017C8  0E28               	movlw	low __npowers_
  7583  0017CA  2411               	addwf	?___wmul,w,c
  7584  0017CC  6EF6               	movwf	tblptrl,c
  7585  0017CE  0E08               	movlw	high __npowers_
  7586  0017D0  2012               	addwfc	?___wmul+1,w,c
  7587  0017D2  6EF7               	movwf	tblptrh,c
  7588  0017D4  0009               	tblrd		*+
  7589  0017D6  CFF5 F03D          	movff	tablat,??_fround+3
  7590  0017DA  0009               	tblrd		*+
  7591  0017DC  CFF5 F03E          	movff	tablat,??_fround+4
  7592  0017E0  0009               	tblrd		*+
  7593  0017E2  CFF5 F03F          	movff	tablat,??_fround+5
  7594  0017E6  C03F  F028         	movff	??_fround+5,?___ftmul+2
  7595  0017EA  C03E  F027         	movff	??_fround+4,?___ftmul+1
  7596  0017EE  C03D  F026         	movff	??_fround+3,?___ftmul
  7597  0017F2  EC4F  F00E         	call	___ftmul	;wreg free
  7598  0017F6  C028  F045         	movff	?___ftmul+2,_fround$1406+2
  7599  0017FA  C027  F044         	movff	?___ftmul+1,_fround$1406+1
  7600  0017FE  C026  F043         	movff	?___ftmul,_fround$1406
  7601                           
  7602                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7603  001802  0E00               	movlw	0
  7604  001804  6E14               	movwf	?___wmul+3,c
  7605  001806  0E03               	movlw	3
  7606  001808  6E13               	movwf	?___wmul+2,c
  7607  00180A  0E00               	movlw	0
  7608  00180C  6E04               	movwf	?___awmod+3,c
  7609  00180E  0E0A               	movlw	10
  7610  001810  6E03               	movwf	?___awmod+2,c
  7611  001812  C037  F001         	movff	fround@prec,?___awmod
  7612  001816  6A02               	clrf	?___awmod+1,c
  7613  001818  EC12  F012         	call	___awmod	;wreg free
  7614  00181C  C001  F011         	movff	?___awmod,?___wmul
  7615  001820  C002  F012         	movff	?___awmod+1,?___wmul+1
  7616  001824  EC3E  F014         	call	___wmul	;wreg free
  7617  001828  0E28               	movlw	low __npowers_
  7618  00182A  2411               	addwf	?___wmul,w,c
  7619  00182C  6EF6               	movwf	tblptrl,c
  7620  00182E  0E08               	movlw	high __npowers_
  7621  001830  2012               	addwfc	?___wmul+1,w,c
  7622  001832  6EF7               	movwf	tblptrh,c
  7623  001834  0009               	tblrd		*+
  7624  001836  CFF5 F03A          	movff	tablat,??_fround
  7625  00183A  0009               	tblrd		*+
  7626  00183C  CFF5 F03B          	movff	tablat,??_fround+1
  7627  001840  0009               	tblrd		*+
  7628  001842  CFF5 F03C          	movff	tablat,??_fround+2
  7629  001846  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  7630  00184A  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  7631  00184E  C03A  F029         	movff	??_fround,?___ftmul+3
  7632  001852  C043  F026         	movff	_fround$1406,?___ftmul
  7633  001856  C044  F027         	movff	_fround$1406+1,?___ftmul+1
  7634  00185A  C045  F028         	movff	_fround$1406+2,?___ftmul+2
  7635  00185E  EC4F  F00E         	call	___ftmul	;wreg free
  7636  001862  C028  F042         	movff	?___ftmul+2,_fround$1407+2
  7637  001866  C027  F041         	movff	?___ftmul+1,_fround$1407+1
  7638  00186A  C026  F040         	movff	?___ftmul,_fround$1407
  7639                           
  7640                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7641  00186E  C040  F026         	movff	_fround$1407,?___ftmul
  7642  001872  C041  F027         	movff	_fround$1407+1,?___ftmul+1
  7643  001876  C042  F028         	movff	_fround$1407+2,?___ftmul+2
  7644  00187A  0E00               	movlw	0
  7645  00187C  6E29               	movwf	?___ftmul+3,c
  7646  00187E  0E00               	movlw	0
  7647  001880  6E2A               	movwf	?___ftmul+4,c
  7648  001882  0E3F               	movlw	63
  7649  001884  6E2B               	movwf	?___ftmul+5,c
  7650  001886  EC4F  F00E         	call	___ftmul	;wreg free
  7651  00188A  D08B               	goto	L13
  7652  00188C                     l3758:
  7653                           
  7654                           ;doprnt.c: 415: else if(prec > 10)
  7655  00188C  0E0A               	movlw	10
  7656  00188E  6437               	cpfsgt	fround@prec,c
  7657  001890  D069               	goto	l3766
  7658                           
  7659                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7660  001892  0E00               	movlw	0
  7661  001894  6E14               	movwf	?___wmul+3,c
  7662  001896  0E03               	movlw	3
  7663  001898  6E13               	movwf	?___wmul+2,c
  7664  00189A  0E00               	movlw	0
  7665  00189C  6E04               	movwf	?___awmod+3,c
  7666  00189E  0E0A               	movlw	10
  7667  0018A0  6E03               	movwf	?___awmod+2,c
  7668  0018A2  C037  F001         	movff	fround@prec,?___awmod
  7669  0018A6  6A02               	clrf	?___awmod+1,c
  7670  0018A8  EC12  F012         	call	___awmod	;wreg free
  7671  0018AC  C001  F011         	movff	?___awmod,?___wmul
  7672  0018B0  C002  F012         	movff	?___awmod+1,?___wmul+1
  7673  0018B4  EC3E  F014         	call	___wmul	;wreg free
  7674  0018B8  0E28               	movlw	low __npowers_
  7675  0018BA  2411               	addwf	?___wmul,w,c
  7676  0018BC  6EF6               	movwf	tblptrl,c
  7677  0018BE  0E08               	movlw	high __npowers_
  7678  0018C0  2012               	addwfc	?___wmul+1,w,c
  7679  0018C2  6EF7               	movwf	tblptrh,c
  7680  0018C4  0009               	tblrd		*+
  7681  0018C6  CFF5 F03A          	movff	tablat,??_fround
  7682  0018CA  0009               	tblrd		*+
  7683  0018CC  CFF5 F03B          	movff	tablat,??_fround+1
  7684  0018D0  0009               	tblrd		*+
  7685  0018D2  CFF5 F03C          	movff	tablat,??_fround+2
  7686  0018D6  C03C  F02B         	movff	??_fround+2,?___ftmul+5
  7687  0018DA  C03B  F02A         	movff	??_fround+1,?___ftmul+4
  7688  0018DE  C03A  F029         	movff	??_fround,?___ftmul+3
  7689  0018E2  0E00               	movlw	0
  7690  0018E4  6E14               	movwf	?___wmul+3,c
  7691  0018E6  0E03               	movlw	3
  7692  0018E8  6E13               	movwf	?___wmul+2,c
  7693  0018EA  0E00               	movlw	0
  7694  0018EC  6E0B               	movwf	?___awdiv+3,c
  7695  0018EE  0E0A               	movlw	10
  7696  0018F0  6E0A               	movwf	?___awdiv+2,c
  7697  0018F2  C037  F008         	movff	fround@prec,?___awdiv
  7698  0018F6  6A09               	clrf	?___awdiv+1,c
  7699  0018F8  EC49  F011         	call	___awdiv	;wreg free
  7700  0018FC  0E09               	movlw	9
  7701  0018FE  2408               	addwf	?___awdiv,w,c
  7702  001900  6E11               	movwf	?___wmul,c
  7703  001902  0E00               	movlw	0
  7704  001904  2009               	addwfc	?___awdiv+1,w,c
  7705  001906  6E12               	movwf	?___wmul+1,c
  7706  001908  EC3E  F014         	call	___wmul	;wreg free
  7707  00190C  0E28               	movlw	low __npowers_
  7708  00190E  2411               	addwf	?___wmul,w,c
  7709  001910  6EF6               	movwf	tblptrl,c
  7710  001912  0E08               	movlw	high __npowers_
  7711  001914  2012               	addwfc	?___wmul+1,w,c
  7712  001916  6EF7               	movwf	tblptrh,c
  7713  001918  0009               	tblrd		*+
  7714  00191A  CFF5 F03D          	movff	tablat,??_fround+3
  7715  00191E  0009               	tblrd		*+
  7716  001920  CFF5 F03E          	movff	tablat,??_fround+4
  7717  001924  0009               	tblrd		*+
  7718  001926  CFF5 F03F          	movff	tablat,??_fround+5
  7719  00192A  C03F  F028         	movff	??_fround+5,?___ftmul+2
  7720  00192E  C03E  F027         	movff	??_fround+4,?___ftmul+1
  7721  001932  C03D  F026         	movff	??_fround+3,?___ftmul
  7722  001936  EC4F  F00E         	call	___ftmul	;wreg free
  7723  00193A  C028  F045         	movff	?___ftmul+2,_fround$1406+2
  7724  00193E  C027  F044         	movff	?___ftmul+1,_fround$1406+1
  7725  001942  C026  F043         	movff	?___ftmul,_fround$1406
  7726                           
  7727                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7728  001946  C043  F026         	movff	_fround$1406,?___ftmul
  7729  00194A  C044  F027         	movff	_fround$1406+1,?___ftmul+1
  7730  00194E  C045  F028         	movff	_fround$1406+2,?___ftmul+2
  7731  001952  0E00               	movlw	0
  7732  001954  6E29               	movwf	?___ftmul+3,c
  7733  001956  0E00               	movlw	0
  7734  001958  6E2A               	movwf	?___ftmul+4,c
  7735  00195A  0E3F               	movlw	63
  7736  00195C  6E2B               	movwf	?___ftmul+5,c
  7737  00195E  EC4F  F00E         	call	___ftmul	;wreg free
  7738  001962  D01F               	goto	L13
  7739  001964                     l3766:
  7740                           
  7741                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7742  001964  5037               	movf	fround@prec,w,c
  7743  001966  0D03               	mullw	3
  7744  001968  0E28               	movlw	low __npowers_
  7745  00196A  24F3               	addwf	prodl,w,c
  7746  00196C  6EF6               	movwf	tblptrl,c
  7747  00196E  0E08               	movlw	high __npowers_
  7748  001970  20F4               	addwfc	prodh,w,c
  7749  001972  6EF7               	movwf	tblptrh,c
  7750  001974  0009               	tblrd		*+
  7751  001976  CFF5 F03A          	movff	tablat,??_fround
  7752  00197A  0009               	tblrd		*+
  7753  00197C  CFF5 F03B          	movff	tablat,??_fround+1
  7754  001980  0009               	tblrd		*+
  7755  001982  CFF5 F03C          	movff	tablat,??_fround+2
  7756  001986  C03C  F028         	movff	??_fround+2,?___ftmul+2
  7757  00198A  C03B  F027         	movff	??_fround+1,?___ftmul+1
  7758  00198E  C03A  F026         	movff	??_fround,?___ftmul
  7759  001992  0E00               	movlw	0
  7760  001994  6E29               	movwf	?___ftmul+3,c
  7761  001996  0E00               	movlw	0
  7762  001998  6E2A               	movwf	?___ftmul+4,c
  7763  00199A  0E3F               	movlw	63
  7764  00199C  6E2B               	movwf	?___ftmul+5,c
  7765  00199E  EC4F  F00E         	call	___ftmul	;wreg free
  7766  0019A2                     L13:
  7767  0019A2  C028  F039         	movff	?___ftmul+2,?_fround+2
  7768  0019A6  C027  F038         	movff	?___ftmul+1,?_fround+1
  7769  0019AA  C026  F037         	movff	?___ftmul,?_fround
  7770  0019AE  0012               	return	
  7771  0019B0                     __end_of_fround:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           postinc0	equ	0xFEE
  7781                           wreg	equ	0xFE8
  7782                           postinc1	equ	0xFE6
  7783                           postdec1	equ	0xFE5
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           postdec2	equ	0xFDD
  7788                           fsr2h	equ	0xFDA
  7789                           fsr2l	equ	0xFD9
  7790                           status	equ	0xFD8
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           postinc0	equ	0xFEE
  7799                           wreg	equ	0xFE8
  7800                           postinc1	equ	0xFE6
  7801                           postdec1	equ	0xFE5
  7802                           fsr1l	equ	0xFE1
  7803                           indf2	equ	0xFDF
  7804                           postinc2	equ	0xFDE
  7805                           postdec2	equ	0xFDD
  7806                           fsr2h	equ	0xFDA
  7807                           fsr2l	equ	0xFD9
  7808                           status	equ	0xFD8
  7809                           
  7810                           	psect	rparam
  7811  0000                     tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           postinc0	equ	0xFEE
  7819                           wreg	equ	0xFE8
  7820                           postinc1	equ	0xFE6
  7821                           postdec1	equ	0xFE5
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    118
    Data        12
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      95
    BANK0           160     39      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?_ReadADC	int  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?_ADC_Value	float  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___awtoft	float  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 9
		 -> str1(BANK0[9]), Display@voltage(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 6
		 -> Display@voltage(BANK0[6]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S307$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_Display
    _ADC_Value->___ftdiv
    ___awtoft->___ftpack
    ___ftdiv->___ftmul
    _OpenXLCD->_SetDDRamAddr
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_Delay1KTCYx
    _Display->_sprintf
    _putsXLCD->_WriteDataXLCD
    _WriteDataXLCD->_DelayFor18TCY
    _BusyXLCD->_DelayFor18TCY
    _WriteCmdXLCD->_DelayFor18TCY
    _DelayFor18TCY->_Delay10TCYx
    _sprintf->___asftadd
    ___lltoft->___ftpack
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftpack
    _scale->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___ftmul->___fttol
    _fround->___ftmul

Critical Paths under _main in BANK0

    _main->_Display
    _Display->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14096
                                             91 COMRAM     1     1      0
                            _Display
                       _WriteCmdXLCD
                           _putsXLCD
                           _OpenXLCD
                       _SetDDRamAddr
                            _OpenADC
                          _ADC_Value
 ---------------------------------------------------------------------------------
 (1) _ADC_Value                                            6     3      3    1348
                                             71 COMRAM     6     3      3
                         _ConvertADC
                            _BusyADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___awtoft
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3     300
                                              8 COMRAM     5     2      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     489
                                             54 COMRAM    17    11      6
                           ___ftpack
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              5     2      3     154
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _OpenXLCD                                             2     1      1     336
                                              7 COMRAM     2     1      1
                       _DelayPORXLCD
                       _Delay10KTCYx
                       _WriteCmdXLCD
                       _SetDDRamAddr
                           _BusyXLCD
 ---------------------------------------------------------------------------------
 (1) _SetDDRamAddr                                         4     3      1     112
                                              3 COMRAM     4     3      1
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     1      1      22
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _DelayPORXLCD                                         1     1      0      22
                                              1 COMRAM     1     1      0
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _Display                                             10     7      3   11853
                                             87 COMRAM     4     1      3
                                             33 BANK0      6     6      0
                            _sprintf
                       _WriteCmdXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     203
                                              4 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     0      1      90
                                              3 COMRAM     1     0      1
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      68
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     0      1      90
                                              3 COMRAM     1     0      1
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _DelayFor18TCY                                        2     2      0      68
                                              1 COMRAM     2     2      0
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             50    43      7   11469
                                             74 COMRAM    13     6      7
                                              0 BANK0     33    33      0
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     159
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     162
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     252
                                             22 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___asftsub                                            5     0      5    1160
                                             28 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    1094
                                             22 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___asftmul                                            5     0      5     601
                                             54 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___asftadd                                            5     0      5    1115
                                             69 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             14     8      6    1049
                                              8 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _scale                                               15    12      3    1779
                                             54 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     159
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     296
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     300
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     535
                                             37 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _fround                                              18    15      3    1372
                                             54 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display
     _sprintf
       _fround
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       __tdiv_to_l_
       __div_to_l_
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftneg
       ___fttol
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___lwmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _putsXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _WriteDataXLCD
         _DelayFor18TCY
           _Delay10TCYx
   _WriteCmdXLCD
     _DelayFor18TCY
       _Delay10TCYx
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteDataXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _OpenXLCD
     _DelayPORXLCD
       _Delay1KTCYx
     _Delay10KTCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _SetDDRamAddr
       _DelayFor18TCY
         _Delay10TCYx
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _SetDDRamAddr
     _DelayFor18TCY
       _Delay10TCYx
   _OpenADC
   _ADC_Value
     _ConvertADC
     _BusyADC
     _ReadADC
     ___ftdiv
       ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       _ReadADC (ARG)
       ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      39       5       35.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       6       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      20        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Jul 17 16:32:34 2014

           ___asftadd@f2 0048            ___asftadd@f1p 0046             ___awdiv@sign 000E  
     __size_of_ADC_Value 007C              __CFG_BOR$ON 000000      ___wmul@multiplicand 0013  
            __CFG_BORV$3 000000             ___asftmul@f2 0039             __CFG_CP0$OFF 000000  
           ___asftsub@f2 001F             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0016             ___ftadd@exp2 0015  
           ___ftadd@sign 0014                      l104 29A2                      l105 29A8  
                    l231 0F6C                      l172 172E                      l282 263C  
                    l532 2A1C                      l605 1F9E                      l525 29EA  
                    l614 1F8E                      l607 1F0A                      l723 1C9C  
                    l707 1B02                      l811 2396                      l539 2A0E  
                    l715 1EAA                      l732 1C8C                      l741 2290  
                    l821 256E                      l717 1E54                      l726 1C3A  
                    l646 2200                      l718 1E7A                      l747 1DAC  
                    l683 1A18                      l684 1B7A                      l757 2934  
                    l687 1A42                      l767 207E                      l698 1AE6  
                    l890 277A             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
  __size_of_WriteCmdXLCD 0020             ___awmod@sign 0007                      wreg 000FE8  
           __CFG_FOSC$HS 000000            ___asftmul@f1p 0037              _sprintf$318 0063  
          ___asftsub@f1p 001D             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0042  
           ___ftdiv@sign 0047             __CFG_WDT$OFF 000000                     l4202 2020  
                   l4220 206E                     l4212 2048                     l4300 0B5C  
                   l4214 2054                     l4206 2030                     l4152 14E6  
                   l3520 1C54                     l3504 1C12                     l3600 2172  
                   l4216 2058                     l4312 0BE6                     l4232 08AE  
                   l4170 1700                     l4146 142A                     l3530 1C7C  
                   l3610 21CE                     l3602 2190                     l4226 0890  
                   l4164 1638                     l4156 14F4                     l3532 1C88  
                   l3524 1C64                     l3540 1EB8                     l3700 2388  
                   l4412 0FA4                     l4404 0F70                     l4340 0D14  
                   l4324 0C76                     l4316 0C1E                     l4308 0BBE  
                   l4252 097A                     l4084 23B8                     l3606 21A6  
                   l3710 2538                     l4262 09E4                     l4238 08EE  
                   l4246 094E                     l3640 245E                     l3632 2440  
                   l3608 21C4                     l3800 1A82                     l4184 1FCC  
                   l3712 253C                     l4416 0FF6                     l4360 0DCC  
                   l4328 0C9C                     l4256 09B6                     l3642 2466  
                   l3474 295E                     l3490 1BD4                     l3546 1EC4  
                   l3810 1AB2                     l4450 1184                     l4442 111C  
                   l4434 10EA                     l4426 10C0                     l4346 0D72  
                   l4274 0A38                     l4266 09EC                     l4258 09CE  
                   l3644 246A                     l3652 2488                     l3636 244C  
                   l3484 1BA8                     l3580 1F66                     l3820 1AE0  
                   l3812 1AB8                     l3716 2560                     l3708 252C  
                   l3732 2770                     l3724 2750                     l4428 10D0  
                   l4364 0E1E                     l4284 0AA2                     l4436 10F8  
                   l4268 0A16                     l4540 211C                     l4532 20F0  
                   l3910 22E0                     l3902 22BE                     l3566 1F3A  
                   l3806 1AA0                     l3726 2758                     l4470 125A  
                   l4462 11FC                     l4446 1148                     l4382 0E92  
                   l4390 0F0C                     l4374 0E56                     l4526 20D4  
                   l3920 2300                     l3912 22E4                     l3656 2496  
                   l3648 247E                     l3576 1F56                     l3808 1AAA  
                   l3664 2232                     l3728 275C                     l4472 1266  
                   l4464 120A                     l4456 11B6                     l4392 0F1C  
                   l4368 0E3C                     l4544 2132                     l4536 2106  
                   l4528 20DE                     l3586 1F7E                     l3594 215A  
                   l3826 1B1E                     l3818 1AD6                     l3674 228E  
                   l3690 2354                     l3852 1D02                     l3908 22D8  
                   l3924 230A                     l3588 1F8A                     l3836 1B56  
                   l3668 2262                     l3692 2358                     l4468 124C  
                   l4484 12B6                     l4492 28EE                     l3940 27A0  
                   l4572 24F4                     l3766 1964                     l3758 188C  
                   l3870 1D48                     l3846 1CCA                     l3598 2168  
                   l4478 128A                     l4398 0F36                     l4486 12D2  
                   l3880 1D74                     l3928 2318                     l3784 1A50  
                   l3688 2348                     l3960 29D4                     l3866 1D38  
                   l3778 1A26                     l3946 258A                     l4498 290C  
                   l3876 1D64                     l3948 2596                     l3980 1DDA  
                   l3896 22AE                     l3986 1E12                     STR_1 0876  
                   u2210 19CE                     u2220 19F4                     u2215 19C6  
                   u2225 19EC                     u2420 1CBC                     u2440 1CE8  
                   u2600 1DF8                     u2425 1CB4                     u3321 26F4  
                   u2450 1CF4                     u2610 1E04                     u2445 1CE0  
                   u2605 1DF0                     u1910 1F6C                     u2710 1FBE  
                   u1840 1C6A                     u3337 29F0                     u1770 1B9A  
                   u2730 1FEA                     u2715 1FB6                     u3347 2A10  
                   u2635 265A                     u2580 1DCC                     u3357 2A1E  
                   u1790 1BC6                     u1775 1B92                     u2735 1FE2  
                   u2760 2036                     u2585 1DC4                     u1795 1BBE  
                   u2880 0AF2                     u2865 0A7A                     u2885 0AE8  
                   _main 24A0             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   _str1 0090                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9   __size_of_WriteDataXLCD 0022  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             _sprintf$1409 0060            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0035          __end_of_Display 273E             ___ftmul@sign 0036  
        __end_of_BusyADC 2A44          __end_of_ReadADC 2A34              _Delay10TCYx 2A1C  
        __end_of_OpenADC 2640             ___fttol@exp1 0025             ___fttol@lval 0021  
           _WriteCmdXLCD 29AA              _Delay1KTCYx 2A0E            __CFG_PLLDIV$5 000000  
          ?_SetDDRamAddr 0004                    ?_main 0001          __end_of___awdiv 2322  
        __end_of___ftadd 1B7C          __end_of___awmod 24A0          __end_of___ftdiv 1EAC  
        __end_of___ftneg 2942          __end_of___lldiv 23A8          __end_of___ftmul 1DAE  
        ___awdiv@divisor 000A          __end_of___llmod 2580          __end_of___ftsub 28EC  
        __end_of___fttol 2080          __end_of___lwmod 2784          ___awdiv@counter 000D  
                  _PORTB 000F81                    _PORTD 000F83            __CFG_USBDIV$1 000000  
                  _TRISB 000F93                    _TRISD 000F95    __size_of_Delay10KTCYx 0016  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0011  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 000D          __end_of_dpowers 0828                    _scale 12E0  
        __end_of_isdigit 2966            ___ftpack@sign 0005                    _value 008D  
             _ConvertADC 2A44                    tablat 000FF5        __end_of_ADC_Value 2424  
                  status 000FD8          __end_of_sprintf 12E0           __CFG_ICPRT$OFF 000000  
        __initialization 2696             __end_of_main 2516         __end_of_BusyXLCD 29AA  
           _Delay10KTCYx 29EA    __size_of_DelayPORXLCD 000E           ??_SetDDRamAddr 0005  
       __end_of_OpenXLCD 214A                   ??_main 005C            ___fttol@sign1 0020  
          __activetblptr 000002            _WriteDataXLCD 2966     __size_of__tdiv_to_l_ 0122  
        __CFG_CCP2MX$OFF 000000           DelayFor18TCY@i 0003                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0         ___llmod@dividend 0001  
                 ?_scale 0037                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0008         __end_of___awtoft 27C8         __end_of___ftpack 2202  
       __end_of___lltoft 25E4                ??_Display 005B                ??_BusyADC 0001  
              ??_ReadADC 0003                ??_OpenADC 0004             _DelayPORXLCD 2A00  
         __CFG_XINST$OFF 000000         __end_of__powers_ 0876                   ___ftge 2202  
                 ___wmul 287C                ??___awdiv 000C                ??___ftadd 000F  
         __CFG_STVREN$ON 000000                ??___awmod 0005                ??___ftdiv 003D  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 002C  
              ??___llmod 0009                ??___ftsub 001D                ??___fttol 001B  
              ??___lwmod 0005                   _fround 1730                   clear_0 269C  
       ___awdiv@quotient 000F          ___awmod@divisor 0003          ___awmod@counter 0006  
         ?_WriteDataXLCD 0004    ___ftmul@f3_as_product 0032             __pdataCOMRAM 005D  
              ??_isdigit 0002             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_putsXLCD 291C  
              ??_sprintf 0052              ?_ConvertADC 0001       __size_of___asftadd 003C  
     __size_of___asftmul 003C       __size_of___asftsub 003C               __accesstop 0060  
__end_of__initialization 26E0          __CFG_PBADEN$OFF 000000               ___ftadd@f1 0009  
             ___ftadd@f2 000C               ___ftge@ff1 0001               ___ftge@ff2 0004  
             ___ftdiv@f1 0037               ___ftdiv@f2 003A               ___ftdiv@f3 0043  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0026  
             ___ftmul@f2 0029               ___ftsub@f1 0017               ___ftsub@f2 001A  
             ___fttol@f1 0017           __pcstackCOMRAM 0001             __pidataBANK0 2A34  
             ___lltoft@c 0009            __end_of_scale 1730               __div_to_l_ 1EAC  
        __div_to_l_@exp1 000D          __div_to_l_@cntr 000C             sprintf@integ 0072  
                ??_scale 003A   __size_of_DelayFor18TCY 0020          __div_to_l_@quot 0008  
           sprintf@width 0077               __pbssBANK0 0087                ?_BusyXLCD 0001  
        WriteCmdXLCD@cmd 0004     __end_of_SetDDRamAddr 2696                ?_OpenXLCD 0008  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
      WriteDataXLCD@data 0004             ?_Delay10TCYx 0001                  ?___wmul 0011  
        ??_WriteDataXLCD 0005             ?_Delay1KTCYx 0001        __end_of___asftadd 287C  
                ?_fround 0037        __end_of___asftmul 2840        __end_of___asftsub 2804  
    __size_of_ConvertADC 0004                ?___awtoft 0009                ?___ftpack 0001  
              ?___lltoft 0009               ??_BusyXLCD 0004          __CFG_VREGEN$OFF 000000  
                _Display 26EA                  _BusyADC 2A3E                  _ReadADC 2A2A  
             ??_OpenXLCD 0009                _ADC_Value 23A8                  _OpenADC 25E4  
      __end_of__npowers_ 084F                  __Hparam 0000               _scale$1408 0040  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 2292  
          _DelayFor18TCY 29CA                  ___ftadd 19B0                  ___awmod 2424  
                ___ftdiv 1DAE                  ___ftneg 291C                  ___lldiv 2322  
        __size_of___wmul 003A                  ___ftmul 1C9E                  ___llmod 2516  
                ___ftsub 28B6                  ___fttol 1FA0                ?_putsXLCD 0005  
                ___lwmod 273E             __psmallconst 0800                  __pcinit 2696  
             ??___awtoft 000C               ??___ftpack 0006          __size_of_fround 0280  
        Delay10TCYx@unit 0001                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 24A0                  __ptext1 23A8                  __ptext2 2784  
                __ptext3 1DAE                  __ptext4 2A2A                  __ptext5 2A3E  
                __ptext6 2A44                  __ptext7 25E4                  __ptext8 2080  
                __ptext9 2640              ?__div_to_l_ 0001                  _dpowers 0800  
                _isdigit 2942         ___awmod@dividend 0001           OpenADC@config2 0002  
                _sprintf 087E     end_of_initialization 26E0            __Lmediumconst 0000  
             ?_ADC_Value 0048          ___lldiv@divisor 0005          ___lldiv@counter 000E  
         ?_DelayFor18TCY 0001                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_putsXLCD 0007           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007                _TRISAbits 000F92               _portconfig 005F  
  __size_of_SetDDRamAddr 0056             ??_ConvertADC 0001              ___ftdiv@exp 0046  
    __size_of__div_to_l_ 00F4              ___ftmul@exp 0031           __end_of___ftge 2292  
         __end_of___wmul 28B6     __size_of_Delay10TCYx 000E            __pidataCOMRAM 2A48  
     __end_of_ConvertADC 2A48           __end_of_fround 19B0             _SetDDRamAddr 2640  
   __size_of_Delay1KTCYx 000E       SetDDRamAddr@DDaddr 0004      start_initialization 2696  
    __end_of__tdiv_to_l_ 1C9E          ___llmod@divisor 0005        __size_of_BusyXLCD 0022  
        ___llmod@counter 000A              ??_ADC_Value 004B          ??_DelayFor18TCY 0002  
      __size_of_OpenXLCD 00CA                 ??___ftge 0007                 ??___wmul 0015  
          sprintf@vd_320 006B            ?_WriteCmdXLCD 0004              __pdataBANK0 0090  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 003A               fround@prec 0037  
      __size_of___awtoft 0044        __size_of___ftpack 00B8                ___asftadd 2840  
              ___asftmul 2804                ___asftsub 27C8        __size_of___lltoft 0064  
          __pcstackBANK0 0060      __end_of__stringdata 087D             _isdigit$1071 0003  
        Delay1KTCYx@unit 0001              sprintf@_val 006D              sprintf@flag 0075  
            sprintf@fval 007B              sprintf@prec 007E                 ?_Display 0058  
               ?_BusyADC 0001                 ?_ReadADC 0001        OpenADC@portconfig 0003  
               ?_OpenADC 0001           putsXLCD@buffer 0005           ??_WriteCmdXLCD 0005  
               ?___awdiv 0008                 ?___ftadd 0009                 ?___awmod 0001  
               ?___ftdiv 0037                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0026                 ?___llmod 0001                 ?___ftsub 0017  
              __npowers_ 0828                 ?___fttol 0017            ?_Delay10KTCYx 0001  
               ?___lwmod 0001              __tdiv_to_l_ 1B7C        __size_of_putsXLCD 0030  
  __end_of_WriteDataXLCD 2988             ??__div_to_l_ 0007              __smallconst 0800  
             ?___asftadd 0046                 ?_isdigit 0001               ?___asftmul 0037  
             ?___asftsub 001D                 ?_sprintf 004B           __size_of_scale 0450  
         ___wmul@product 0015            OpenADC@config 0001                 _LATAbits 000F89  
               _LATBbits 000F8A                 _PIE1bits 000F9D            ?_DelayPORXLCD 0001  
               _PIR1bits 000F9E          OpenXLCD@lcdtype 0008       __end_of__div_to_l_ 1FA0  
       __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0002           ADC_Value@value 004B  
         Display@voltage 0081               _ADCON0bits 000FC2              __stringdata 0876  
      ___wmul@multiplier 0011         Delay10KTCYx@unit 0001                copy_data0 26B6  
               _BusyXLCD 2988           ??_DelayPORXLCD 0002                 _OpenXLCD 2080  
       __size_of_Display 0054         __size_of_BusyADC 0006         __size_of_ReadADC 000A  
               __Hrparam 0000         __size_of_OpenADC 005C                 __Lrparam 0000  
       __size_of___awdiv 0090         __size_of___ftadd 01CC         __size_of___awmod 007C  
       __size_of___ftdiv 00FE         __size_of___ftneg 0026         __size_of___lldiv 0086  
       __size_of___ftmul 0110         __size_of___llmod 006A         __size_of___ftsub 0036  
       __size_of___fttol 00E0         __size_of___lwmod 0046                 ___awtoft 2784  
               ___ftpack 214A              _fround$1406 0043              _fround$1407 0040  
               ___lltoft 2580              ??___asftadd 004B               sprintf@exp 0079  
            ??___asftmul 003C              ??___asftsub 0022         __size_of_isdigit 0024  
               __ptext10 29EA                 __ptext11 2A00                 __ptext20 087E  
               __ptext12 2A0E                 __ptext21 273E                 __ptext13 26EA  
               __ptext30 2804                 __ptext22 2580                 __ptext14 28EC  
               __ptext31 2840                 __ptext23 2516                 __ptext15 2966  
               __ptext40 2292                 __ptext32 19B0                 __ptext24 2322  
               __ptext16 2988                 __ptext41 1C9E                 __ptext33 214A  
               __ptext25 1FA0                 __ptext17 29AA                 __ptext42 1730  
               __ptext34 1EAC                 __ptext26 291C                 __ptext18 29CA  
               __ptext35 1B7C                 __ptext27 2202                 __ptext19 2A1C  
               __ptext36 2942                 __ptext28 27C8                 __ptext37 12E0  
               __ptext29 28B6                 __ptext38 287C                 __ptext39 2424  
               __powers_ 084F                 _config_1 005D                 _config_2 005E  
   __end_of_WriteCmdXLCD 29CA         __size_of_sprintf 0A62            __size_of_main 0076  
          ??_Delay10TCYx 0002                 _putsXLCD 28EC            ??_Delay1KTCYx 0002  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 isdigit@c 0001  
               scale@scl 0037     __end_of_Delay10KTCYx 2A00             Display@F4520 0087  
              sprintf@ap 0067         __tdiv_to_l_@exp1 0011                sprintf@vd 0069  
              sprintf@sp 004B         __tdiv_to_l_@cntr 0010         __tdiv_to_l_@quot 000C  
       ___lwmod@dividend 0001         ___lldiv@dividend 0001    __end_of_DelayFor18TCY 29EA  
           ?__tdiv_to_l_ 0001      __end_of_Delay10TCYx 2A2A                 sprintf@c 0080  
               sprintf@f 004D     __end_of_DelayPORXLCD 2A0E         ___lldiv@quotient 000A  
        ___lwmod@divisor 0003      __end_of_Delay1KTCYx 2A1C          ___lwmod@counter 0006  
             Display@val 0058  
